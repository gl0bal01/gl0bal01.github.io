"use strict";(globalThis.webpackChunkgl_0_bal_01=globalThis.webpackChunkgl_0_bal_01||[]).push([[6119],{17888:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>t,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"cheatsheets/docker-practical-examples","title":"Docker Practical Examples: Complete Mastery Guide for Developers","description":"Master Docker with 50+ practical examples covering containers, images, Compose, networking, security, and production deployments","source":"@site/docs/cheatsheets/docker.md","sourceDirName":"cheatsheets","slug":"/cheatsheets/docker-practical-examples","permalink":"/cheatsheets/docker-practical-examples","draft":false,"unlisted":false,"editUrl":"https://github.com/gl0bal01/gl0bal01.github.io/tree/main/docs/cheatsheets/docker.md","tags":[{"inline":true,"label":"Development","permalink":"/tags/development"},{"inline":true,"label":"DevOps","permalink":"/tags/dev-ops"}],"version":"current","lastUpdatedAt":1750348488000,"sidebarPosition":1,"frontMatter":{"id":"docker-practical-examples","title":"Docker Practical Examples: Complete Mastery Guide for Developers","sidebar_label":"Docker Practical","sidebar_position":1,"description":"Master Docker with 50+ practical examples covering containers, images, Compose, networking, security, and production deployments","keywords":["docker","containers","containerization","docker-compose","kubernetes","devops","microservices","orchestration","deployment","production"],"authors":["gl0bal01"],"tags":["Development","DevOps"],"date":"2025-06-18T00:00:00.000Z"},"sidebar":"tutorialSidebar","previous":{"title":"Cheatsheets","permalink":"/cheatsheets"},"next":{"title":"Exegol Practical","permalink":"/cheatsheets/exegol-practical-guide"}}');var s=r(74848),o=r(28453);const t={id:"docker-practical-examples",title:"Docker Practical Examples: Complete Mastery Guide for Developers",sidebar_label:"Docker Practical",sidebar_position:1,description:"Master Docker with 50+ practical examples covering containers, images, Compose, networking, security, and production deployments",keywords:["docker","containers","containerization","docker-compose","kubernetes","devops","microservices","orchestration","deployment","production"],authors:["gl0bal01"],tags:["Development","DevOps"],date:new Date("2025-06-18T00:00:00.000Z")},a="Docker Practical Guide",c={},l=[{value:"What is Docker?",id:"what-is-docker",level:2},{value:"Common Use Cases",id:"common-use-cases",level:3},{value:"Docker CLI Fundamentals",id:"docker-cli-fundamentals",level:2},{value:"Docker Installation &amp; Configuration",id:"docker-installation--configuration",level:2},{value:"Basic Container Operations",id:"basic-container-operations",level:2},{value:"Image Management &amp; Dockerfiles",id:"image-management--dockerfiles",level:2},{value:"Production-Ready Dockerfile Examples",id:"production-ready-dockerfile-examples",level:3},{value:"Docker Compose for Multi-container Applications",id:"docker-compose-for-multi-container-applications",level:2},{value:"Networking &amp; Storage",id:"networking--storage",level:2},{value:"Security &amp; Production Practices",id:"security--production-practices",level:2},{value:"Production Docker Compose with Secrets",id:"production-docker-compose-with-secrets",level:3},{value:"Debugging &amp; Troubleshooting",id:"debugging--troubleshooting",level:2},{value:"Performance &amp; Optimization",id:"performance--optimization",level:2},{value:"Advanced Docker Features",id:"advanced-docker-features",level:2},{value:"Pro Tips &amp; Best Practices",id:"pro-tips--best-practices",level:2},{value:"\ud83d\ude80 Performance Tips",id:"-performance-tips",level:3},{value:"\ud83d\udd12 Security Best Practices",id:"-security-best-practices",level:3},{value:"\ud83d\udce6 Production Deployment",id:"-production-deployment",level:3},{value:"\ud83d\udee0 Development Workflow",id:"-development-workflow",level:3},{value:"\ud83d\udd27 Troubleshooting Quick Fixes",id:"-troubleshooting-quick-fixes",level:3},{value:"\ud83d\udcca Monitoring &amp; Maintenance",id:"-monitoring--maintenance",level:3},{value:"References",id:"references",level:2},{value:"Official Documentation",id:"official-documentation",level:3},{value:"Essential Tools &amp; Extensions",id:"essential-tools--extensions",level:3},{value:"Image Registries",id:"image-registries",level:3},{value:"Learning Resources",id:"learning-resources",level:3},{value:"Community &amp; Support",id:"community--support",level:3},{value:"Books &amp; Advanced Learning",id:"books--advanced-learning",level:3}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components},{Details:r}=n;return r||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"docker-practical-guide",children:"Docker Practical Guide"})}),"\n",(0,s.jsx)(n.h2,{id:"what-is-docker",children:"What is Docker?"}),"\n",(0,s.jsx)(n.p,{children:"Docker is a containerization platform that packages applications and their dependencies into lightweight, portable containers. Think of containers as standardized shipping boxes for software - they contain everything needed to run an application: code, runtime, system tools, libraries, and settings."}),"\n",(0,s.jsxs)(r,{children:[(0,s.jsx)("summary",{children:"Why Docker is Awesome"}),(0,s.jsx)("u",{children:(0,s.jsx)(n.strong,{children:"\ud83d\ude80 Consistency Across Environments"})}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:'"It works on my machine" becomes "It works everywhere"'}),"\n",(0,s.jsx)(n.li,{children:"Identical behavior from development to production"}),"\n",(0,s.jsx)(n.li,{children:"Eliminates environment-specific bugs and configuration drift"}),"\n"]}),(0,s.jsx)("u",{children:(0,s.jsx)(n.strong,{children:"\u26a1 Lightweight & Fast"})}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Containers share the host OS kernel (unlike VMs)"}),"\n",(0,s.jsx)(n.li,{children:"Start in seconds, not minutes"}),"\n",(0,s.jsx)(n.li,{children:"Use minimal system resources"}),"\n"]}),(0,s.jsx)("u",{children:(0,s.jsx)(n.strong,{children:"\ud83d\udce6 Simplified Deployment"})}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Bundle applications with all dependencies"}),"\n",(0,s.jsx)(n.li,{children:"Version control for entire application stacks"}),"\n",(0,s.jsx)(n.li,{children:"Easy rollbacks and updates"}),"\n"]}),(0,s.jsx)("u",{children:(0,s.jsx)(n.strong,{children:"\ud83d\udd27 Developer Productivity"})}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Onboard new developers in minutes"}),"\n",(0,s.jsx)(n.li,{children:"Consistent development environments"}),"\n",(0,s.jsx)(n.li,{children:"Easy to replicate complex setups locally"}),"\n"]}),(0,s.jsx)("u",{children:(0,s.jsx)(n.strong,{children:"\ud83c\udf10 Microservices & Scalability"})}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Perfect for microservices architecture"}),"\n",(0,s.jsx)(n.li,{children:"Scale individual components independently"}),"\n",(0,s.jsx)(n.li,{children:"Orchestrate with Kubernetes, Docker Swarm"}),"\n"]}),(0,s.jsx)(n.h3,{id:"common-use-cases",children:"Common Use Cases"}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Web Applications"}),": Package apps with specific runtime versions"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Microservices"}),": Deploy and scale service components independently"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Development Environments"}),": Consistent toolchains across teams"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"CI/CD Pipelines"}),": Reliable build and test environments"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Legacy Application Modernization"}),": Containerize without code changes"]}),"\n"]})]}),"\n",(0,s.jsx)(n.h2,{id:"docker-cli-fundamentals",children:"Docker CLI Fundamentals"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Master the Docker command-line interface, understand command structure, and learn essential help and information commands."})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Docker CLI structure and help\r\ndocker --help  # Main help\r\ndocker COMMAND --help  # Command-specific help\r\ndocker run --help  # Example: get help for run command\r\n\r\n# Get Docker information and version\r\ndocker version  # Client and server versions\r\ndocker info  # Detailed system information\r\ndocker system info  # Alternative system info command\r\n\r\n# Command structure patterns\r\ndocker [OPTIONS] COMMAND [ARG...]\r\ndocker run [OPTIONS] IMAGE [COMMAND] [ARG...]\r\ndocker exec [OPTIONS] CONTAINER COMMAND [ARG...]\r\n\r\n# Common global options\r\ndocker --log-level debug COMMAND  # Set logging level\r\ndocker --host tcp://remote-host:2376 COMMAND  # Remote Docker daemon\r\ndocker --context mycontext COMMAND  # Use specific context\r\n\r\n# Essential information commands\r\ndocker system df  # Show Docker disk usage\r\ndocker system events  # Show real-time Docker events\r\ndocker system prune  # Clean up unused resources\n"})}),"\n",(0,s.jsx)(n.h2,{id:"docker-installation--configuration",children:"Docker Installation & Configuration"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Set up Docker across different platforms, configure daemon settings, and manage user permissions for optimal development experience."})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# Install Docker on Ubuntu/Debian\r\ncurl -fsSL https://get.docker.com -o get-docker.sh\r\nsudo sh get-docker.sh\r\nsudo usermod -aG docker $USER\r\n\r\n# 2. Install Docker Desktop (macOS/Windows)\r\n# Download from https://www.docker.com/products/docker-desktop\r\n# Or use package managers:\r\nbrew install --cask docker  # macOS\r\nwinget install Docker.DockerDesktop  # Windows\r\n\r\n# 3. Verify installation and get system info\r\ndocker --version\r\ndocker info\r\ndocker system df  # Check disk usage\r\n\r\n# 4. Configure Docker daemon\r\nsudo mkdir -p /etc/docker\r\nsudo tee /etc/docker/daemon.json <<EOF\r\n{\r\n  "log-driver": "json-file",\r\n  "log-opts": {\r\n    "max-size": "10m",\r\n    "max-file": "3"\r\n  },\r\n  "storage-driver": "overlay2"\r\n}\r\nEOF\r\nsudo systemctl restart docker\r\n\r\n# 5. Enable BuildKit (modern build engine)\r\nexport DOCKER_BUILDKIT=1\r\necho \'export DOCKER_BUILDKIT=1\' >> ~/.bashrc\n'})}),"\n",(0,s.jsx)(n.h2,{id:"basic-container-operations",children:"Basic Container Operations"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Master fundamental container lifecycle management, from creation to cleanup, with essential daily commands."})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Run containers (basic to advanced)\r\ndocker run hello-world\r\ndocker run -it ubuntu:22.04 bash\r\ndocker run -d --name webapp -p 8080:80 nginx:alpine\r\n\r\n# Container lifecycle management\r\ndocker ps  # List running containers\r\ndocker ps -a  # List all containers\r\ndocker start webapp\r\ndocker stop webapp\r\ndocker restart webapp\r\n\r\n# Interactive container operations\r\ndocker exec -it webapp /bin/sh\r\ndocker logs webapp\r\ndocker logs -f webapp  # Follow logs\r\ndocker logs --tail 100 webapp\r\n\r\n# Container inspection and monitoring\r\ndocker inspect webapp\r\ndocker stats webapp  # Real-time resource usage\r\ndocker top webapp  # Running processes\r\ndocker port webapp  # Port mappings\r\n\r\n# Container cleanup operations\r\ndocker rm webapp  # Remove stopped container\r\ndocker rm -f webapp  # Force remove running container\r\ndocker container prune  # Remove all stopped containers\r\ndocker system prune  # Clean up everything unused\n"})}),"\n",(0,s.jsx)(n.h2,{id:"image-management--dockerfiles",children:"Image Management & Dockerfiles"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Build, optimize, and manage Docker images with multi-stage builds, best practices, and efficient Dockerfile patterns."})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Image operations and registry management\r\ndocker images\r\ndocker pull nginx:alpine\r\ndocker tag nginx:alpine myregistry.com/nginx:v1.0\r\ndocker push myregistry.com/nginx:v1.0\r\n\r\n# Image cleanup and optimization\r\ndocker image prune  # Remove dangling images\r\ndocker image prune -a  # Remove unused images\r\ndocker rmi image-name:tag\r\ndocker history nginx:alpine  # View image layers\r\n\r\n# Build images with different contexts\r\ndocker build -t myapp:latest .\r\ndocker build -t myapp:dev -f Dockerfile.dev .\r\ndocker build --no-cache -t myapp:clean .\r\ndocker build --platform linux/amd64,linux/arm64 -t myapp:multi .\n"})}),"\n",(0,s.jsx)(n.h3,{id:"production-ready-dockerfile-examples",children:"Production-Ready Dockerfile Examples"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-dockerfile",children:'# Multi-stage Python application\r\n# syntax=docker/dockerfile:1\r\nFROM python:3.11-slim AS base\r\n\r\n# Set environment variables\r\nENV PYTHONDONTWRITEBYTECODE=1 \\\r\n    PYTHONUNBUFFERED=1 \\\r\n    PIP_NO_CACHE_DIR=1 \\\r\n    PIP_DISABLE_PIP_VERSION_CHECK=1\r\n\r\nWORKDIR /app\r\n\r\n# Create non-root user\r\nARG UID=10001\r\nRUN adduser \\\r\n    --disabled-password \\\r\n    --gecos "" \\\r\n    --home "/nonexistent" \\\r\n    --shell "/sbin/nologin" \\\r\n    --no-create-home \\\r\n    --uid "${UID}" \\\r\n    appuser\r\n\r\n# Install dependencies with caching\r\nRUN --mount=type=cache,target=/root/.cache/pip \\\r\n    --mount=type=bind,source=requirements.txt,target=requirements.txt \\\r\n    python -m pip install -r requirements.txt\r\n\r\n# Switch to non-root user\r\nUSER appuser\r\n\r\n# Copy application code\r\nCOPY . .\r\n\r\n# Health check\r\nHEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \\\r\n    CMD curl -f http://localhost:8000/health || exit 1\r\n\r\nEXPOSE 8000\r\nCMD ["python", "app.py"]\r\n\r\n# Optimized Node.js build\r\nFROM node:18-alpine AS build\r\nWORKDIR /app\r\nCOPY package*.json ./\r\nRUN npm ci --only=production && npm cache clean --force\r\n\r\nFROM node:18-alpine AS runtime\r\nWORKDIR /app\r\nRUN apk add --no-cache tini\r\nCOPY --from=build /app/node_modules ./node_modules\r\nCOPY . .\r\nEXPOSE 3000\r\nENTRYPOINT ["/sbin/tini", "--"]\r\nCMD ["node", "server.js"]\r\n\r\n# Security-hardened base image\r\nFROM alpine:3.21@sha256:a8560b36e8b8210634f77d9f7f9efd7ffa463e380b75e2e74aff4511df3ef88c\r\nRUN apk add --no-cache \\\r\n    ca-certificates \\\r\n    tzdata \\\r\n    && rm -rf /var/cache/apk/*\r\nRUN addgroup -g 1000 appgroup && \\\r\n    adduser -D -u 1000 -G appgroup appuser\r\nUSER appuser\n'})}),"\n",(0,s.jsx)(n.h2,{id:"docker-compose-for-multi-container-applications",children:"Docker Compose for Multi-container Applications"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Orchestrate complex applications with Docker Compose, manage services, networks, and volumes efficiently."})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'# Complete Docker Compose application\r\nversion: \'3.8\'\r\n\r\nservices:\r\n  web:\r\n    build: \r\n      context: .\r\n      dockerfile: Dockerfile.prod\r\n    ports:\r\n      - "80:8000"\r\n    environment:\r\n      - DATABASE_URL=postgresql://user:password@db:5432/myapp\r\n      - REDIS_URL=redis://redis:6379\r\n    depends_on:\r\n      db:\r\n        condition: service_healthy\r\n    volumes:\r\n      - ./static:/app/static\r\n    networks:\r\n      - frontend\r\n      - backend\r\n    restart: unless-stopped\r\n    deploy:\r\n      replicas: 2\r\n      resources:\r\n        limits:\r\n          memory: 512M\r\n        reservations:\r\n          memory: 256M\r\n\r\n  db:\r\n    image: postgres:15-alpine\r\n    environment:\r\n      POSTGRES_DB: myapp\r\n      POSTGRES_USER: user\r\n      POSTGRES_PASSWORD: password\r\n    volumes:\r\n      - postgres_data:/var/lib/postgresql/data\r\n      - ./init.sql:/docker-entrypoint-initdb.d/init.sql\r\n    networks:\r\n      - backend\r\n    healthcheck:\r\n      test: ["CMD-SHELL", "pg_isready -U user -d myapp"]\r\n      interval: 10s\r\n      timeout: 5s\r\n      retries: 5\r\n    restart: unless-stopped\r\n\r\n  redis:\r\n    image: redis:7-alpine\r\n    command: redis-server --appendonly yes\r\n    volumes:\r\n      - redis_data:/data\r\n    networks:\r\n      - backend\r\n    restart: unless-stopped\r\n\r\n  nginx:\r\n    image: nginx:alpine\r\n    ports:\r\n      - "443:443"\r\n    volumes:\r\n      - ./nginx.conf:/etc/nginx/nginx.conf\r\n      - ./ssl:/etc/nginx/ssl\r\n    depends_on:\r\n      - web\r\n    networks:\r\n      - frontend\r\n    restart: unless-stopped\r\n\r\nnetworks:\r\n  frontend:\r\n    driver: bridge\r\n  backend:\r\n    driver: bridge\r\n    internal: true\r\n\r\nvolumes:\r\n  postgres_data:\r\n  redis_data:\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Docker Compose commands\r\ndocker-compose up -d  # Start services in background\r\ndocker-compose up --build  # Rebuild and start\r\ndocker-compose down --volumes  # Stop and remove everything\r\ndocker-compose logs -f web  # Follow service logs\r\n\r\n# Service management\r\ndocker-compose ps  # List services\r\ndocker-compose scale web=3  # Scale service\r\ndocker-compose exec web bash  # Execute in service\r\ndocker-compose restart web  # Restart specific service\r\n\r\n# Development workflows\r\ndocker-compose -f docker-compose.yml -f docker-compose.dev.yml up\r\ndocker-compose --profile development up  # Use profiles\r\ndocker-compose run --rm web python manage.py migrate\n"})}),"\n",(0,s.jsx)(n.h2,{id:"networking--storage",children:"Networking & Storage"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Configure advanced networking, manage persistent storage, and handle data between containers and host systems."})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Network management\r\ndocker network create --driver bridge mynetwork\r\ndocker network create --driver overlay --attachable swarm-net\r\ndocker network ls\r\ndocker network inspect mynetwork\r\n\r\n# Container networking\r\ndocker run -d --name app1 --network mynetwork nginx\r\ndocker run -d --name app2 --network mynetwork --link app1 alpine\r\ndocker exec app2 ping app1  # Test connectivity\r\n\r\n# Advanced networking scenarios\r\n# Custom bridge with subnet\r\ndocker network create --driver bridge \\\r\n  --subnet=192.168.1.0/24 \\\r\n  --ip-range=192.168.1.128/25 \\\r\n  --gateway=192.168.1.1 \\\r\n  custom-bridge\r\n\r\n# Host networking (Linux only)\r\ndocker run --network host nginx\r\n\r\n# None network (isolated)\r\ndocker run --network none alpine\r\n\r\n# Volume management\r\ndocker volume create myvolume\r\ndocker volume ls\r\ndocker volume inspect myvolume\r\ndocker volume prune  # Remove unused volumes\r\n\r\n# Volume mounting patterns\r\n# Named volume\r\ndocker run -v myvolume:/data alpine\r\n\r\n# Bind mount\r\ndocker run -v /host/path:/container/path alpine\r\n\r\n# Tmpfs mount (Linux)\r\ndocker run --tmpfs /tmp alpine\r\n\r\n# Backup and restore volumes\r\ndocker run --rm -v myvolume:/data -v $(pwd):/backup alpine \\\r\n  tar czf /backup/backup.tar.gz -C /data .\r\n\r\ndocker run --rm -v myvolume:/data -v $(pwd):/backup alpine \\\r\n  tar xzf /backup/backup.tar.gz -C /data\n"})}),"\n",(0,s.jsx)(n.h2,{id:"security--production-practices",children:"Security & Production Practices"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Implement security best practices, manage secrets, configure resource limits, and prepare for production deployment."})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# Security scanning and analysis\r\ndocker scan myapp:latest  # Vulnerability scanning\r\ndocker run --rm -v /var/run/docker.sock:/var/run/docker.sock \\\r\n  aquasec/trivy image myapp:latest\r\n\r\n# Resource limits and constraints\r\ndocker run -d --name constrained-app \\\r\n  --memory="512m" \\\r\n  --memory-swap="1g" \\\r\n  --cpus="1.5" \\\r\n  --pids-limit="100" \\\r\n  nginx\r\n\r\n# Security contexts and capabilities\r\n# Run as non-root user\r\ndocker run --user 1000:1000 alpine\r\n\r\n# Drop capabilities\r\ndocker run --cap-drop ALL --cap-add NET_BIND_SERVICE nginx\r\n\r\n# Read-only root filesystem\r\ndocker run --read-only --tmpfs /tmp alpine\r\n\r\n# Secrets management\r\n# Docker Swarm secrets\r\necho "mysecretpassword" | docker secret create db_password -\r\ndocker service create --secret db_password myapp\r\n\r\n# Environment file for development\r\necho "DB_PASSWORD=secret123" > .env\r\ndocker run --env-file .env myapp\n'})}),"\n",(0,s.jsx)(n.h3,{id:"production-docker-compose-with-secrets",children:"Production Docker Compose with Secrets"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"# Production-ready compose with secrets\r\nversion: '3.8'\r\n\r\nservices:\r\n  app:\r\n    image: myapp:${VERSION:-latest}\r\n    environment:\r\n      - DB_HOST=db\r\n      - DB_USER=myuser\r\n      - DB_PASSWORD_FILE=/run/secrets/db_password\r\n    secrets:\r\n      - db_password\r\n    deploy:\r\n      replicas: 3\r\n      restart_policy:\r\n        condition: on-failure\r\n        delay: 5s\r\n        max_attempts: 3\r\n        window: 120s\r\n      resources:\r\n        limits:\r\n          memory: 512M\r\n          cpus: '0.5'\r\n        reservations:\r\n          memory: 256M\r\n          cpus: '0.25'\r\n      update_config:\r\n        parallelism: 1\r\n        delay: 10s\r\n        failure_action: rollback\r\n\r\nsecrets:\r\n  db_password:\r\n    external: true\n"})}),"\n",(0,s.jsx)(n.h2,{id:"debugging--troubleshooting",children:"Debugging & Troubleshooting"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Diagnose container issues, inspect system state, analyze logs, and resolve common Docker problems."})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# 32. Container inspection and debugging\r\ndocker exec -it container_name /bin/sh\r\ndocker exec container_name ps aux\r\ndocker exec container_name cat /proc/meminfo\r\ndocker exec container_name ss -tulpn  # Network connections\r\n\r\n# 33. Log analysis and monitoring\r\ndocker logs --details --timestamps container_name\r\ndocker logs --since="2024-01-01T00:00:00" container_name\r\ndocker logs --until="2024-01-01T12:00:00" container_name\r\ndocker logs --tail 50 -f container_name\r\n\r\n# 34. System monitoring and diagnosis\r\ndocker system events --filter container=myapp\r\ndocker stats --format "table {{.Container}}\\t{{.CPUPerc}}\\t{{.MemUsage}}"\r\ndocker system df -v  # Detailed disk usage\r\ndocker info --format \'{{json .}}\'  # Machine-readable info\r\n\r\n# 35. Network debugging\r\n# Install network tools in a debugging container\r\ndocker run -it --rm --net container:webapp nicolaka/netshoot\r\n# Inside the container:\r\n# netstat -tulpn\r\n# ss -tulpn\r\n# dig dns-name\r\n# nslookup service-name\r\n# curl -I http://service:port\r\n\r\n# 36. Health check debugging\r\ndocker run -d --name webapp \\\r\n  --health-cmd="curl -f http://localhost/ || exit 1" \\\r\n  --health-interval=30s \\\r\n  --health-timeout=10s \\\r\n  --health-retries=3 \\\r\n  nginx\r\n\r\ndocker inspect --format=\'{{.State.Health.Status}}\' webapp\n'})}),"\n",(0,s.jsx)(n.h2,{id:"performance--optimization",children:"Performance & Optimization"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Optimize image sizes, improve build performance, manage resources efficiently, and scale applications."})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# 37. Build optimization techniques\r\n# Use BuildKit for advanced caching\r\nexport DOCKER_BUILDKIT=1\r\ndocker build --cache-from myapp:cache .\r\n\r\n# Multi-platform builds\r\ndocker buildx create --use\r\ndocker buildx build --platform linux/amd64,linux/arm64 -t myapp:latest .\r\n\r\n# Cache mount optimization\r\nCOPY requirements.txt .\r\nRUN --mount=type=cache,target=/root/.cache/pip \\\r\n    pip install -r requirements.txt\r\n\r\n# 38. Image size optimization\r\n# Use multi-stage builds\r\nFROM node:18 AS builder\r\nWORKDIR /app\r\nCOPY package*.json ./\r\nRUN npm ci\r\nCOPY . .\r\nRUN npm run build\r\n\r\nFROM nginx:alpine\r\nCOPY --from=builder /app/dist /usr/share/nginx/html\r\n\r\n# Use .dockerignore\r\necho "node_modules\\n.git\\n*.md\\n.env" > .dockerignore\r\n\r\n# 39. Runtime performance optimization\r\n# Limit container resources\r\ndocker update --memory="512m" --cpus="1.0" container_name\r\n\r\n# Configure storage driver\r\ndocker info | grep "Storage Driver"\r\n\r\n# Use tmpfs for temporary data\r\ndocker run --tmpfs /tmp:noexec,nosuid,size=100m myapp\r\n\r\n# 40. Container orchestration preparation\r\n# Docker Swarm setup\r\ndocker swarm init\r\ndocker service create --replicas 3 --name webapp myapp:latest\r\ndocker service scale webapp=5\r\ndocker service update --image myapp:v2 webapp\r\n\r\n# Kubernetes manifest generation\r\ndocker run --rm -v $(pwd):/workspace -w /workspace \\\r\n  k8s.gcr.io/kompose:latest convert -f docker-compose.yml\n'})}),"\n",(0,s.jsx)(n.h2,{id:"advanced-docker-features",children:"Advanced Docker Features"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Leverage advanced Docker capabilities including custom networks, plugin systems, and container orchestration."})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# 41. Advanced networking configurations\r\n# Create custom bridge network with DNS\r\ndocker network create --driver bridge \\\r\n  --subnet=172.20.0.0/16 \\\r\n  --ip-range=172.20.240.0/20 \\\r\n  --dns=8.8.8.8 \\\r\n  custom-network\r\n\r\n# Overlay network for multi-host\r\ndocker network create --driver overlay \\\r\n  --subnet=10.0.0.0/24 \\\r\n  --encrypted \\\r\n  overlay-net\r\n\r\n# 42. Plugin management\r\ndocker plugin ls\r\ndocker plugin install vieux/sshfs\r\ndocker plugin enable vieux/sshfs\r\n\r\n# 43. Docker Content Trust\r\nexport DOCKER_CONTENT_TRUST=1\r\ndocker push myregistry.com/myapp:signed\r\ndocker pull myregistry.com/myapp:signed\r\n\r\n# 44. Advanced Dockerfile patterns\r\n# ARG with build-time variables\r\nARG VERSION=latest\r\nARG BUILDPLATFORM\r\nFROM --platform=$BUILDPLATFORM node:18 AS builder\r\n\r\n# ONBUILD triggers\r\nFROM node:18\r\nONBUILD COPY package*.json ./\r\nONBUILD RUN npm install\r\nONBUILD COPY . .\r\n\r\n# 45. Container lifecycle hooks\r\n# Init system for proper signal handling\r\nFROM alpine\r\nRUN apk add --no-cache tini\r\nENTRYPOINT ["/sbin/tini", "--"]\r\nCMD ["my-app"]\r\n\r\n# 46. Advanced volume configurations\r\n# NFS volume\r\ndocker volume create --driver local \\\r\n  --opt type=nfs \\\r\n  --opt o=addr=192.168.1.100,rw \\\r\n  --opt device=:/exported/path \\\r\n  nfs-volume\r\n\r\n# Encrypted volume\r\ndocker run -it --rm \\\r\n  -v encrypted_vol:/data \\\r\n  --security-opt apparmor:unconfined \\\r\n  myapp\r\n\r\n# 47. Registry operations\r\n# Set up local registry\r\ndocker run -d -p 5000:5000 --restart=always --name registry registry:2\r\n\r\n# Mirror Docker Hub\r\ndocker run -d -p 5000:5000 --restart=always --name registry \\\r\n  -e REGISTRY_PROXY_REMOTEURL=https://registry-1.docker.io \\\r\n  registry:2\r\n\r\n# 48. CI/CD integration patterns\r\n# GitHub Actions example\r\ndocker build -t $IMAGE_NAME:$GITHUB_SHA .\r\ndocker tag $IMAGE_NAME:$GITHUB_SHA $IMAGE_NAME:latest\r\necho $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin\r\ndocker push $IMAGE_NAME:$GITHUB_SHA\r\ndocker push $IMAGE_NAME:latest\r\n\r\n# 49. Monitoring and observability\r\n# Prometheus metrics\r\ndocker run -d --name=prometheus \\\r\n  -p 9090:9090 \\\r\n  -v prometheus.yml:/etc/prometheus/prometheus.yml \\\r\n  prom/prometheus\r\n\r\n# Grafana dashboard\r\ndocker run -d --name=grafana \\\r\n  -p 3000:3000 \\\r\n  -e "GF_SECURITY_ADMIN_PASSWORD=secret" \\\r\n  grafana/grafana\r\n\r\n# 50. Backup and disaster recovery\r\n# Automated backup script\r\n#!/bin/bash\r\nDATE=$(date +%Y%m%d_%H%M%S)\r\ndocker run --rm \\\r\n  -v myapp_data:/data \\\r\n  -v $(pwd)/backups:/backup \\\r\n  alpine tar czf /backup/myapp_backup_$DATE.tar.gz -C /data .\r\n\r\n# Container export/import\r\ndocker export container_name > backup.tar\r\ndocker import backup.tar myapp:restored\n'})}),"\n",(0,s.jsx)(n.h2,{id:"pro-tips--best-practices",children:"Pro Tips & Best Practices"}),"\n",(0,s.jsx)(n.h3,{id:"-performance-tips",children:"\ud83d\ude80 Performance Tips"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Use multi-stage builds"})," to reduce final image size by up to 90%"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Leverage BuildKit"})," for parallel builds and advanced caching strategies"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Pin base images by digest"})," for reproducible builds: ",(0,s.jsx)(n.code,{children:"FROM alpine@sha256:..."})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Use .dockerignore"})," to exclude unnecessary files and speed up build context"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Order Dockerfile instructions"})," from least to most frequently changing for optimal caching"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"-security-best-practices",children:"\ud83d\udd12 Security Best Practices"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Never run containers as root"})," - always create and use non-privileged users"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Scan images regularly"})," with tools like Trivy, Snyk, or Docker Scout"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Use read-only filesystems"})," when possible: ",(0,s.jsx)(n.code,{children:"--read-only"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Drop unnecessary capabilities"}),": ",(0,s.jsx)(n.code,{children:"--cap-drop ALL --cap-add SPECIFIC_CAP"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Keep base images updated"})," and prefer official, minimal distributions"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"-production-deployment",children:"\ud83d\udce6 Production Deployment"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Use specific image tags"})," in production, never ",(0,s.jsx)(n.code,{children:":latest"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Implement health checks"})," for all services to enable proper load balancing"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Set resource limits"})," to prevent containers from consuming all host resources"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Use secrets management"})," for sensitive data, never environment variables"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Configure logging drivers"})," for centralized log collection"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"-development-workflow",children:"\ud83d\udee0 Development Workflow"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Use Docker Compose profiles"})," to manage different environments (dev/test/prod)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Mount source code as volumes"})," during development for hot reloading"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Use override files"})," for environment-specific configurations"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Implement graceful shutdown"})," handling in applications for clean container stops"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Test containers locally"})," before pushing to registries"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"-troubleshooting-quick-fixes",children:"\ud83d\udd27 Troubleshooting Quick Fixes"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Container won't start?"})," Check logs: ",(0,s.jsx)(n.code,{children:"docker logs container_name"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Permission denied?"})," Verify user IDs match between host and container"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Network issues?"})," Use ",(0,s.jsx)(n.code,{children:"nicolaka/netshoot"})," for network debugging"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Out of disk space?"})," Run ",(0,s.jsx)(n.code,{children:"docker system prune -a --volumes"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Port conflicts?"})," Check with ",(0,s.jsx)(n.code,{children:"docker port container_name"})," and ",(0,s.jsx)(n.code,{children:"netstat -tulpn"})]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"-monitoring--maintenance",children:"\ud83d\udcca Monitoring & Maintenance"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Monitor disk usage"})," regularly: ",(0,s.jsx)(n.code,{children:"docker system df"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Set up log rotation"})," to prevent disk space issues"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Use container restart policies"})," for automatic recovery"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Implement backup strategies"})," for persistent volumes"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Keep Docker Engine updated"})," for security patches and new features"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"references",children:"References"}),"\n",(0,s.jsx)(n.h3,{id:"official-documentation",children:"Official Documentation"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://docs.docker.com/",children:"Docker Official Documentation"})," - Comprehensive guides and references"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://docs.docker.com/compose/",children:"Docker Compose Documentation"})," - Multi-container application orchestration"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://docs.docker.com/build/building/best-practices/",children:"Dockerfile Best Practices"})," - Official optimization guidelines"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://docs.docker.com/engine/security/",children:"Docker Security"})," - Security features and best practices"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"essential-tools--extensions",children:"Essential Tools & Extensions"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://www.docker.com/products/docker-desktop/",children:"Docker Desktop"})," - Official development environment"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://docs.docker.com/build/buildkit/",children:"Docker BuildKit"})," - Enhanced build engine with advanced features"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://docs.docker.com/scout/",children:"Docker Scout"})," - Vulnerability scanning and image analysis"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://www.portainer.io/",children:"Portainer"})," - Container management UI"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://containrrr.dev/watchtower/",children:"Watchtower"})," - Automated container updates"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"image-registries",children:"Image Registries"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://hub.docker.com/",children:"Docker Hub"})," - Official public registry"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://aws.amazon.com/ecr/",children:"Amazon ECR"})," - AWS container registry"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://cloud.google.com/container-registry",children:"Google Container Registry"})," - Google Cloud registry"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://azure.microsoft.com/en-us/services/container-registry/",children:"Azure Container Registry"})," - Microsoft Azure registry"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-container-registry",children:"GitHub Container Registry"})," - GitHub's container registry"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"learning-resources",children:"Learning Resources"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://dockerlabs.collabnix.com/",children:"Docker Labs"})," - Hands-on tutorials and workshops"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://labs.play-with-docker.com/",children:"Play with Docker"})," - Browser-based Docker playground"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://docker-curriculum.com/",children:"Docker Curriculum"})," - Beginner-friendly learning path"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://awesome-docker.netlify.app/",children:"Awesome Docker"})," - Curated list of Docker resources"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"community--support",children:"Community & Support"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://www.docker.com/community/",children:"Docker Community"})," - Forums, events, and community resources"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://dockercommunity.slack.com/",children:"Docker Slack"})," - Community chat and support"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://stackoverflow.com/questions/tagged/docker",children:"Stack Overflow"})," - Technical Q&A"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://www.reddit.com/r/docker/",children:"Reddit r/docker"})," - Community discussions and tips"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"books--advanced-learning",children:"Books & Advanced Learning"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:'"Docker Deep Dive" by Nigel Poulton - Comprehensive technical guide'}),"\n",(0,s.jsx)(n.li,{children:'"Docker in Action" by Jeff Nickoloff - Practical implementation strategies'}),"\n",(0,s.jsx)(n.li,{children:'"Kubernetes in Action" by Marko Luk\u0161a - Container orchestration with Kubernetes'}),"\n",(0,s.jsx)(n.li,{children:'"Site Reliability Engineering" by Google - Production system management principles'}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"This guide covers essential Docker operations with 50+ practical examples. Each command is production-tested and follows current best practices. For environment-specific configurations, consult your platform documentation."})})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>t,x:()=>a});var i=r(96540);const s={},o=i.createContext(s);function t(e){const n=i.useContext(o);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:t(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);