"use strict";(globalThis.webpackChunkgl_0_bal_01=globalThis.webpackChunkgl_0_bal_01||[]).push([[2220],{13633:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>d,frontMatter:()=>l,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"cheatsheets/mise-practical-guide","title":"Comprehensive Mise Practical Guide: Command Reference for Developers","description":"Complete practical reference for Mise polyglot runtime manager - installation, tool version management, environment configuration, and task automation across any programming language","source":"@site/docs/cheatsheets/mise.md","sourceDirName":"cheatsheets","slug":"/cheatsheets/mise-practical-guide","permalink":"/cheatsheets/mise-practical-guide","draft":false,"unlisted":false,"editUrl":"https://github.com/gl0bal01/gl0bal01.github.io/tree/main/docs/cheatsheets/mise.md","tags":[{"inline":true,"label":"Tool","permalink":"/tags/tool"},{"inline":true,"label":"DevOps","permalink":"/tags/dev-ops"},{"inline":true,"label":"Development","permalink":"/tags/development"}],"version":"current","lastUpdatedAt":1760374316000,"sidebarPosition":3,"frontMatter":{"id":"mise-practical-guide","title":"Comprehensive Mise Practical Guide: Command Reference for Developers","sidebar_label":"Mise Practical","sidebar_position":3,"description":"Complete practical reference for Mise polyglot runtime manager - installation, tool version management, environment configuration, and task automation across any programming language","keywords":["mise","runtime manager","version manager","asdf alternative","nvm alternative","pyenv alternative","tool management","environment variables","task runner","development tools","polyglot development","devops automation"],"authors":["gl0bal01"],"tags":["Tool","DevOps","Development"]},"sidebar":"tutorialSidebar","previous":{"title":"Exegol Practical","permalink":"/cheatsheets/exegol-practical-guide"},"next":{"title":"Tailscale Practical","permalink":"/cheatsheets/tailscale-practical-guide"}}');var i=r(74848),t=r(28453);const l={id:"mise-practical-guide",title:"Comprehensive Mise Practical Guide: Command Reference for Developers",sidebar_label:"Mise Practical",sidebar_position:3,description:"Complete practical reference for Mise polyglot runtime manager - installation, tool version management, environment configuration, and task automation across any programming language",keywords:["mise","runtime manager","version manager","asdf alternative","nvm alternative","pyenv alternative","tool management","environment variables","task runner","development tools","polyglot development","devops automation"],authors:["gl0bal01"],tags:["Tool","DevOps","Development"]},a="Mise Practical Guide",o={},c=[{value:"Installation &amp; Setup",id:"installation--setup",level:2},{value:"Quick Installation (Recommended)",id:"quick-installation-recommended",level:3},{value:"Platform-Specific Installation",id:"platform-specific-installation",level:3},{value:"Shell Activation",id:"shell-activation",level:3},{value:"Shell Completion",id:"shell-completion",level:3},{value:"First Time Usage",id:"first-time-usage",level:2},{value:"Tool Management",id:"tool-management",level:2},{value:"Installing Tools",id:"installing-tools",level:3},{value:"Version Management",id:"version-management",level:3},{value:"Backend-Specific Tools",id:"backend-specific-tools",level:3},{value:"Configuration",id:"configuration",level:2},{value:"Global Configuration",id:"global-configuration",level:3},{value:"Project Configuration",id:"project-configuration",level:3},{value:"Example mise.toml",id:"example-misetoml",level:3},{value:"Environment Variables",id:"environment-variables",level:2},{value:"Basic Environment Management",id:"basic-environment-management",level:3},{value:".env File Support",id:"env-file-support",level:3},{value:"Environment-Specific Configs",id:"environment-specific-configs",level:3},{value:"Task Runner",id:"task-runner",level:2},{value:"Defining Tasks",id:"defining-tasks",level:3},{value:"Running Tasks",id:"running-tasks",level:3},{value:"Advanced Task Features",id:"advanced-task-features",level:3},{value:"Shims",id:"shims",level:2},{value:"Using Shims",id:"using-shims",level:3},{value:"Advanced Usage",id:"advanced-usage",level:2},{value:"Trust System",id:"trust-system",level:3},{value:"Multiple Tool Versions",id:"multiple-tool-versions",level:3},{value:"Path Management",id:"path-management",level:3},{value:"Hook System",id:"hook-system",level:3},{value:"Watch Mode",id:"watch-mode",level:3},{value:"Cache Management",id:"cache-management",level:3},{value:"Plugin Management",id:"plugin-management",level:3},{value:"Idiomatic Version Files",id:"idiomatic-version-files",level:3},{value:"Migration Guides",id:"migration-guides",level:2},{value:"From asdf",id:"from-asdf",level:3},{value:"From nvm",id:"from-nvm",level:3},{value:"From pyenv",id:"from-pyenv",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Common Issues",id:"common-issues",level:3},{value:"Performance Optimization",id:"performance-optimization",level:3},{value:"Environment Issues",id:"environment-issues",level:3},{value:"Common Use Cases",id:"common-use-cases",level:2},{value:"Web Development",id:"web-development",level:3},{value:"Python Data Science",id:"python-data-science",level:3},{value:"DevOps &amp; Infrastructure",id:"devops--infrastructure",level:3},{value:"Monorepo Setup",id:"monorepo-setup",level:3},{value:"CI/CD Integration",id:"cicd-integration",level:3},{value:"Pro Tips",id:"pro-tips",level:2},{value:"Productivity Shortcuts",id:"productivity-shortcuts",level:3},{value:"Team Collaboration",id:"team-collaboration",level:3},{value:"Custom Tool Backends",id:"custom-tool-backends",level:3},{value:"Performance Monitoring",id:"performance-monitoring",level:3},{value:"Directory-Specific Configs",id:"directory-specific-configs",level:3},{value:"Resources",id:"resources",level:2},{value:"Cheat Sheet Summary",id:"cheat-sheet-summary",level:2}];function m(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components},{Details:r}=n;return r||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"mise-practical-guide",children:"Mise Practical Guide"})}),"\n",(0,i.jsx)(n.p,{children:'Mise (pronounced "MEEZ ahn plahs") is a polyglot runtime manager and task runner that replaces tools like asdf, nvm, pyenv, direnv, and make. It provides unified tool version management, environment variable control, and task execution across any programming language or development tool. This guide serves as a quick reference for both beginners and experienced developers who need to quickly set up, configure, and use mise for various development workflows.'}),"\n",(0,i.jsxs)(r,{children:[(0,i.jsx)("summary",{children:"When to use this guide"}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Setting up mise for the first time"}),"\n",(0,i.jsx)(n.li,{children:"Managing multiple versions of development tools"}),"\n",(0,i.jsx)(n.li,{children:"Configuring project-specific environments"}),"\n",(0,i.jsx)(n.li,{children:"Creating automated development workflows"}),"\n",(0,i.jsx)(n.li,{children:"Troubleshooting common issues"}),"\n",(0,i.jsx)(n.li,{children:"Migrating from asdf, nvm, or other version managers"}),"\n"]})]}),"\n",(0,i.jsxs)(r,{children:[(0,i.jsx)("summary",{children:"Who this guide is for"}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Software developers and DevOps engineers"}),"\n",(0,i.jsx)(n.li,{children:"Full-stack developers managing multiple language runtimes"}),"\n",(0,i.jsx)(n.li,{children:"Teams standardizing development environments"}),"\n",(0,i.jsx)(n.li,{children:"Open source contributors working on diverse projects"}),"\n",(0,i.jsx)(n.li,{children:"Anyone needing consistent, reproducible development setups"}),"\n"]})]}),"\n",(0,i.jsx)(n.h2,{id:"installation--setup",children:"Installation & Setup"}),"\n",(0,i.jsx)(n.h3,{id:"quick-installation-recommended",children:"Quick Installation (Recommended)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Universal install script (Linux/macOS)\r\ncurl https://mise.run | sh\r\n\r\n# Verify installation\r\n~/.local/bin/mise --version\n"})}),"\n",(0,i.jsx)(n.h3,{id:"platform-specific-installation",children:"Platform-Specific Installation"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# macOS with Homebrew\r\nbrew install mise\r\n\r\n# Debian/Ubuntu\r\nsudo apt update -y && sudo apt install -y gpg wget curl\r\nsudo install -dm 755 /etc/apt/keyrings\r\nwget -qO - https://mise.jdx.dev/gpg-key.pub | gpg --dearmor | sudo tee /etc/apt/keyrings/mise-archive-keyring.gpg 1> /dev/null\r\necho "deb [signed-by=/etc/apt/keyrings/mise-archive-keyring.gpg arch=amd64] https://mise.jdx.dev/deb stable main" | sudo tee /etc/apt/sources.list.d/mise.list\r\nsudo apt update\r\nsudo apt install -y mise\r\n\r\n# Fedora/RHEL/CentOS\r\nyum install -y yum-utils\r\nyum-config-manager --add-repo https://mise.jdx.dev/rpm/mise.repo\r\nyum install -y mise\r\n\r\n# openSUSE\r\nsudo wget https://mise.jdx.dev/rpm/mise.repo -O /etc/zypp/repos.d/mise.repo\r\nsudo zypper refresh\r\nsudo zypper install mise\r\n\r\n# Arch Linux (AUR)\r\nyay -S mise\r\n\r\n# Windows with Scoop (Recommended)\r\nscoop install mise\r\n\r\n# Windows with winget\r\nwinget install jdx.mise\r\n\r\n# Windows with Chocolatey\r\nchoco install mise\r\n\r\n# Via npm (cross-platform)\r\nnpm install -g @jdxcode/mise\r\n\r\n# From source with Cargo\r\ncargo install mise\r\n\r\n# Direct binary download\r\ncurl -L https://github.com/jdx/mise/releases/download/v2024.12.0/mise-v2024.12.0-linux-x64 > /usr/local/bin/mise\r\nchmod +x /usr/local/bin/mise\n'})}),"\n",(0,i.jsx)(n.h3,{id:"shell-activation",children:"Shell Activation"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Bash\r\necho 'eval \"$(mise activate bash)\"' >> ~/.bashrc\r\nsource ~/.bashrc\r\n\r\n# Zsh\r\necho 'eval \"$(mise activate zsh)\"' >> ~/.zshrc\r\nsource ~/.zshrc\r\n\r\n# Fish\r\necho 'mise activate fish | source' >> ~/.config/fish/config.fish\r\n\r\n# PowerShell (Windows)\r\necho 'mise activate pwsh | Out-String | Invoke-Expression' >> $HOME\\Documents\\PowerShell\\Microsoft.PowerShell_profile.ps1\r\n\r\n# Elvish\r\neval (mise activate elvish | slurp)\r\n\r\n# Nushell\r\n# Append to env.nu\r\nmkdir ~/.config/nushell\r\nmise activate nu | save -f ~/.config/nushell/mise.nu\r\necho \"source ~/.config/nushell/mise.nu\" | save --append ~/.config/nushell/env.nu\n"})}),"\n",(0,i.jsx)(n.h3,{id:"shell-completion",children:"Shell Completion"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Bash\r\nmise completion bash > /etc/bash_completion.d/mise\r\n\r\n# Zsh\r\nmise completion zsh > /usr/local/share/zsh/site-functions/_mise\r\n\r\n# Fish\r\nmise completion fish > ~/.config/fish/completions/mise.fish\r\n\r\n# PowerShell\r\nmise completion pwsh >> $PROFILE\n"})}),"\n",(0,i.jsx)(n.h2,{id:"first-time-usage",children:"First Time Usage"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Check mise version and configuration\r\nmise version\r\nmise doctor\r\n\r\n# View available tools\r\nmise registry\r\n\r\n# Install your first tool (Node.js)\r\nmise use --global node@22\r\n\r\n# Verify installation\r\nnode --version\r\nwhich node\r\n\r\n# List installed tools\r\nmise list\r\n\r\n# Show current environment\r\nmise env\r\n\r\n# View configuration\r\nmise config\r\nmise cfg\n"})}),"\n",(0,i.jsx)(n.h2,{id:"tool-management",children:"Tool Management"}),"\n",(0,i.jsx)(n.h3,{id:"installing-tools",children:"Installing Tools"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Install latest version\r\nmise use --global node@latest\r\nmise use --global python@latest\r\n\r\n# Install specific version\r\nmise use --global node@20.11.0\r\nmise use --global python@3.12.1\r\n\r\n# Install multiple versions\r\nmise use --global python@3.11 python@3.12\r\n\r\n# Install LTS version\r\nmise use --global node@lts\r\n\r\n# Install from version prefix\r\nmise use --global node@20\r\nmise use --global python@3.12\r\n\r\n# Project-local installation\r\ncd myproject\r\nmise use node@22\r\nmise use python@3.11\r\n\r\n# Install without activating\r\nmise install node@20\r\nmise install python@3.12\r\n\r\n# Install all tools from mise.toml\r\nmise install\r\n\r\n# Install specific tool\r\nmise install node\r\n\r\n# Install and pin version\r\nmise pin node@20.11.0\n"})}),"\n",(0,i.jsx)(n.h3,{id:"version-management",children:"Version Management"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# List available versions for a tool\r\nmise ls-remote node\r\nmise ls-remote python\r\nmise ls-remote terraform\r\n\r\n# List installed versions\r\nmise ls\r\nmise list --current\r\nmise list --installed\r\n\r\n# Show latest version\r\nmise latest node\r\nmise latest python@3.12\r\n\r\n# Use different version per directory\r\ncd project1\r\nmise use node@20\r\n\r\ncd ../project2\r\nmise use node@22\r\n\r\n# Set global default\r\nmise use --global node@lts\r\n\r\n# Remove tool version\r\nmise uninstall node@20.0.0\r\nmise uninstall python@3.11.0\r\n\r\n# Remove all versions of a tool\r\nmise uninstall node --all\r\n\r\n# Upgrade tools\r\nmise upgrade\r\nmise upgrade node\r\nmise upgrade --bump\n"})}),"\n",(0,i.jsx)(n.h3,{id:"backend-specific-tools",children:"Backend-Specific Tools"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Install from npm\r\nmise use --global npm:@anthropic-ai/claude-code\r\nmise use npm:typescript\r\nmise use npm:eslint\r\n\r\n# Install from pipx\r\nmise use --global pipx:black\r\nmise use pipx:pytest\r\nmise use pipx:ansible\r\n\r\n# Install from cargo\r\nmise use cargo:ripgrep\r\nmise use cargo:fd-find\r\nmise use cargo:bat\r\n\r\n# Install from GitHub releases\r\nmise use github:BurntSushi/ripgrep\r\nmise use github:sharkdp/fd\r\nmise use github:casey/just\r\n\r\n# Install from Aqua\r\nmise use aqua:cli/cli\r\nmise use aqua:junegunn/fzf\r\n\r\n# Install from SPM (Swift Package Manager)\r\nmise use spm:apple/swift-argument-parser\r\n\r\n# Install via Go install\r\nmise use go:github.com/charmbracelet/glow@latest\n"})}),"\n",(0,i.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,i.jsx)(n.h3,{id:"global-configuration",children:"Global Configuration"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Edit global config\r\nmise config edit\r\nmise cfg edit\r\n\r\n# View global config\r\nmise config get\r\nmise cfg\r\n\r\n# Set global settings\r\nmise settings set always_keep_download true\r\nmise settings set always_keep_install false\r\nmise settings set experimental true\r\n\r\n# View all settings\r\nmise settings\r\n\r\n# Location: ~/.config/mise/config.toml\n"})}),"\n",(0,i.jsx)(n.h3,{id:"project-configuration",children:"Project Configuration"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Create project config\r\ncd myproject\r\nmise use node@22 python@3.12\r\n\r\n# Edit project config\r\nmise config edit --path .\r\n\r\n# View current directory config\r\nmise cfg\r\n\r\n# Multiple config file names supported:\r\n# - mise.toml\r\n# - .mise.toml\r\n# - mise.local.toml (gitignored by default)\r\n# - .mise/config.toml\r\n# - .config/mise.toml\r\n# - .config/mise/config.toml\n"})}),"\n",(0,i.jsx)(n.h3,{id:"example-misetoml",children:"Example mise.toml"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-toml",children:'# Development tools\r\n[tools]\r\nnode = "22"\r\npython = "3.12"\r\nterraform = "1.6"\r\ngo = "1.21"\r\nkubectl = "latest"\r\nhelm = "3"\r\n\r\n# Environment variables\r\n[env]\r\nDATABASE_URL = "postgresql://localhost:5432/dev"\r\nAPI_KEY = "dev-key-123"\r\nLOG_LEVEL = "debug"\r\nNODE_ENV = "development"\r\n\r\n# Project tasks\r\n[tasks.dev]\r\ndescription = "Start development server"\r\nrun = "npm run dev"\r\n\r\n[tasks.test]\r\ndescription = "Run tests"\r\nrun = "npm test"\r\n\r\n[tasks.build]\r\ndescription = "Build project"\r\ndepends = ["test"]\r\nrun = "npm run build"\r\n\r\n[tasks.deploy]\r\ndescription = "Deploy to production"\r\ndepends = ["build"]\r\nrun = "./scripts/deploy.sh"\r\n\r\n# Custom settings\r\n[settings]\r\nexperimental = true\r\nverbose = false\n'})}),"\n",(0,i.jsx)(n.h2,{id:"environment-variables",children:"Environment Variables"}),"\n",(0,i.jsx)(n.h3,{id:"basic-environment-management",children:"Basic Environment Management"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Set environment variables in config\r\nmise set NODE_ENV=development\r\nmise set API_KEY=secret123\r\n\r\n# View environment\r\nmise env\r\nmise env --shell bash\r\nmise env --json\r\n\r\n# Export for use in scripts\r\neval "$(mise env)"\r\n\r\n# Execute command with mise environment\r\nmise exec -- node app.js\r\nmise x -- python script.py\r\nmise exec npm:tsx -- tsx app.ts\r\n\r\n# Alias for exec (save keystrokes)\r\nalias x="mise x --"\r\nx node app.js\n'})}),"\n",(0,i.jsx)(n.h3,{id:"env-file-support",children:".env File Support"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Load .env file automatically\r\n# In mise.toml:\r\n[env]\r\n_.file = ".env"\r\n\r\n# Or via environment variable\r\nexport MISE_ENV_FILE=.env\r\n\r\n# Or set path in settings\r\nmise settings set env_file .env\n'})}),"\n",(0,i.jsx)(n.h3,{id:"environment-specific-configs",children:"Environment-Specific Configs"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Create environment configs\r\ntouch mise.development.toml\r\ntouch mise.production.toml\r\ntouch mise.test.toml\r\n\r\n# Activate specific environment\r\nexport MISE_ENV=development\r\nmise env\r\n\r\nexport MISE_ENV=production\r\nmise env\r\n\r\n# Example environment config\r\n# mise.production.toml\r\n[env]\r\nNODE_ENV = "production"\r\nLOG_LEVEL = "error"\r\nDATABASE_URL = "postgresql://prod-server:5432/app"\n'})}),"\n",(0,i.jsx)(n.h2,{id:"task-runner",children:"Task Runner"}),"\n",(0,i.jsx)(n.h3,{id:"defining-tasks",children:"Defining Tasks"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Simple task\r\n[tasks.hello]\r\nrun = "echo \'Hello, World!\'"\r\n\r\n# Task with description\r\n[tasks.build]\r\ndescription = "Build the application"\r\nrun = "npm run build"\r\n\r\n# Multi-line script\r\n[tasks.deploy]\r\ndescription = "Deploy application"\r\nrun = """\r\n#!/bin/bash\r\nset -e\r\nnpm run build\r\nnpm run test\r\n./deploy.sh\r\n"""\r\n\r\n# Task with dependencies\r\n[tasks.deploy]\r\ndepends = ["test", "build"]\r\nrun = "./deploy.sh"\r\n\r\n# Task with environment variables\r\n[tasks.test]\r\nenv = { NODE_ENV = "test" }\r\nrun = "npm test"\r\n\r\n# Task with custom working directory\r\n[tasks.docs]\r\ndir = "./documentation"\r\nrun = "mkdocs build"\n'})}),"\n",(0,i.jsx)(n.h3,{id:"running-tasks",children:"Running Tasks"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Run a task\r\nmise run build\r\nmise r build\r\n\r\n# List available tasks\r\nmise tasks\r\nmise tasks --extended\r\nmise tasks --json\r\n\r\n# Run task with arguments\r\nmise run test -- --coverage\r\nmise r deploy -- --env production\r\n\r\n# Run multiple tasks\r\nmise run clean build test\r\n\r\n# Run with verbose output\r\nmise run -v build\r\nmise run --log-level debug test\r\n\r\n# Background task execution\r\nmise run -b server\r\n\r\n# Watch for file changes and re-run\r\nmise watch build\r\nmise watch --glob "src/**/*.ts" build\n'})}),"\n",(0,i.jsx)(n.h3,{id:"advanced-task-features",children:"Advanced Task Features"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Task with file dependencies\r\n[tasks.build]\r\nsources = ["src/**/*.ts"]\r\noutputs = ["dist/**/*"]\r\nrun = "tsc"\r\n\r\n# Parallel task execution\r\n[tasks.all]\r\ndepends = ["build:client", "build:server", "build:docs"]\r\nparallel = true\r\n\r\n# Task aliases\r\n[tasks.b]\r\nalias = "build"\r\n\r\n# Task includes from other files\r\n[tasks]\r\n_.includes = ["tasks/*.toml"]\r\n\r\n# Task with custom shell\r\n[tasks.script]\r\nshell = "bash -c"\r\nrun = "complex bash script"\r\n\r\n# Task with tool-specific versions\r\n[tasks.node-build]\r\ntools = ["node@20", "npm@10"]\r\nrun = "npm run build"\n'})}),"\n",(0,i.jsx)(n.h2,{id:"shims",children:"Shims"}),"\n",(0,i.jsx)(n.h3,{id:"using-shims",children:"Using Shims"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Setup shims directory\r\nmise settings set shims_dir ~/.local/share/mise/shims\r\n\r\n# Add shims to PATH manually (if not using activation)\r\nexport PATH="$HOME/.local/share/mise/shims:$PATH"\r\n\r\n# Reshim after installing new tools\r\nmise reshim\r\n\r\n# List shims\r\nls ~/.local/share/mise/shims\r\n\r\n# Remove shim\r\nrm ~/.local/share/mise/shims/node\r\n\r\n# Note: Shims are symlinks to mise binary\r\n# They work without shell activation\r\n# Good for: CI/CD, IDEs, non-interactive shells\r\n# Limitation: Don\'t support all features of mise activate\n'})}),"\n",(0,i.jsx)(n.h2,{id:"advanced-usage",children:"Advanced Usage"}),"\n",(0,i.jsx)(n.h3,{id:"trust-system",children:"Trust System"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Trust a directory (allow config execution)\r\nmise trust\r\n\r\n# Trust specific file\r\nmise trust ~/projects/myapp/mise.toml\r\n\r\n# List trusted configs\r\nmise trust --list\r\n\r\n# Untrust a directory\r\nmise trust --untrust\r\n\r\n# Auto-trust directories\r\nmise settings set trusted_config_paths ~/.config/mise:~/projects\n"})}),"\n",(0,i.jsx)(n.h3,{id:"multiple-tool-versions",children:"Multiple Tool Versions"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Specify multiple versions in project\r\nmise use python@3.11 python@3.12\r\nmise use node@20 node@22\r\n\r\n# Set default version\r\nmise use python@3.12 --pin\r\n\r\n# List all installed versions\r\nmise ls\r\n\r\n# Use version for single command\r\nmise x node@20 -- node app.js\r\nmise exec python@3.11 -- python script.py\n"})}),"\n",(0,i.jsx)(n.h3,{id:"path-management",children:"Path Management"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Add custom paths to mise.toml\r\n[env]\r\n_.path = [\r\n  "./node_modules/.bin",\r\n  "./bin"\r\n]\r\n\r\n# Prepend to PATH\r\nPATH = ["./custom-bin", "$PATH"]\r\n\r\n# View computed PATH\r\nmise env | grep PATH\n'})}),"\n",(0,i.jsx)(n.h3,{id:"hook-system",children:"Hook System"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Pre-install hook\r\n[hooks]\r\npre_install = "echo \'Installing...\'"\r\n\r\n# Post-install hook\r\npost_install = "echo \'Installation complete\'"\r\n\r\n# Enter directory hook\r\nenter = "./scripts/on-enter.sh"\r\n\r\n# Exit directory hook\r\nleave = "./scripts/on-leave.sh"\n'})}),"\n",(0,i.jsx)(n.h3,{id:"watch-mode",children:"Watch Mode"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Watch files and run tasks\r\nmise watch test\r\nmise w test\r\n\r\n# Watch specific patterns\r\nmise watch --glob "**/*.ts" build\r\nmise watch -g "src/**/*.py" test\r\n\r\n# Exclude patterns\r\nmise watch --glob "!**/*.test.ts" build\r\n\r\n# Multiple globs\r\nmise watch -g "src/**/*.ts" -g "!**/*.test.ts" build\r\n\r\n# Clear screen on change\r\nmise watch -c build\n'})}),"\n",(0,i.jsx)(n.h3,{id:"cache-management",children:"Cache Management"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Clear cache\r\nmise cache clear\r\n\r\n# Show cache location\r\nmise cache show\r\n\r\n# Disable cache\r\nmise settings set cache_enabled false\r\n\r\n# Cache specific settings\r\nmise settings set cache_prune_age "30d"\n'})}),"\n",(0,i.jsx)(n.h3,{id:"plugin-management",children:"Plugin Management"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# List plugins\r\nmise plugins ls\r\nmise plugins list\r\n\r\n# Install plugin\r\nmise plugins install nodejs\r\nmise plugins install python\r\n\r\n# Update plugins\r\nmise plugins update\r\nmise plugins update nodejs\r\n\r\n# Remove plugin\r\nmise plugins uninstall nodejs\r\n\r\n# Link local plugin for development\r\nmise plugins link my-plugin ~/projects/mise-my-plugin\n"})}),"\n",(0,i.jsx)(n.h3,{id:"idiomatic-version-files",children:"Idiomatic Version Files"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Enable support for .nvmrc, .node-version, etc.\r\nmise settings set idiomatic_version_file_enable_tools node,python,ruby\r\n\r\n# Disable idiomatic version files\r\nmise settings set idiomatic_version_file false\r\n\r\n# Supported files:\r\n# - .node-version, .nvmrc (Node.js)\r\n# - .python-version (Python)\r\n# - .ruby-version (Ruby)\r\n# - .terraform-version (Terraform)\r\n# - .java-version (Java)\r\n# - go.mod (Go)\n"})}),"\n",(0,i.jsx)(n.h2,{id:"migration-guides",children:"Migration Guides"}),"\n",(0,i.jsx)(n.h3,{id:"from-asdf",children:"From asdf"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Migrate config automatically\r\nmise migrate\r\n\r\n# Manual migration\r\n# .tool-versions \u2192 mise.toml conversion\r\nasdf current > .tool-versions\r\nmise use --path .\r\n\r\n# Import existing installations\r\nmise install\r\n\r\n# Compare environments\r\nasdf current\r\nmise ls --current\n"})}),"\n",(0,i.jsx)(n.h3,{id:"from-nvm",children:"From nvm"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Convert .nvmrc to mise\r\nmise use node@$(cat .nvmrc)\r\n\r\n# Or enable idiomatic version file support\r\nmise settings set idiomatic_version_file_enable_tools node\r\n\r\n# Migrate global default\r\nnvm current\r\nmise use --global node@$(nvm current)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"from-pyenv",children:"From pyenv"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Enable .python-version support\r\nmise settings set idiomatic_version_file_enable_tools python\r\n\r\n# Or convert explicitly\r\nmise use python@$(cat .python-version)\r\n\r\n# Migrate global version\r\nmise use --global python@$(pyenv global)\n"})}),"\n",(0,i.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,i.jsx)(n.h3,{id:"common-issues",children:"Common Issues"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Debug information\r\nmise doctor\r\nmise doctor --json\r\n\r\n# Verbose output\r\nmise --verbose install node\r\nmise -vv ls\r\nmise --log-level trace install\r\n\r\n# Check configuration loading\r\nmise cfg show\r\nmise config show\r\n\r\n# Verify tool installation\r\nmise which node\r\nmise which python\r\n\r\n# View mise environment\r\nmise env\r\n\r\n# Reset mise\r\nrm -rf ~/.local/share/mise\r\nrm -rf ~/.config/mise/cache\r\nmise install\n"})}),"\n",(0,i.jsx)(n.h3,{id:"performance-optimization",children:"Performance Optimization"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Disable features for faster startup\r\nmise settings set experimental true\r\nmise settings set jobs 8\r\nmise settings set raw true\r\n\r\n# Skip rehashing\r\nmise settings set legacy_version_file false\r\n\r\n# Reduce plugin updates\r\nmise settings set plugin_autoupdate_interval "7d"\n'})}),"\n",(0,i.jsx)(n.h3,{id:"environment-issues",children:"Environment Issues"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Tool not found\r\nmise which node  # Should show path\r\nmise doctor      # Check for issues\r\nmise ls          # Verify installation\r\n\r\n# Path issues\r\necho $PATH                    # Check PATH\r\nmise env | grep PATH          # Check mise PATH\r\neval "$(mise activate bash)"  # Re-activate shell\r\n\r\n# Config not loading\r\nmise cfg                      # View current config\r\nmise config ls                # List all configs\r\nmise trust                    # Trust if needed\n'})}),"\n",(0,i.jsx)(n.h2,{id:"common-use-cases",children:"Common Use Cases"}),"\n",(0,i.jsx)(n.h3,{id:"web-development",children:"Web Development"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Full-stack JavaScript project\r\ncd my-webapp\r\nmise use node@22 npm@10 pnpm@8\r\n\r\n# mise.toml\r\n[tools]\r\nnode = "22"\r\npnpm = "8"\r\n\r\n[env]\r\nNODE_ENV = "development"\r\nPORT = "3000"\r\n\r\n[tasks.dev]\r\nrun = "pnpm dev"\r\n\r\n[tasks.build]\r\nrun = "pnpm build"\r\n\r\n[tasks.preview]\r\ndepends = ["build"]\r\nrun = "pnpm preview"\n'})}),"\n",(0,i.jsx)(n.h3,{id:"python-data-science",children:"Python Data Science"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Data science environment\r\nmise use python@3.12 pipx:jupyter pipx:pandas\r\n\r\n# mise.toml\r\n[tools]\r\npython = "3.12"\r\n"pipx:jupyter" = "latest"\r\n"pipx:pandas" = "latest"\r\n\r\n[env]\r\nJUPYTER_CONFIG_DIR = ".jupyter"\r\n\r\n[tasks.notebook]\r\nrun = "jupyter notebook"\r\n\r\n[tasks.lab]\r\nrun = "jupyter lab"\n'})}),"\n",(0,i.jsx)(n.h3,{id:"devops--infrastructure",children:"DevOps & Infrastructure"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Infrastructure tooling\r\nmise use terraform@1.6 kubectl@1.28 helm@3 aws-cli@2\r\n\r\n# mise.toml\r\n[tools]\r\nterraform = "1.6"\r\nkubectl = "1.28"\r\nhelm = "3"\r\naws-cli = "2"\r\n\r\n[env]\r\nAWS_REGION = "us-west-2"\r\nKUBECONFIG = "./kubeconfig"\r\n\r\n[tasks.plan]\r\nrun = "terraform plan"\r\n\r\n[tasks.apply]\r\ndepends = ["plan"]\r\nrun = "terraform apply"\r\n\r\n[tasks.k8s-deploy]\r\nrun = "kubectl apply -f manifests/"\n'})}),"\n",(0,i.jsx)(n.h3,{id:"monorepo-setup",children:"Monorepo Setup"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Root mise.toml\r\n[tools]\r\nnode = "22"\r\npnpm = "8"\r\n\r\n# apps/frontend/mise.toml\r\n[tools]\r\nnode = "22"\r\n"npm:vite" = "5"\r\n\r\n[tasks.dev]\r\nrun = "pnpm dev"\r\n\r\n# apps/backend/mise.toml\r\n[tools]\r\nnode = "20"  # Different version for backend\r\n\r\n[tasks.dev]\r\nrun = "pnpm start:dev"\n'})}),"\n",(0,i.jsx)(n.h3,{id:"cicd-integration",children:"CI/CD Integration"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# GitHub Actions\r\n# .github/workflows/ci.yml\r\nname: CI\r\non: [push]\r\njobs:\r\n  build:\r\n    runs-on: ubuntu-latest\r\n    steps:\r\n      - uses: actions/checkout@v4\r\n      - uses: jdx/mise-action@v2\r\n      - run: mise install\r\n      - run: mise run build\r\n      - run: mise run test\r\n\r\n# GitLab CI\r\n# .gitlab-ci.yml\r\nbefore_script:\r\n  - curl https://mise.run | sh\r\n  - export PATH="$HOME/.local/bin:$PATH"\r\n  - mise install\r\n\r\nbuild:\r\n  script:\r\n    - mise run build\r\n\r\ntest:\r\n  script:\r\n    - mise run test\n'})}),"\n",(0,i.jsx)(n.h2,{id:"pro-tips",children:"Pro Tips"}),"\n",(0,i.jsx)(n.h3,{id:"productivity-shortcuts",children:"Productivity Shortcuts"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Alias for common commands\r\nalias m="mise"\r\nalias mr="mise run"\r\nalias mx="mise exec"\r\nalias mi="mise install"\r\nalias mu="mise use"\r\n\r\n# Quick task execution\r\nalias x="mise x --"\r\nx node app.js\r\nx python script.py\r\n\r\n# Project switcher with auto-activation\r\nfunction cdp() {\r\n  cd ~/projects/$1 && mise activate\r\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"team-collaboration",children:"Team Collaboration"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Commit mise.toml to version control\r\ngit add mise.toml\r\ngit commit -m "Add mise configuration"\r\n\r\n# Add .mise.local.toml to .gitignore for personal overrides\r\necho "mise.local.toml" >> .gitignore\r\n\r\n# Document mise usage in README\r\necho "## Development Setup" >> README.md\r\necho "1. Install mise: https://mise.jdx.dev" >> README.md\r\necho "2. Run: mise install" >> README.md\r\necho "3. Start dev server: mise run dev" >> README.md\n'})}),"\n",(0,i.jsx)(n.h3,{id:"custom-tool-backends",children:"Custom Tool Backends"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Create custom backend plugin\r\nmkdir -p ~/.local/share/mise/plugins/my-tool\r\ncd ~/.local/share/mise/plugins/my-tool\r\n\r\n# Create bin/list-all script\r\ncat > bin/list-all << 'EOF'\r\n#!/usr/bin/env bash\r\ncurl -s https://api.github.com/repos/user/tool/releases | \r\n  grep tag_name | \r\n  sed 's/.*\"v\\(.*\\)\".*/\\1/'\r\nEOF\r\nchmod +x bin/list-all\r\n\r\n# Create bin/install script\r\ncat > bin/install << 'EOF'\r\n#!/usr/bin/env bash\r\nversion=$1\r\ninstall_path=$2\r\n# Download and install logic\r\nEOF\r\nchmod +x bin/install\r\n\r\n# Use custom backend\r\nmise use my-tool@1.0.0\n"})}),"\n",(0,i.jsx)(n.h3,{id:"performance-monitoring",children:"Performance Monitoring"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Time mise operations\r\ntime mise install\r\ntime mise activate bash\r\n\r\n# Profile mise startup\r\nmise --log-level trace activate bash 2>&1 | grep -E "took|duration"\r\n\r\n# Check cache hits\r\nmise cache show\n'})}),"\n",(0,i.jsx)(n.h3,{id:"directory-specific-configs",children:"Directory-Specific Configs"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Work projects use stable versions\r\n~/work/mise.toml:\r\n[tools]\r\nnode = "20"  # LTS\r\npython = "3.11"\r\n\r\n# Personal projects use latest\r\n~/personal/mise.toml:\r\n[tools]\r\nnode = "22"  # Latest\r\npython = "3.12"\r\n\r\n# Cascade behavior:\r\n# ~/personal/project/mise.toml overrides ~/personal/mise.toml\r\n# which overrides ~/.config/mise/config.toml\n'})}),"\n",(0,i.jsx)(n.h2,{id:"resources",children:"Resources"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Official Documentation"}),": ",(0,i.jsx)(n.a,{href:"https://mise.jdx.dev",children:"https://mise.jdx.dev"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"GitHub Repository"}),": ",(0,i.jsx)(n.a,{href:"https://github.com/jdx/mise",children:"https://github.com/jdx/mise"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Tool Registry"}),": ",(0,i.jsx)(n.a,{href:"https://mise.jdx.dev/registry.html",children:"https://mise.jdx.dev/registry.html"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"GitHub Discussions"}),": ",(0,i.jsx)(n.a,{href:"https://github.com/jdx/mise/discussions",children:"https://github.com/jdx/mise/discussions"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Discord Community"}),": ",(0,i.jsx)(n.a,{href:"https://discord.gg/mise",children:"https://discord.gg/mise"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Comparison with asdf"}),": ",(0,i.jsx)(n.a,{href:"https://mise.jdx.dev/comparison-to-asdf.html",children:"https://mise.jdx.dev/comparison-to-asdf.html"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"FAQ"}),": ",(0,i.jsx)(n.a,{href:"https://mise.jdx.dev/faq.html",children:"https://mise.jdx.dev/faq.html"})]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"cheat-sheet-summary",children:"Cheat Sheet Summary"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Installation\r\ncurl https://mise.run | sh\r\n\r\n# Activation\r\neval "$(mise activate bash)"\r\n\r\n# Install tools\r\nmise use --global node@22 python@3.12\r\n\r\n# Project setup\r\ncd myproject\r\nmise use node@22\r\nmise install\r\n\r\n# Environment\r\nmise env\r\nmise set KEY=value\r\n\r\n# Tasks\r\nmise run build\r\nmise run test\r\nmise tasks\r\n\r\n# Management\r\nmise ls                    # List installed\r\nmise ls-remote node        # Available versions\r\nmise upgrade               # Update all tools\r\nmise doctor                # Diagnostics\r\n\r\n# Quick execution\r\nmise exec -- node app.js\r\nmise x -- python script.py\n'})})]})}function d(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(m,{...e})}):m(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>l,x:()=>a});var s=r(96540);const i={},t=s.createContext(i);function l(e){const n=s.useContext(t);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);