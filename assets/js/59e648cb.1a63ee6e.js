"use strict";(globalThis.webpackChunkgl_0_bal_01=globalThis.webpackChunkgl_0_bal_01||[]).push([[1371],{21359:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>s,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"cheatsheets/git/git-practical-examples","title":"Git Practical Examples: Quick Reference for Developers","description":"Essential Git commands with 45 practical examples covering repository setup, daily workflows, branching, collaboration, and advanced operations","source":"@site/docs/cheatsheets/git/github_practical.md","sourceDirName":"cheatsheets/git","slug":"/cheatsheets/git/git-practical-examples","permalink":"/cheatsheets/git/git-practical-examples","draft":false,"unlisted":false,"editUrl":"https://github.com/gl0bal01/gl0bal01.github.io/tree/main/docs/cheatsheets/git/github_practical.md","tags":[{"inline":true,"label":"Development","permalink":"/tags/development"},{"inline":true,"label":"Productivity","permalink":"/tags/productivity"}],"version":"current","lastUpdatedAt":1750255922000,"sidebarPosition":2,"frontMatter":{"id":"git-practical-examples","title":"Git Practical Examples: Quick Reference for Developers","sidebar_label":"Practical Examples","sidebar_position":2,"description":"Essential Git commands with 45 practical examples covering repository setup, daily workflows, branching, collaboration, and advanced operations","keywords":["git","version control","github","gitlab","bitbucket","repository management","branching","merging","collaboration","workflow","devops"],"authors":["gl0bal01"],"tags":["Development","Productivity"],"date":"2024-06-18T00:00:00.000Z"},"sidebar":"tutorialSidebar","previous":{"title":"Technical Reference","permalink":"/cheatsheets/git/github-guide"},"next":{"title":"Powerful Commands","permalink":"/cheatsheets/git/git-hidden-gems-commands"}}');var i=t(74848),a=t(28453);const s={id:"git-practical-examples",title:"Git Practical Examples: Quick Reference for Developers",sidebar_label:"Practical Examples",sidebar_position:2,description:"Essential Git commands with 45 practical examples covering repository setup, daily workflows, branching, collaboration, and advanced operations",keywords:["git","version control","github","gitlab","bitbucket","repository management","branching","merging","collaboration","workflow","devops"],authors:["gl0bal01"],tags:["Development","Productivity"],date:new Date("2024-06-18T00:00:00.000Z")},o="Git Practical Examples",l={},c=[{value:"Repository Setup &amp; Configuration",id:"repository-setup--configuration",level:2},{value:"Daily Development Workflow",id:"daily-development-workflow",level:2},{value:"Branch Management",id:"branch-management",level:2},{value:"Collaboration Workflows",id:"collaboration-workflows",level:2},{value:"Undo &amp; Recovery Operations",id:"undo--recovery-operations",level:2},{value:"Stashing &amp; Temporary Storage",id:"stashing--temporary-storage",level:2},{value:"Advanced Git Operations",id:"advanced-git-operations",level:2},{value:"Release Management",id:"release-management",level:2},{value:"Debugging &amp; Investigation",id:"debugging--investigation",level:2},{value:"Large Files &amp; Performance",id:"large-files--performance",level:2}];function g(e){const r={code:"code",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.header,{children:(0,i.jsx)(r.h1,{id:"git-practical-examples",children:"Git Practical Examples"})}),"\n",(0,i.jsx)(r.h2,{id:"repository-setup--configuration",children:"Repository Setup & Configuration"}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.em,{children:"Set up a new or existing repository, configure user identity, and manage remote connections for secure collaboration."})}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-bash",children:'# 1. Initialize new repository\r\ngit init\r\ngit init my-project\r\n\r\n# 2. Clone existing repository\r\ngit clone https://github.com/user/repo.git\r\ngit clone git@github.com:user/repo.git\r\n\r\n# 3. Configure user identity\r\ngit config --global user.name "Your Name"\r\ngit config --global user.email "you@example.com"\r\n\r\n# 4. Set up remote repositories\r\ngit remote add origin https://github.com/user/repo.git\r\ngit remote -v\r\n\r\n# 5. Configure SSH keys for GitHub\r\nssh-keygen -t ed25519 -C "you@example.com"\r\ncat ~/.ssh/id_ed25519.pub  # Add to GitHub\n'})}),"\n",(0,i.jsx)(r.h2,{id:"daily-development-workflow",children:"Daily Development Workflow"}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.em,{children:"Perform everyday tasks such as branching, committing, pushing, pulling, and checking repository status."})}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-bash",children:'# 6. Create and switch branches\r\ngit checkout -b feature/new-feature\r\ngit switch -c feature/new-feature  # Git 2.23+\r\n\r\n# 7. Stage and commit changes\r\ngit add file.txt\r\ngit add .\r\ngit commit -m "Add new feature"\r\n\r\n# 8. Push changes to remote\r\ngit push origin feature/new-feature\r\ngit push -u origin feature/new-feature  # Set upstream\r\n\r\n# 9. Pull latest changes\r\ngit pull origin main\r\ngit pull  # If upstream is set\r\n\r\n# 10. Check repository status\r\ngit status\r\ngit status -s  # Short format\r\n\r\n# 11. View commit history\r\ngit log --oneline\r\ngit log --graph --oneline --all\n'})}),"\n",(0,i.jsx)(r.h2,{id:"branch-management",children:"Branch Management"}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.em,{children:"Create, manage, merge, rename, and delete branches to organize and integrate development work."})}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-bash",children:"# 12. Create feature branches\r\ngit checkout -b feature/user-auth\r\ngit checkout -b hotfix/bug-123 main\r\n\r\n# 13. Merge branches\r\ngit checkout main\r\ngit merge feature/user-auth\r\ngit merge --no-ff feature/user-auth  # No fast-forward\r\n\r\n# 14. Delete branches\r\ngit branch -d feature/user-auth  # Safe delete\r\ngit branch -D feature/user-auth  # Force delete\r\ngit push origin --delete feature/user-auth  # Delete remote\r\n\r\n# 15. Rename branches\r\ngit branch -m old-name new-name\r\ngit branch -m new-name  # Rename current branch\r\n\r\n# 16. Track remote branches\r\ngit checkout -b local-branch origin/remote-branch\r\ngit branch --set-upstream-to=origin/main main\n"})}),"\n",(0,i.jsx)(r.h2,{id:"collaboration-workflows",children:"Collaboration Workflows"}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.em,{children:"Work effectively with others using forks, pull requests, code reviews, and conflict resolution."})}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-bash",children:'# 17. Fork and contribute to projects\r\ngh repo fork owner/repo --clone\r\ngit remote add upstream https://github.com/original/repo.git\r\n\r\n# 18. Create pull requests\r\ngh pr create --title "Fix bug" --body "Description"\r\ngit push origin feature/fix && gh pr create\r\n\r\n# 19. Handle merge conflicts\r\ngit merge feature/branch\r\n# Edit conflicted files, then:\r\ngit add .\r\ngit commit\r\n\r\n# 20. Sync fork with upstream\r\ngit fetch upstream\r\ngit checkout main\r\ngit merge upstream/main\r\ngit push origin main\r\n\r\n# 21. Code review workflow\r\ngh pr checkout 123\r\ngh pr review 123 --approve\r\ngh pr merge 123 --squash\n'})}),"\n",(0,i.jsx)(r.h2,{id:"undo--recovery-operations",children:"Undo & Recovery Operations"}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.em,{children:"Recover from mistakes by undoing commits, resetting history, restoring files, or finding lost work."})}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-bash",children:"# 22. Undo last commit\r\ngit reset --soft HEAD~1  # Keep changes staged\r\ngit reset HEAD~1         # Keep changes unstaged\r\ngit reset --hard HEAD~1  # Discard changes\r\n\r\n# 23. Discard local changes\r\ngit checkout -- file.txt\r\ngit restore file.txt     # Git 2.23+\r\ngit clean -fd            # Remove untracked files\r\n\r\n# 24. Reset to previous commit\r\ngit reset --hard abc1234\r\ngit reset --hard HEAD~3\r\n\r\n# 25. Recover deleted files\r\ngit checkout HEAD -- deleted-file.txt\r\ngit restore --source=HEAD~1 file.txt\r\n\r\n# 26. Find lost commits with reflog\r\ngit reflog\r\ngit reset --hard HEAD@{2}\n"})}),"\n",(0,i.jsx)(r.h2,{id:"stashing--temporary-storage",children:"Stashing & Temporary Storage"}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.em,{children:"Save uncommitted changes temporarily and resume work later without losing progress."})}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-bash",children:'# 27. Stash work in progress\r\ngit stash\r\ngit stash push -m "Work in progress"\r\ngit stash -u  # Include untracked files\r\n\r\n# 28. Apply and manage stashes\r\ngit stash pop\r\ngit stash apply stash@{1}\r\ngit stash list\r\ngit stash drop stash@{1}\r\n\r\n# 29. Create branch from stash\r\ngit stash branch new-feature stash@{1}\n'})}),"\n",(0,i.jsx)(r.h2,{id:"advanced-git-operations",children:"Advanced Git Operations"}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.em,{children:"Use advanced tools like rebase, cherry-pick, and commit splitting for cleaner, more controlled history."})}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-bash",children:'# 30. Interactive rebase\r\ngit rebase -i HEAD~3\r\ngit rebase -i main\r\n\r\n# 31. Cherry-pick commits\r\ngit cherry-pick abc1234\r\ngit cherry-pick abc1234..def5678\r\n\r\n# 32. Squash multiple commits\r\ngit rebase -i HEAD~3  # Mark commits as \'squash\'\r\ngit reset --soft HEAD~3 && git commit\r\n\r\n# 33. Amend commit messages\r\ngit commit --amend -m "New message"\r\ngit commit --amend --no-edit  # Keep message\r\n\r\n# 34. Split large commits\r\ngit reset --soft HEAD~1\r\ngit add -p  # Stage parts interactively\r\ngit commit -m "Part 1"\n'})}),"\n",(0,i.jsx)(r.h2,{id:"release-management",children:"Release Management"}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.em,{children:"Tag versions, generate changelogs, and publish releases to mark progress and distribute code."})}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-bash",children:'# 35. Create and manage tags\r\ngit tag v1.0.0\r\ngit tag -a v1.0.0 -m "Release version 1.0.0"\r\ngit push origin v1.0.0\r\ngit push --tags\r\n\r\n# 36. Generate changelogs\r\ngit log --oneline v1.0.0..v1.1.0\r\ngit log --pretty=format:"- %s" v1.0.0..HEAD\r\n\r\n# 37. Create releases\r\ngh release create v1.0.0 --title "v1.0.0" --notes "Release notes"\r\ngit archive --format=zip --output=release.zip HEAD\r\n\r\n# 38. Semantic versioning workflow\r\ngit tag -a v1.2.3 -m "Patch release"\r\nnpm version patch && git push --follow-tags\n'})}),"\n",(0,i.jsx)(r.h2,{id:"debugging--investigation",children:"Debugging & Investigation"}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.em,{children:"Inspect changes, search history, identify contributors, and isolate bugs through Git's powerful history tools."})}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-bash",children:'# 39. Find who changed what (git blame)\r\ngit blame file.txt\r\ngit blame -L 10,20 file.txt\r\n\r\n# 40. Search commit history\r\ngit log --grep="bug fix"\r\ngit log --author="John"\r\ngit log --since="2024-01-01"\r\n\r\n# 41. Compare file versions\r\ngit diff HEAD~1 file.txt\r\ngit diff branch1..branch2\r\ngit show abc1234:file.txt\r\n\r\n# 42. Find bugs with git bisect\r\ngit bisect start\r\ngit bisect bad HEAD\r\ngit bisect good v1.0.0\r\ngit bisect reset\n'})}),"\n",(0,i.jsx)(r.h2,{id:"large-files--performance",children:"Large Files & Performance"}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.em,{children:"Handle large assets with Git LFS, clean up history, and optimize performance of your repository."})}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-bash",children:'# 43. Use Git LFS for large files\r\ngit lfs track "*.zip"\r\ngit add .gitattributes\r\ngit lfs ls-files\r\n\r\n# 44. Clean up repository history\r\ngit gc --aggressive\r\ngit filter-repo --path large-file.zip --invert-paths\r\n\r\n# 45. Optimize repository size\r\ngit count-objects -vH\r\ngit remote prune origin\r\ngit repack -ad\n'})}),"\n",(0,i.jsx)(r.p,{children:"Each example shows the most essential command(s) for that use case, with common variations where helpful."})]})}function h(e={}){const{wrapper:r}={...(0,a.R)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(g,{...e})}):g(e)}},28453:(e,r,t)=>{t.d(r,{R:()=>s,x:()=>o});var n=t(96540);const i={},a=n.createContext(i);function s(e){const r=n.useContext(a);return n.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),n.createElement(a.Provider,{value:r},e.children)}}}]);