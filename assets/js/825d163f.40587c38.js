"use strict";(globalThis.webpackChunkgl_0_bal_01=globalThis.webpackChunkgl_0_bal_01||[]).push([[160],{28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var r=t(96540);const i={},s=r.createContext(i);function o(e){const n=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(s.Provider,{value:n},e.children)}},67171:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"cheatsheets/git/github-guide","title":"Comprehensive GitHub Development Operations: A Technical Reference Manual","description":"An exhaustive academic reference analyzing GitHub platform capabilities, command-line tools, automation frameworks, and enterprise integration for modern software development operations","source":"@site/docs/cheatsheets/git/github_guide.md","sourceDirName":"cheatsheets/git","slug":"/cheatsheets/git/github-guide","permalink":"/cheatsheets/git/github-guide","draft":false,"unlisted":false,"editUrl":"https://github.com/gl0bal01/gl0bal01.github.io/tree/main/docs/cheatsheets/git/github_guide.md","tags":[{"inline":true,"label":"Development","permalink":"/tags/development"},{"inline":true,"label":"Productivity","permalink":"/tags/productivity"}],"version":"current","lastUpdatedAt":1750255922000,"sidebarPosition":1,"frontMatter":{"id":"github-guide","title":"Comprehensive GitHub Development Operations: A Technical Reference Manual","sidebar_label":"Technical Reference","sidebar_position":1,"description":"An exhaustive academic reference analyzing GitHub platform capabilities, command-line tools, automation frameworks, and enterprise integration for modern software development operations","keywords":["github","git","github cli","github actions","devops","automation","version control","ci cd","collaboration","repository management"],"authors":["gl0bal01"],"tags":["Development","Productivity"],"date":"2024-06-18T00:00:00.000Z"},"sidebar":"tutorialSidebar","previous":{"title":"Git","permalink":"/cheatsheets/git"},"next":{"title":"Practical Examples","permalink":"/cheatsheets/git/git-practical-examples"}}');var i=t(74848),s=t(28453);const o={id:"github-guide",title:"Comprehensive GitHub Development Operations: A Technical Reference Manual",sidebar_label:"Technical Reference",sidebar_position:1,description:"An exhaustive academic reference analyzing GitHub platform capabilities, command-line tools, automation frameworks, and enterprise integration for modern software development operations",keywords:["github","git","github cli","github actions","devops","automation","version control","ci cd","collaboration","repository management"],authors:["gl0bal01"],tags:["Development","Productivity"],date:new Date("2024-06-18T00:00:00.000Z")},a="Comprehensive GitHub Development Operations: A Technical Reference Manual",l={},c=[{value:"Abstract",id:"abstract",level:2},{value:"1. Introduction",id:"1-introduction",level:2},{value:"1.1 GitHub Ecosystem Taxonomy",id:"11-github-ecosystem-taxonomy",level:3},{value:"1.2 Platform Architecture Overview",id:"12-platform-architecture-overview",level:3},{value:"1.3 Tool Evaluation Framework",id:"13-tool-evaluation-framework",level:3},{value:"1.4 Workflow Selection Decision Framework",id:"14-workflow-selection-decision-framework",level:3},{value:"2. Git Foundation: Version Control Mastery",id:"2-git-foundation-version-control-mastery",level:2},{value:"2.1 Repository Initialization and Configuration",id:"21-repository-initialization-and-configuration",level:3},{value:"2.2 Remote Repository Management",id:"22-remote-repository-management",level:3},{value:"2.3 Staging and Commit Operations",id:"23-staging-and-commit-operations",level:3},{value:"2.4 Branch Management Strategies",id:"24-branch-management-strategies",level:3},{value:"2.5 Advanced Merge and Rebase Operations",id:"25-advanced-merge-and-rebase-operations",level:3},{value:"2.6 Conflict Resolution Techniques",id:"26-conflict-resolution-techniques",level:3},{value:"2.7 History Management and Navigation",id:"27-history-management-and-navigation",level:3},{value:"2.8 Stashing and Temporary Storage",id:"28-stashing-and-temporary-storage",level:3},{value:"3. GitHub Repository Management",id:"3-github-repository-management",level:2},{value:"3.1 Repository Creation and Setup",id:"31-repository-creation-and-setup",level:3},{value:"3.2 Repository Configuration and Settings",id:"32-repository-configuration-and-settings",level:3},{value:"3.3 Collaboration and Access Management",id:"33-collaboration-and-access-management",level:3},{value:"3.4 File and Content Management",id:"34-file-and-content-management",level:3},{value:"3.5 Repository Maintenance and Cleanup",id:"35-repository-maintenance-and-cleanup",level:3},{value:"4. GitHub CLI: Command-Line Mastery",id:"4-github-cli-command-line-mastery",level:2},{value:"4.1 Authentication and Configuration",id:"41-authentication-and-configuration",level:3},{value:"4.2 Issue Management",id:"42-issue-management",level:3},{value:"4.3 Pull Request Operations",id:"43-pull-request-operations",level:3},{value:"4.4 GitHub Actions Integration",id:"44-github-actions-integration",level:3},{value:"4.5 Release Management",id:"45-release-management",level:3},{value:"4.6 Advanced CLI Operations",id:"46-advanced-cli-operations",level:3},{value:"5. GitHub Actions: Automation Mastery",id:"5-github-actions-automation-mastery",level:2},{value:"5.1 Workflow Fundamentals",id:"51-workflow-fundamentals",level:3},{value:"5.2 Advanced Workflow Patterns",id:"52-advanced-workflow-patterns",level:3},{value:"5.3 Reusable Workflows and Composite Actions",id:"53-reusable-workflows-and-composite-actions",level:3},{value:"5.4 Security and Secrets Management",id:"54-security-and-secrets-management",level:3},{value:"5.5 Self-Hosted Runners and Enterprise Features",id:"55-self-hosted-runners-and-enterprise-features",level:3},{value:"5.6 Workflow Debugging and Monitoring",id:"56-workflow-debugging-and-monitoring",level:3},{value:"6. GitHub API Integration",id:"6-github-api-integration",level:2},{value:"6.1 REST API Fundamentals",id:"61-rest-api-fundamentals",level:3},{value:"6.2 Advanced REST API Operations",id:"62-advanced-rest-api-operations",level:3},{value:"6.3 GraphQL API Operations",id:"63-graphql-api-operations",level:3},{value:"6.4 Python API Integration Examples",id:"64-python-api-integration-examples",level:3},{value:"6.5 JavaScript/Node.js API Integration",id:"65-javascriptnodejs-api-integration",level:3},{value:"6.6 Webhook Integration and Event Processing",id:"66-webhook-integration-and-event-processing",level:3},{value:"6.7 Rate Limiting and Error Handling",id:"67-rate-limiting-and-error-handling",level:3},{value:"7. Collaboration Workflows and Project Management",id:"7-collaboration-workflows-and-project-management",level:2},{value:"7.1 Advanced Pull Request Workflows",id:"71-advanced-pull-request-workflows",level:3},{value:"7.2 Code Review Best Practices",id:"72-code-review-best-practices",level:3},{value:"7.3 Branch Protection and Security",id:"73-branch-protection-and-security",level:3},{value:"7.4 GitHub Projects and Issue Management",id:"74-github-projects-and-issue-management",level:3},{value:"7.5 Team Management and Organization",id:"75-team-management-and-organization",level:3},{value:"7.6 Advanced Workflow Automation",id:"76-advanced-workflow-automation",level:3}];function u(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"comprehensive-github-development-operations-a-technical-reference-manual",children:"Comprehensive GitHub Development Operations: A Technical Reference Manual"})}),"\n",(0,i.jsx)(n.h2,{id:"abstract",children:"Abstract"}),"\n",(0,i.jsx)(n.p,{children:"This comprehensive technical reference presents an exhaustive analysis of GitHub platform capabilities, command-line interfaces, automation frameworks, and enterprise integration methodologies employed in modern software development operations. We examine the complete GitHub ecosystem including Git fundamentals, GitHub CLI operations, Actions workflows, API integration, and advanced collaboration patterns. This manual serves as both theoretical foundation and practical implementation guide for software engineers, DevOps practitioners, and platform administrators."}),"\n",(0,i.jsx)(n.h2,{id:"1-introduction",children:"1. Introduction"}),"\n",(0,i.jsx)(n.p,{children:"GitHub represents the foundational platform for modern collaborative software development, providing distributed version control, project management, automation pipelines, and enterprise-grade collaboration tools. This methodology enables teams to leverage comprehensive development workflows spanning code hosting, review processes, continuous integration, deployment automation, and project governance."}),"\n",(0,i.jsx)(n.h3,{id:"11-github-ecosystem-taxonomy",children:"1.1 GitHub Ecosystem Taxonomy"}),"\n",(0,i.jsx)(n.p,{children:"GitHub development operations can be systematically categorized into six primary domains:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Repository Management"}),": Git-based version control and project organization"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Collaboration Workflows"}),": Pull requests, issues, discussions, and code review"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Automation Pipelines"}),": GitHub Actions for CI/CD and workflow automation"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Command-Line Operations"}),": GitHub CLI for terminal-based platform interaction"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"API Integration"}),": REST and GraphQL APIs for programmatic platform access"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Enterprise Administration"}),": Organization management, security, and compliance"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"12-platform-architecture-overview",children:"1.2 Platform Architecture Overview"}),"\n",(0,i.jsx)(n.p,{children:"The following diagram illustrates typical GitHub development workflows and integration points:"}),"\n",(0,i.jsx)(n.mermaid,{value:"graph TD\n    A[Developer Workstation] --\x3e B[Local Git Repository]\n    A --\x3e C[GitHub CLI]\n    A --\x3e D[GitHub API]\n    \n    B --\x3e E[Remote Repository]\n    C --\x3e E\n    D --\x3e E\n    \n    E --\x3e F[Pull Requests]\n    E --\x3e G[Issues & Projects]\n    E --\x3e H[GitHub Actions]\n    \n    F --\x3e I[Code Review]\n    F --\x3e J[Automated Checks]\n    \n    G --\x3e K[Project Management]\n    G --\x3e L[Issue Tracking]\n    \n    H --\x3e M[CI/CD Pipelines]\n    H --\x3e N[Automation Workflows]\n    H --\x3e O[Deployment]\n    \n    I --\x3e P[Merge to Main]\n    J --\x3e P\n    M --\x3e P\n    \n    P --\x3e Q[Production Release]\n    \n    style A fill:#ff9999\n    style E fill:#99ccff\n    style H fill:#99ffcc\n    style Q fill:#ffcccc"}),"\n",(0,i.jsx)(n.h3,{id:"13-tool-evaluation-framework",children:"1.3 Tool Evaluation Framework"}),"\n",(0,i.jsx)(n.p,{children:"Each GitHub operation methodology is evaluated across eight critical dimensions:"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Tool/Method"}),(0,i.jsx)(n.th,{children:"Efficiency"}),(0,i.jsx)(n.th,{children:"Learning Curve"}),(0,i.jsx)(n.th,{children:"Integration"}),(0,i.jsx)(n.th,{children:"Automation"}),(0,i.jsx)(n.th,{children:"Scalability"}),(0,i.jsx)(n.th,{children:"Security"}),(0,i.jsx)(n.th,{children:"Maintenance"}),(0,i.jsx)(n.th,{children:"Enterprise"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Git CLI"}),(0,i.jsx)(n.td,{children:"Very High"}),(0,i.jsx)(n.td,{children:"High"}),(0,i.jsx)(n.td,{children:"High"}),(0,i.jsx)(n.td,{children:"High"}),(0,i.jsx)(n.td,{children:"Very High"}),(0,i.jsx)(n.td,{children:"High"}),(0,i.jsx)(n.td,{children:"Low"}),(0,i.jsx)(n.td,{children:"Very High"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"GitHub CLI"}),(0,i.jsx)(n.td,{children:"High"}),(0,i.jsx)(n.td,{children:"Medium"}),(0,i.jsx)(n.td,{children:"Very High"}),(0,i.jsx)(n.td,{children:"Very High"}),(0,i.jsx)(n.td,{children:"High"}),(0,i.jsx)(n.td,{children:"High"}),(0,i.jsx)(n.td,{children:"Low"}),(0,i.jsx)(n.td,{children:"High"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"GitHub Actions"}),(0,i.jsx)(n.td,{children:"Very High"}),(0,i.jsx)(n.td,{children:"Medium"}),(0,i.jsx)(n.td,{children:"Very High"}),(0,i.jsx)(n.td,{children:"Very High"}),(0,i.jsx)(n.td,{children:"Very High"}),(0,i.jsx)(n.td,{children:"Very High"}),(0,i.jsx)(n.td,{children:"Medium"}),(0,i.jsx)(n.td,{children:"Very High"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"GitHub API"}),(0,i.jsx)(n.td,{children:"Very High"}),(0,i.jsx)(n.td,{children:"High"}),(0,i.jsx)(n.td,{children:"Very High"}),(0,i.jsx)(n.td,{children:"Very High"}),(0,i.jsx)(n.td,{children:"Very High"}),(0,i.jsx)(n.td,{children:"High"}),(0,i.jsx)(n.td,{children:"Medium"}),(0,i.jsx)(n.td,{children:"Very High"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"GitHub Desktop"}),(0,i.jsx)(n.td,{children:"Medium"}),(0,i.jsx)(n.td,{children:"Low"}),(0,i.jsx)(n.td,{children:"Medium"}),(0,i.jsx)(n.td,{children:"Low"}),(0,i.jsx)(n.td,{children:"Medium"}),(0,i.jsx)(n.td,{children:"High"}),(0,i.jsx)(n.td,{children:"Low"}),(0,i.jsx)(n.td,{children:"Medium"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Web Interface"}),(0,i.jsx)(n.td,{children:"Low"}),(0,i.jsx)(n.td,{children:"Very Low"}),(0,i.jsx)(n.td,{children:"Low"}),(0,i.jsx)(n.td,{children:"Very Low"}),(0,i.jsx)(n.td,{children:"Low"}),(0,i.jsx)(n.td,{children:"High"}),(0,i.jsx)(n.td,{children:"Very Low"}),(0,i.jsx)(n.td,{children:"High"})]})]})]}),"\n",(0,i.jsx)(n.admonition,{title:"Evaluation Criteria",type:"note",children:(0,i.jsx)(n.p,{children:"Evaluation criteria are based on enterprise software development best practices, developer productivity metrics, and platform adoption patterns. Ratings represent relative assessments under typical development scenarios and may vary based on specific organizational requirements, team expertise, and integration complexity."})}),"\n",(0,i.jsx)(n.h3,{id:"14-workflow-selection-decision-framework",children:"1.4 Workflow Selection Decision Framework"}),"\n",(0,i.jsx)(n.p,{children:"The following flowchart provides a systematic approach for selecting appropriate GitHub workflows based on operational requirements:"}),"\n",(0,i.jsx)(n.mermaid,{value:"flowchart TD\n    A[GitHub Operation Required] --\x3e B{Operation Type?}\n    \n    B --\x3e|Code Management| C{Team Size?}\n    B --\x3e|Automation| D{Complexity Level?}\n    B --\x3e|Collaboration| E{Review Requirements?}\n    B --\x3e|Administration| F{Enterprise Features?}\n    \n    C --\x3e|Individual| G[Git CLI + Local Workflow]\n    C --\x3e|Small Team| H[GitHub CLI + Pull Requests]\n    C --\x3e|Large Team| I[Branching Strategy + Reviews]\n    \n    D --\x3e|Simple| J[Basic GitHub Actions]\n    D --\x3e|Complex| K[Advanced Workflows + API]\n    D --\x3e|Enterprise| L[Actions + Self-hosted Runners]\n    \n    E --\x3e|Basic| M[Standard Pull Requests]\n    E --\x3e|Rigorous| N[Protected Branches + CODEOWNERS]\n    E --\x3e|Compliance| O[Required Checks + Approvals]\n    \n    F --\x3e|Standard| P[GitHub Team/Enterprise]\n    F --\x3e|Advanced| Q[Enterprise + SAML/SCIM]\n    F --\x3e|Custom| R[GitHub Enterprise Server]\n    \n    G --\x3e S[Implementation]\n    H --\x3e S\n    I --\x3e S\n    J --\x3e S\n    K --\x3e S\n    L --\x3e S\n    M --\x3e S\n    N --\x3e S\n    O --\x3e S\n    P --\x3e S\n    Q --\x3e S\n    R --\x3e S\n    \n    style A fill:#e1f5fe\n    style S fill:#c8e6c9\n    style K fill:#fff3e0\n    style L fill:#fff3e0\n    style Q fill:#f3e5f5\n    style R fill:#f3e5f5"}),"\n",(0,i.jsx)(n.h2,{id:"2-git-foundation-version-control-mastery",children:"2. Git Foundation: Version Control Mastery"}),"\n",(0,i.jsx)(n.admonition,{title:"Prerequisites",type:"note",children:(0,i.jsx)(n.p,{children:"The following Git commands assume you have Git installed (version 2.20+) and properly configured with your identity. Replace placeholder values (e.g., username, repository names, URLs) with those specific to your environment. Ensure you have appropriate permissions for remote repositories."})}),"\n",(0,i.jsx)(n.p,{children:"Git forms the foundational layer of GitHub operations, providing distributed version control capabilities that enable collaborative software development at scale."}),"\n",(0,i.jsx)(n.h3,{id:"21-repository-initialization-and-configuration",children:"2.1 Repository Initialization and Configuration"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Initialize new repository with main as default branch\ngit init -b main\n\n# Initialize in new directory\ngit init my-project -b main\ncd my-project\n\n# Configure user identity (local repository)\ngit config user.name "Your Name"\ngit config user.email "your.email@example.com"\n\n# Configure identity globally\ngit config --global user.name "Your Name"\ngit config --global user.email "your.email@example.com"\n\n# Set up default branch name globally\ngit config --global init.defaultBranch main\n\n# Configure line ending handling\ngit config --global core.autocrlf input  # Linux/macOS\ngit config --global core.autocrlf true   # Windows\n\n# Configure editor\ngit config --global core.editor "code --wait"  # VS Code\ngit config --global core.editor "vim"          # Vim\n\n# View configuration\ngit config --list\ngit config --global --list\ngit config --local --list\n'})}),"\n",(0,i.jsx)(n.h3,{id:"22-remote-repository-management",children:"2.2 Remote Repository Management"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Add remote repository\ngit remote add origin https://github.com/username/repository.git\n\n# Add remote with SSH URL\ngit remote add origin git@github.com:username/repository.git\n\n# View configured remotes\ngit remote -v\n\n# Change remote URL (HTTPS to SSH)\ngit remote set-url origin git@github.com:username/repository.git\n\n# Change remote URL (SSH to HTTPS)\ngit remote set-url origin https://github.com/username/repository.git\n\n# Add upstream for forked repositories\ngit remote add upstream https://github.com/original-owner/repository.git\n\n# Rename remote\ngit remote rename origin backup\ngit remote rename backup origin\n\n# Remove remote\ngit remote remove backup\n\n# Fetch from specific remote\ngit fetch origin\ngit fetch upstream\n\n# Show remote information\ngit remote show origin\n"})}),"\n",(0,i.jsx)(n.h3,{id:"23-staging-and-commit-operations",children:"2.3 Staging and Commit Operations"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Stage files for commit\ngit add file.txt\ngit add src/\ngit add .\ngit add -A  # All files including deletions\n\n# Interactive staging\ngit add -i\ngit add -p  # Patch mode for partial staging\n\n# Unstage files\ngit reset HEAD file.txt\ngit restore --staged file.txt  # Git 2.23+\n\n# Commit changes\ngit commit -m "Add user authentication feature"\n\n# Commit with detailed message\ngit commit -m "Add user authentication" -m "- Implement JWT token validation\n- Add password hashing with bcrypt\n- Create user session management\n- Add logout functionality"\n\n# Commit all tracked changes\ngit commit -am "Fix authentication bug"\n\n# Amend last commit\ngit commit --amend -m "Updated commit message"\n\n# Commit with specific date\ngit commit --date="2024-01-15T10:30:00" -m "Backdated commit"\n\n# Empty commit (useful for triggering CI/CD)\ngit commit --allow-empty -m "Trigger deployment"\n\n# Sign commits with GPG\ngit commit -S -m "Signed commit"\ngit config --global commit.gpgsign true  # Always sign\n'})}),"\n",(0,i.jsx)(n.h3,{id:"24-branch-management-strategies",children:"2.4 Branch Management Strategies"}),"\n",(0,i.jsx)(n.p,{children:"Branch: Independent line of development within a repository. It allows parallel work on features, fixes, or experiments without affecting the main codebase."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Create and switch to new branch\ngit checkout -b feature/user-dashboard\ngit switch -c feature/user-dashboard  # Git 2.23+\n\n# Create branch from specific commit\ngit checkout -b hotfix/security-patch abc1234\n\n# Switch between branches\ngit checkout main\ngit switch main  # Git 2.23+\n\n# List branches\ngit branch\ngit branch -a   # Including remote branches\ngit branch -r   # Remote branches only\n\n# Delete branch\ngit branch -d feature/completed-feature\ngit branch -D feature/abandoned-feature  # Force delete\n\n# Delete remote branch\ngit push origin --delete feature/old-feature\n\n# Rename current branch\ngit branch -m new-branch-name\n\n# Rename other branch\ngit branch -m old-name new-name\n\n# Track remote branch\ngit checkout -b local-branch origin/remote-branch\ngit branch --set-upstream-to=origin/main main\n\n# Show branch relationships\ngit show-branch\ngit log --oneline --graph --all --decorate\n"})}),"\n",(0,i.jsx)(n.h3,{id:"25-advanced-merge-and-rebase-operations",children:"2.5 Advanced Merge and Rebase Operations"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Merge feature branch into main\ngit checkout main\ngit merge feature/user-dashboard\n\n# Fast-forward merge only\ngit merge --ff-only feature/user-dashboard\n\n# No fast-forward merge (always create merge commit)\ngit merge --no-ff feature/user-dashboard\n\n# Squash merge (combine all commits into one)\ngit merge --squash feature/user-dashboard\ngit commit -m "Add user dashboard feature"\n\n# Interactive rebase for commit cleanup\ngit rebase -i HEAD~3\ngit rebase -i abc1234\n\n# Rebase branch onto main\ngit checkout feature/user-dashboard\ngit rebase main\n\n# Continue/abort rebase\ngit rebase --continue\ngit rebase --abort\n\n# Cherry-pick specific commits\ngit cherry-pick abc1234\ngit cherry-pick abc1234..def5678\n\n# Three-way merge with custom strategy\ngit merge -X ours feature/conflicted-branch\ngit merge -X theirs feature/conflicted-branch\n'})}),"\n",(0,i.jsx)(n.h3,{id:"26-conflict-resolution-techniques",children:"2.6 Conflict Resolution Techniques"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Check conflict status\ngit status\ngit diff\n\n# View conflicts in specific file\ngit diff HEAD file.txt\n\n# Use merge tools\ngit mergetool\ngit mergetool --tool=vimdiff\n\n# Resolve conflicts manually then mark as resolved\n# Edit conflicted files, then:\ngit add conflicted-file.txt\n\n# Abort merge if needed\ngit merge --abort\n\n# Show merge conflicts with context\ngit log --merge\ngit show :1:filename  # Common ancestor\ngit show :2:filename  # Current branch\ngit show :3:filename  # Merging branch\n\n# Automatically resolve conflicts favoring one side\ngit checkout --ours file.txt    # Keep current branch version\ngit checkout --theirs file.txt  # Keep merging branch version\n"})}),"\n",(0,i.jsx)(n.h3,{id:"27-history-management-and-navigation",children:"2.7 History Management and Navigation"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# View commit history\ngit log\ngit log --oneline\ngit log --graph --pretty=format:\'%h -%d %s (%cr) <%an>\'\n\n# View specific branch history\ngit log main..feature/branch\n\n# Show file history\ngit log -p filename\ngit log --follow filename  # Track through renames\n\n# Show who changed what\ngit blame filename\ngit annotate filename\n\n# Find commits by message\ngit log --grep="fix bug"\ngit log --grep="feature" --grep="bug" --all-match\n\n# Find commits by author\ngit log --author="John Doe"\ngit log --since="2024-01-01" --until="2024-12-31"\n\n# Show changes between commits\ngit diff abc1234..def5678\ngit diff HEAD~1..HEAD\n\n# Reset to previous state\ngit reset --soft HEAD~1   # Keep changes staged\ngit reset --mixed HEAD~1  # Keep changes unstaged (default)\ngit reset --hard HEAD~1   # Discard all changes\n\n# Reflog for recovery\ngit reflog\ngit reset --hard HEAD@{5}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"28-stashing-and-temporary-storage",children:"2.8 Stashing and Temporary Storage"}),"\n",(0,i.jsx)(n.p,{children:"Temporarily saves uncommitted changes, allowing you to switch branches or perform other operations without losing work."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Stash current changes temporarily\ngit stash\ngit stash push -m "Work in progress on authentication"\n\n# Stash including untracked files\ngit stash -u\ngit stash --include-untracked\n\n# List stashes\ngit stash list\n\n# Apply stash\ngit stash apply\ngit stash apply stash@{2}\n\n# Pop stash (apply and remove)\ngit stash pop\n\n# Show stash contents\ngit stash show\ngit stash show -p stash@{1}\n\n# Create branch from stash\ngit stash branch new-feature stash@{1}\n\n# Drop stash\ngit stash drop stash@{1}\n\n# Clear all stashes\ngit stash clear\n'})}),"\n",(0,i.jsx)(n.h2,{id:"3-github-repository-management",children:"3. GitHub Repository Management"}),"\n",(0,i.jsx)(n.admonition,{title:"Repository Operations",type:"note",children:(0,i.jsx)(n.p,{children:"The following examples assume you have appropriate permissions for the repositories mentioned. Replace organization names, repository names, and URLs with your actual values. Some operations require specific GitHub permissions or organization settings."})}),"\n",(0,i.jsx)(n.p,{children:"GitHub repository management encompasses creation, configuration, collaboration settings, and maintenance of code repositories with advanced features for team collaboration."}),"\n",(0,i.jsx)(n.h3,{id:"31-repository-creation-and-setup",children:"3.1 Repository Creation and Setup"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Create repository using GitHub CLI\ngh repo create my-new-project\ngh repo create my-new-project --public\ngh repo create my-new-project --private\ngh repo create my-new-project --internal\n\n# Create with template\ngh repo create my-project --template owner/template-repo\n\n# Create with description and website\ngh repo create my-project \\\n  --description "A sample project" \\\n  --homepage "https://myproject.com"\n\n# Create and clone locally\ngh repo create my-project --clone\n\n# Create from existing local repository\ncd existing-project\ngh repo create --source=. --public --push\n\n# Fork repository\ngh repo fork owner/repository\ngh repo fork owner/repository --clone\n\n# Clone repository\ngit clone https://github.com/owner/repository.git\ngh repo clone owner/repository\n\n# Clone with specific depth\ngit clone --depth 1 https://github.com/owner/repository.git\n\n# Clone specific branch\ngit clone -b development https://github.com/owner/repository.git\n'})}),"\n",(0,i.jsx)(n.h3,{id:"32-repository-configuration-and-settings",children:"3.2 Repository Configuration and Settings"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# View repository information\ngh repo view\ngh repo view owner/repository\n\n# Edit repository settings\ngh repo edit --description "Updated description"\ngh repo edit --homepage "https://newsite.com"\ngh repo edit --visibility private\n\n# Archive repository\ngh repo archive owner/repository\n\n# Delete repository (with confirmation)\ngh repo delete owner/repository --confirm\n\n# Transfer repository\ngh repo transfer owner/repository new-owner\n\n# Set default branch\ngh repo edit --default-branch main\n\n# Enable/disable features\ngh repo edit --enable-issues\ngh repo edit --disable-wiki\ngh repo edit --enable-projects\ngh repo edit --enable-discussions\n\n# Manage topics\ngh repo edit --add-topic "javascript,frontend,react"\ngh repo edit --remove-topic "old-topic"\n'})}),"\n",(0,i.jsx)(n.h3,{id:"33-collaboration-and-access-management",children:"3.3 Collaboration and Access Management"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Add collaborator\ngh repo collaborator add username\n\n# Remove collaborator\ngh repo collaborator remove username\n\n# List collaborators\ngh repo collaborator list\n\n# Invite collaborator with specific permission\ngh repo invite username --permission write\n\n# View pending invitations\ngh repo invite list\n\n# Create team (organization)\ngh team create development --description "Development team"\n\n# Add team to repository\ngh team add-repo organization/development owner/repository --permission admin\n\n# Manage branch protection\ngh repo protection enable main\ngh repo protection enable main --required-status-checks ci/build\ngh repo protection enable main --required-reviews 2\ngh repo protection enable main --dismiss-stale-reviews\ngh repo protection enable main --restrict-pushes --push-allowances "team:admins"\n\n# Manage repository secrets\ngh secret set SECRET_NAME --body "secret-value"\ngh secret set SECRET_NAME < secret-file.txt\ngh secret list\ngh secret delete SECRET_NAME\n\n# Manage environments\ngh environment create production\ngh environment create staging --protection-rules \'{"required_reviewers":[{"type":"User","id":"username"}]}\'\n'})}),"\n",(0,i.jsx)(n.h3,{id:"34-file-and-content-management",children:"3.4 File and Content Management"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Add file to repository via CLI\necho "# My Project" > README.md\ngit add README.md\ngit commit -m "Add README"\ngit push origin main\n\n# Create and commit multiple files\nmkdir src docs\necho "console.log(\'Hello World\');" > src/index.js\necho "# Documentation" > docs/guide.md\ngit add .\ngit commit -m "Add initial project structure"\ngit push\n\n# Move files using Git\ngit mv old-name.txt new-name.txt\ngit commit -m "Rename file"\n\n# Remove files\ngit rm file.txt\ngit rm -r directory/\ngit commit -m "Remove unnecessary files"\n\n# Remove from Git but keep locally\ngit rm --cached sensitive-file.txt\necho "sensitive-file.txt" >> .gitignore\ngit add .gitignore\ngit commit -m "Stop tracking sensitive file"\n\n# Large file handling with Git LFS\ngit lfs track "*.zip"\ngit lfs track "*.exe"\ngit lfs track "videos/*"\ngit add .gitattributes\ngit add large-file.zip\ngit commit -m "Add large files with LFS"\n\n# View LFS files\ngit lfs ls-files\ngit lfs status\n'})}),"\n",(0,i.jsx)(n.h3,{id:"35-repository-maintenance-and-cleanup",children:"3.5 Repository Maintenance and Cleanup"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Clean up local repository\ngit gc\ngit gc --aggressive\n\n# Prune remote tracking branches\ngit remote prune origin\n\n# Remove large files from history (dangerous!)\ngit filter-branch --tree-filter 'rm -f large-file.zip' HEAD\ngit filter-repo --path large-file.zip --invert-paths\n\n# Backup repository\ngit clone --mirror https://github.com/owner/repository.git repository-backup.git\n\n# Create repository archive\ngh repo archive owner/repository\nwget https://github.com/owner/repository/archive/refs/heads/main.zip\n\n# Sync fork with upstream\ngit fetch upstream\ngit checkout main\ngit merge upstream/main\ngit push origin main\n\n# Or using GitHub CLI\ngh repo sync owner/fork\n\n# Repository statistics\ngit count-objects -v\ngit log --oneline | wc -l\ngit shortlog -sn\n"})}),"\n",(0,i.jsx)(n.h2,{id:"4-github-cli-command-line-mastery",children:"4. GitHub CLI: Command-Line Mastery"}),"\n",(0,i.jsx)(n.admonition,{title:"GitHub CLI Requirements",type:"note",children:(0,i.jsxs)(n.p,{children:["Ensure GitHub CLI (gh) is installed and authenticated before running these commands. Authentication can be performed via ",(0,i.jsx)(n.code,{children:"gh auth login"}),". Replace placeholder values with your specific repository names, issue numbers, and usernames."]})}),"\n",(0,i.jsx)(n.p,{children:"The GitHub CLI provides powerful command-line access to GitHub's features, enabling efficient automation and integration with development workflows."}),"\n",(0,i.jsx)(n.h3,{id:"41-authentication-and-configuration",children:"4.1 Authentication and Configuration"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Authenticate with GitHub\ngh auth login\n\n# Login with specific scopes\ngh auth login --scopes "repo,read:org,workflow"\n\n# Login with token\ngh auth login --with-token < token.txt\n\n# Login to GitHub Enterprise\ngh auth login --hostname github.enterprise.com\n\n# Check authentication status\ngh auth status\n\n# Refresh authentication/add scopes\ngh auth refresh -s read:project\n\n# Switch between accounts\ngh auth switch\n\n# Logout\ngh auth logout\n\n# Configure default editor\ngh config set editor vim\ngh config set editor "code --wait"\n\n# Configure default protocol\ngh config set git_protocol ssh\ngh config set git_protocol https\n\n# Set default browser\ngh config set browser firefox\n\n# View all configuration\ngh config list\n'})}),"\n",(0,i.jsx)(n.h3,{id:"42-issue-management",children:"4.2 Issue Management"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# List issues\ngh issue list\ngh issue list --limit 50\ngh issue list --state open\ngh issue list --state closed\ngh issue list --assignee @me\ngh issue list --assignee username\ngh issue list --label bug\ngh issue list --milestone "v1.0"\n\n# Create issue\ngh issue create\ngh issue create --title "Bug in login form" --body "Description here"\ngh issue create --title "Feature request" --assignee username --label enhancement\ngh issue create --web\n\n# View issue\ngh issue view 123\ngh issue view 123 --web\n\n# Edit issue\ngh issue edit 123\ngh issue edit 123 --title "Updated title"\ngh issue edit 123 --add-assignee username\ngh issue edit 123 --add-label bug,priority-high\ngh issue edit 123 --remove-label enhancement\n\n# Close/reopen issue\ngh issue close 123\ngh issue close 123 --comment "Fixed in #456"\ngh issue reopen 123\n\n# Transfer issue\ngh issue transfer 123 owner/other-repo\n\n# Pin/unpin issue\ngh issue pin 123\ngh issue unpin 123\n\n# Comment on issue\ngh issue comment 123 --body "Thanks for reporting this!"\n\n# Search issues\ngh search issues "is:open label:bug" --repo owner/repo\ngh search issues "author:username created:>2024-01-01"\n'})}),"\n",(0,i.jsx)(n.h3,{id:"43-pull-request-operations",children:"4.3 Pull Request Operations"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# List pull requests\ngh pr list\ngh pr list --state open\ngh pr list --author username\ngh pr list --assignee @me\ngh pr list --label "needs-review"\ngh pr list --draft\n\n# Create pull request\ngh pr create\ngh pr create --title "Add user authentication" --body "Implements JWT-based auth"\ngh pr create --draft\ngh pr create --base development --head feature/auth\ngh pr create --assignee username --reviewer team:developers\n\n# View pull request\ngh pr view 456\ngh pr view 456 --web\n\n# Checkout pull request locally\ngh pr checkout 456\ngh pr checkout https://github.com/owner/repo/pull/456\n\n# Edit pull request\ngh pr edit 456\ngh pr edit 456 --title "Updated title"\ngh pr edit 456 --add-reviewer username\ngh pr edit 456 --remove-assignee old-user\n\n# Review pull request\ngh pr review 456\ngh pr review 456 --approve\ngh pr review 456 --request-changes --body "Please fix the test failures"\ngh pr review 456 --comment --body "Looks good overall"\n\n# Merge pull request\ngh pr merge 456\ngh pr merge 456 --merge      # Create merge commit\ngh pr merge 456 --squash     # Squash and merge\ngh pr merge 456 --rebase     # Rebase and merge\ngh pr merge 456 --delete-branch\n\n# Close pull request\ngh pr close 456\n\n# Reopen pull request\ngh pr reopen 456\n\n# Mark as ready for review\ngh pr ready 456\n\n# Convert to draft\ngh pr ready 456 --undo\n\n# Check status\ngh pr status\ngh pr checks 456\n\n# Sync with upstream\ngh pr sync 456\n'})}),"\n",(0,i.jsx)(n.h3,{id:"44-github-actions-integration",children:"4.4 GitHub Actions Integration"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# List workflow runs\ngh run list\ngh run list --limit 50\ngh run list --workflow build.yml\ngh run list --status failure\ngh run list --branch main\n\n# View workflow run\ngh run view 12345\ngh run view 12345 --web\n\n# View run logs\ngh run view 12345 --log\ngh run view 12345 --log-failed\n\n# Download artifacts\ngh run download 12345\ngh run download 12345 --name build-artifacts\n\n# Re-run workflow\ngh run rerun 12345\ngh run rerun 12345 --failed\n\n# Cancel workflow run\ngh run cancel 12345\n\n# Watch workflow run\ngh run watch 12345\n\n# List workflows\ngh workflow list\n\n# View workflow\ngh workflow view build.yml\n\n# Run workflow manually\ngh workflow run build.yml\ngh workflow run build.yml --ref feature-branch\ngh workflow run deploy.yml -f environment=production -f version=v1.2.3\n\n# Enable/disable workflow\ngh workflow enable build.yml\ngh workflow disable build.yml\n\n# Delete workflow runs\ngh api -X DELETE /repos/owner/repo/actions/runs/12345\n"})}),"\n",(0,i.jsx)(n.h3,{id:"45-release-management",children:"4.5 Release Management"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# List releases\ngh release list\ngh release list --limit 20\n\n# View release\ngh release view v1.0.0\ngh release view latest\n\n# Create release\ngh release create v1.2.0\ngh release create v1.2.0 --title "Version 1.2.0" --notes "Bug fixes and improvements"\ngh release create v1.2.0 --draft\ngh release create v1.2.0 --prerelease\ngh release create v1.2.0 --generate-notes\n\n# Upload assets to release\ngh release create v1.2.0 build/app.zip build/app.tar.gz\ngh release upload v1.2.0 build/additional-file.zip\n\n# Edit release\ngh release edit v1.2.0\ngh release edit v1.2.0 --title "Updated Title"\ngh release edit v1.2.0 --notes "Updated release notes"\n\n# Delete release\ngh release delete v1.2.0\ngh release delete v1.2.0 --yes\n\n# Download release assets\ngh release download v1.2.0\ngh release download v1.2.0 --pattern "*.zip"\ngh release download --repo owner/repo v1.2.0\n'})}),"\n",(0,i.jsx)(n.h3,{id:"46-advanced-cli-operations",children:"4.6 Advanced CLI Operations"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Repository management\ngh repo sync owner/fork\ngh repo rename old-name new-name\ngh repo transfer new-owner\n\n# Organization management\ngh org list\ngh team list --org myorg\ngh team create "Development Team" --org myorg\ngh team add-member development username --org myorg\n\n# Project management\ngh project list --owner myorg\ngh project create --title "Q1 Planning" --body "Planning for Q1"\n\n# Search functionality\ngh search repos "language:javascript stars:>1000"\ngh search code "function authenticate" --repo owner/repo\ngh search commits "author:username" --repo owner/repo\ngh search users "location:Seattle"\n\n# API access\ngh api user\ngh api repos/owner/repo/issues\ngh api graphql -f query=\'query {viewer {login}}\'\n\n# Extensions\ngh extension list\ngh extension install owner/gh-extension\ngh extension upgrade gh-extension\ngh extension remove gh-extension\n\n# Aliases\ngh alias set pv \'pr view\'\ngh alias set co \'pr checkout\'\ngh alias list\ngh alias delete pv\n\n# Environment management\ngh environment list\ngh environment create production --protection-rules\ngh environment delete staging\n\n# Secrets management\ngh secret set DATABASE_URL --env production\ngh secret list --env production\ngh secret delete OLD_SECRET --env production\n'})}),"\n",(0,i.jsx)(n.h2,{id:"5-github-actions-automation-mastery",children:"5. GitHub Actions: Automation Mastery"}),"\n",(0,i.jsx)(n.admonition,{title:"Actions Prerequisites",type:"note",children:(0,i.jsxs)(n.p,{children:["GitHub Actions examples require proper repository permissions and runner availability. Ensure workflows are placed in ",(0,i.jsx)(n.code,{children:".github/workflows/"})," directory. Replace placeholder values (repository names, secrets, environment variables) with your specific configuration."]})}),"\n",(0,i.jsx)(n.p,{children:"GitHub Actions provides comprehensive automation capabilities for continuous integration, deployment, and custom workflows."}),"\n",(0,i.jsx)(n.h3,{id:"51-workflow-fundamentals",children:"5.1 Workflow Fundamentals"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"# Basic workflow structure (.github/workflows/ci.yml)\nname: Continuous Integration\n\n# Trigger configuration\non:\n  push:\n    branches: [ main, develop ]\n  pull_request:\n    branches: [ main ]\n  schedule:\n    - cron: '0 2 * * 1'  # Weekly on Monday at 2 AM\n  workflow_dispatch:     # Manual trigger\n\n# Environment variables\nenv:\n  NODE_VERSION: '18'\n  REGISTRY: ghcr.io\n\n# Job definitions\njobs:\n  test:\n    name: Run Tests\n    runs-on: ubuntu-latest\n    \n    # Service containers\n    services:\n      postgres:\n        image: postgres:13\n        env:\n          POSTGRES_PASSWORD: postgres\n        options: >-\n          --health-cmd pg_isready\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n    \n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n        with:\n          fetch-depth: 0\n      \n      - name: Setup Node.js\n        uses: actions/setup-node@v4\n        with:\n          node-version: ${{ env.NODE_VERSION }}\n          cache: 'npm'\n      \n      - name: Install dependencies\n        run: npm ci\n      \n      - name: Run linting\n        run: npm run lint\n      \n      - name: Run tests\n        run: npm test\n        env:\n          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test\n      \n      - name: Upload coverage reports\n        uses: codecov/codecov-action@v3\n        with:\n          file: ./coverage/lcov.info\n          fail_ci_if_error: true\n\n  build:\n    name: Build Application\n    runs-on: ubuntu-latest\n    needs: test\n    \n    outputs:\n      image-tag: ${{ steps.meta.outputs.tags }}\n      image-digest: ${{ steps.build.outputs.digest }}\n    \n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n      \n      - name: Setup Docker Buildx\n        uses: docker/setup-buildx-action@v3\n      \n      - name: Login to Container Registry\n        uses: docker/login-action@v3\n        with:\n          registry: ${{ env.REGISTRY }}\n          username: ${{ github.actor }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n      \n      - name: Extract metadata\n        id: meta\n        uses: docker/metadata-action@v5\n        with:\n          images: ${{ env.REGISTRY }}/${{ github.repository }}\n          tags: |\n            type=ref,event=branch\n            type=ref,event=pr\n            type=sha,prefix={{branch}}-\n            type=raw,value=latest,enable={{is_default_branch}}\n      \n      - name: Build and push Docker image\n        id: build\n        uses: docker/build-push-action@v5\n        with:\n          context: .\n          push: true\n          tags: ${{ steps.meta.outputs.tags }}\n          labels: ${{ steps.meta.outputs.labels }}\n          cache-from: type=gha\n          cache-to: type=gha,mode=max\n"})}),"\n",(0,i.jsx)(n.h3,{id:"52-advanced-workflow-patterns",children:"5.2 Advanced Workflow Patterns"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"# Matrix strategy for multi-environment testing\nname: Cross-Platform Testing\n\non: [push, pull_request]\n\njobs:\n  test:\n    name: Test on ${{ matrix.os }} with Node ${{ matrix.node-version }}\n    runs-on: ${{ matrix.os }}\n    \n    strategy:\n      fail-fast: false\n      matrix:\n        os: [ubuntu-latest, windows-latest, macos-latest]\n        node-version: [16, 18, 20]\n        include:\n          - os: ubuntu-latest\n            node-version: 21\n            experimental: true\n        exclude:\n          - os: windows-latest\n            node-version: 16\n    \n    continue-on-error: ${{ matrix.experimental || false }}\n    \n    steps:\n      - uses: actions/checkout@v4\n      - name: Setup Node.js ${{ matrix.node-version }}\n        uses: actions/setup-node@v4\n        with:\n          node-version: ${{ matrix.node-version }}\n          cache: 'npm'\n      \n      - name: Install dependencies\n        run: npm ci\n      \n      - name: Run tests\n        run: npm test\n\n# Conditional workflow execution\nname: Conditional Deployment\n\non:\n  push:\n    branches: [main]\n    paths:\n      - 'src/**'\n      - 'package*.json'\n      - '.github/workflows/**'\n\njobs:\n  detect-changes:\n    runs-on: ubuntu-latest\n    outputs:\n      backend: ${{ steps.changes.outputs.backend }}\n      frontend: ${{ steps.changes.outputs.frontend }}\n      docs: ${{ steps.changes.outputs.docs }}\n    steps:\n      - uses: actions/checkout@v4\n      - uses: dorny/paths-filter@v2\n        id: changes\n        with:\n          filters: |\n            backend:\n              - 'api/**'\n              - 'server/**'\n            frontend:\n              - 'src/**'\n              - 'public/**'\n            docs:\n              - 'docs/**'\n              - '*.md'\n\n  deploy-backend:\n    needs: detect-changes\n    if: needs.detect-changes.outputs.backend == 'true'\n    runs-on: ubuntu-latest\n    steps:\n      - name: Deploy Backend\n        run: echo \"Deploying backend changes\"\n\n  deploy-frontend:\n    needs: detect-changes\n    if: needs.detect-changes.outputs.frontend == 'true'\n    runs-on: ubuntu-latest\n    steps:\n      - name: Deploy Frontend\n        run: echo \"Deploying frontend changes\"\n\n  update-docs:\n    needs: detect-changes\n    if: needs.detect-changes.outputs.docs == 'true'\n    runs-on: ubuntu-latest\n    steps:\n      - name: Update Documentation\n        run: echo \"Updating documentation\"\n"})}),"\n",(0,i.jsx)(n.h3,{id:"53-reusable-workflows-and-composite-actions",children:"5.3 Reusable Workflows and Composite Actions"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"# Reusable workflow (.github/workflows/reusable-build.yml)\nname: Reusable Build Workflow\n\non:\n  workflow_call:\n    inputs:\n      environment:\n        required: true\n        type: string\n      node-version:\n        required: false\n        type: string\n        default: '18'\n      deploy:\n        required: false\n        type: boolean\n        default: false\n    secrets:\n      DEPLOY_TOKEN:\n        required: false\n    outputs:\n      build-version:\n        description: \"The version that was built\"\n        value: ${{ jobs.build.outputs.version }}\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    environment: ${{ inputs.environment }}\n    outputs:\n      version: ${{ steps.version.outputs.version }}\n    \n    steps:\n      - uses: actions/checkout@v4\n      \n      - name: Setup Node.js\n        uses: actions/setup-node@v4\n        with:\n          node-version: ${{ inputs.node-version }}\n          cache: 'npm'\n      \n      - name: Install dependencies\n        run: npm ci\n      \n      - name: Build application\n        run: npm run build\n      \n      - name: Get version\n        id: version\n        run: echo \"version=$(npm run version --silent)\" >> $GITHUB_OUTPUT\n      \n      - name: Deploy\n        if: inputs.deploy\n        run: |\n          echo \"Deploying to ${{ inputs.environment }}\"\n          # Use deployment token if provided\n          echo \"Token available: ${{ secrets.DEPLOY_TOKEN != '' }}\"\n\n# Composite action (.github/actions/setup-project/action.yml)\nname: 'Setup Project Environment'\ndescription: 'Setup Node.js, install dependencies, and configure project'\n\ninputs:\n  node-version:\n    description: 'Node.js version to use'\n    required: false\n    default: '18'\n  cache-key-suffix:\n    description: 'Additional cache key suffix'\n    required: false\n    default: ''\n\noutputs:\n  cache-hit:\n    description: 'Whether dependencies were restored from cache'\n    value: ${{ steps.cache.outputs.cache-hit }}\n\nruns:\n  using: 'composite'\n  steps:\n    - name: Setup Node.js\n      uses: actions/setup-node@v4\n      with:\n        node-version: ${{ inputs.node-version }}\n    \n    - name: Cache dependencies\n      id: cache\n      uses: actions/cache@v3\n      with:\n        path: |\n          ~/.npm\n          node_modules\n        key: ${{ runner.os }}-node-${{ inputs.node-version }}-${{ hashFiles('**/package-lock.json') }}-${{ inputs.cache-key-suffix }}\n        restore-keys: |\n          ${{ runner.os }}-node-${{ inputs.node-version }}-\n    \n    - name: Install dependencies\n      if: steps.cache.outputs.cache-hit != 'true'\n      shell: bash\n      run: npm ci\n    \n    - name: Verify installation\n      shell: bash\n      run: npm list --depth=0\n\n# Using reusable workflow\nname: Main CI/CD Pipeline\n\non:\n  push:\n    branches: [main]\n  pull_request:\n    branches: [main]\n\njobs:\n  build-staging:\n    uses: ./.github/workflows/reusable-build.yml\n    with:\n      environment: staging\n      node-version: '18'\n      deploy: true\n    secrets:\n      DEPLOY_TOKEN: ${{ secrets.STAGING_DEPLOY_TOKEN }}\n  \n  build-production:\n    if: github.ref == 'refs/heads/main'\n    needs: build-staging\n    uses: ./.github/workflows/reusable-build.yml\n    with:\n      environment: production\n      node-version: '18'\n      deploy: true\n    secrets:\n      DEPLOY_TOKEN: ${{ secrets.PRODUCTION_DEPLOY_TOKEN }}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"54-security-and-secrets-management",children:"5.4 Security and Secrets Management"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"name: Secure Deployment Pipeline\n\non:\n  push:\n    branches: [main]\n\njobs:\n  security-scan:\n    runs-on: ubuntu-latest\n    permissions:\n      security-events: write\n      contents: read\n    \n    steps:\n      - uses: actions/checkout@v4\n      \n      - name: Run Trivy vulnerability scanner\n        uses: aquasecurity/trivy-action@master\n        with:\n          scan-type: 'fs'\n          scan-ref: '.'\n          format: 'sarif'\n          output: 'trivy-results.sarif'\n      \n      - name: Upload Trivy scan results\n        uses: github/codeql-action/upload-sarif@v2\n        with:\n          sarif_file: 'trivy-results.sarif'\n      \n      - name: Dependency Review\n        uses: actions/dependency-review-action@v3\n        with:\n          fail-on-severity: moderate\n\n  deploy:\n    needs: security-scan\n    runs-on: ubuntu-latest\n    environment: production\n    \n    permissions:\n      id-token: write\n      contents: read\n    \n    steps:\n      - uses: actions/checkout@v4\n      \n      - name: Configure AWS credentials\n        uses: aws-actions/configure-aws-credentials@v4\n        with:\n          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}\n          aws-region: us-east-1\n      \n      - name: Deploy with secrets\n        env:\n          DATABASE_URL: ${{ secrets.DATABASE_URL }}\n          API_KEY: ${{ secrets.API_KEY }}\n          # Using GitHub App for authentication\n          GH_TOKEN: ${{ steps.app-token.outputs.token }}\n        run: |\n          echo \"Deploying with secure credentials\"\n          # Mask sensitive output\n          echo \"::add-mask::$DATABASE_URL\"\n          echo \"Database configured\"\n\n  notify:\n    needs: [security-scan, deploy]\n    runs-on: ubuntu-latest\n    if: always()\n    \n    steps:\n      - name: Notify Slack\n        uses: 8398a7/action-slack@v3\n        with:\n          status: ${{ job.status }}\n          channel: '#deployments'\n          webhook_url: ${{ secrets.SLACK_WEBHOOK }}\n        env:\n          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"55-self-hosted-runners-and-enterprise-features",children:"5.5 Self-Hosted Runners and Enterprise Features"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'name: Enterprise Deployment\n\non:\n  push:\n    branches: [main]\n\njobs:\n  build-on-self-hosted:\n    runs-on: [self-hosted, linux, x64, gpu]\n    \n    steps:\n      - uses: actions/checkout@v4\n        with:\n          lfs: true\n      \n      - name: Setup custom environment\n        run: |\n          source /opt/company/setup.sh\n          echo "CUSTOM_PATH=/opt/company/bin" >> $GITHUB_ENV\n      \n      - name: Build with GPU acceleration\n        run: |\n          export PATH=$CUSTOM_PATH:$PATH\n          make build-gpu\n      \n      - name: Run performance tests\n        run: |\n          ./performance-tests --gpu --threads=16\n      \n      - name: Archive artifacts\n        uses: actions/upload-artifact@v3\n        with:\n          name: gpu-build\n          path: |\n            dist/\n            reports/\n          retention-days: 30\n\n  compliance-check:\n    runs-on: ubuntu-latest\n    \n    steps:\n      - uses: actions/checkout@v4\n      \n      - name: SAST Scanning\n        uses: github/super-linter@v4\n        env:\n          DEFAULT_BRANCH: main\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          VALIDATE_ALL_CODEBASE: false\n      \n      - name: License compliance\n        uses: fossa-contrib/fossa-action@v2\n        with:\n          api-key: ${{ secrets.FOSSA_API_KEY }}\n      \n      - name: Generate SBOM\n        uses: anchore/sbom-action@v0\n        with:\n          format: spdx-json\n          output-file: sbom.spdx.json\n      \n      - name: Upload SBOM\n        uses: actions/upload-artifact@v3\n        with:\n          name: sbom\n          path: sbom.spdx.json\n\n  deploy-to-kubernetes:\n    needs: [build-on-self-hosted, compliance-check]\n    runs-on: ubuntu-latest\n    environment: production\n    \n    steps:\n      - uses: actions/checkout@v4\n      \n      - name: Setup kubectl\n        uses: azure/setup-kubectl@v3\n        with:\n          version: \'v1.28.0\'\n      \n      - name: Configure kubeconfig\n        run: |\n          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > kubeconfig\n          export KUBECONFIG=kubeconfig\n      \n      - name: Deploy to Kubernetes\n        run: |\n          kubectl apply -f k8s/\n          kubectl rollout status deployment/app -n production\n          kubectl get services -n production\n'})}),"\n",(0,i.jsx)(n.h3,{id:"56-workflow-debugging-and-monitoring",children:"5.6 Workflow Debugging and Monitoring"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'name: Debug and Monitor Workflows\n\non:\n  workflow_dispatch:\n    inputs:\n      debug_enabled:\n        description: \'Enable debug logging\'\n        required: false\n        default: \'false\'\n        type: boolean\n      environment:\n        description: \'Target environment\'\n        required: true\n        default: \'staging\'\n        type: choice\n        options:\n          - staging\n          - production\n\njobs:\n  debug-info:\n    runs-on: ubuntu-latest\n    \n    steps:\n      - name: Dump GitHub context\n        if: inputs.debug_enabled\n        env:\n          GITHUB_CONTEXT: ${{ toJson(github) }}\n        run: echo "$GITHUB_CONTEXT"\n      \n      - name: Dump job context\n        if: inputs.debug_enabled\n        env:\n          JOB_CONTEXT: ${{ toJson(job) }}\n        run: echo "$JOB_CONTEXT"\n      \n      - name: Dump runner context\n        if: inputs.debug_enabled\n        env:\n          RUNNER_CONTEXT: ${{ toJson(runner) }}\n        run: echo "$RUNNER_CONTEXT"\n      \n      - name: Enable debug logging\n        if: inputs.debug_enabled\n        run: |\n          echo "ACTIONS_STEP_DEBUG=true" >> $GITHUB_ENV\n          echo "ACTIONS_RUNNER_DEBUG=true" >> $GITHUB_ENV\n\n  monitor-performance:\n    runs-on: ubuntu-latest\n    \n    steps:\n      - name: Start timing\n        run: echo "START_TIME=$(date +%s)" >> $GITHUB_ENV\n      \n      - name: Simulate work\n        run: |\n          echo "Performing deployment to ${{ inputs.environment }}"\n          sleep 10\n      \n      - name: Calculate duration\n        run: |\n          END_TIME=$(date +%s)\n          DURATION=$((END_TIME - START_TIME))\n          echo "Deployment took $DURATION seconds"\n          echo "::notice title=Deployment Duration::Deployment to ${{ inputs.environment }} completed in $DURATION seconds"\n      \n      - name: Send metrics to monitoring\n        run: |\n          curl -X POST "${{ secrets.METRICS_ENDPOINT }}" \\\n            -H "Authorization: Bearer ${{ secrets.METRICS_TOKEN }}" \\\n            -H "Content-Type: application/json" \\\n            -d \'{\n              "metric": "github_actions_duration",\n              "value": \'$DURATION\',\n              "tags": {\n                "workflow": "${{ github.workflow }}",\n                "environment": "${{ inputs.environment }}",\n                "repository": "${{ github.repository }}"\n              }\n            }\'\n\n  workflow-summary:\n    needs: [debug-info, monitor-performance]\n    runs-on: ubuntu-latest\n    if: always()\n    \n    steps:\n      - name: Generate workflow summary\n        run: |\n          echo "# Workflow Summary" >> $GITHUB_STEP_SUMMARY\n          echo "" >> $GITHUB_STEP_SUMMARY\n          echo "## Parameters" >> $GITHUB_STEP_SUMMARY\n          echo "- Environment: ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY\n          echo "- Debug Enabled: ${{ inputs.debug_enabled }}" >> $GITHUB_STEP_SUMMARY\n          echo "- Triggered by: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY\n          echo "" >> $GITHUB_STEP_SUMMARY\n          echo "## Job Results" >> $GITHUB_STEP_SUMMARY\n          echo "- Debug Info: ${{ needs.debug-info.result }}" >> $GITHUB_STEP_SUMMARY\n          echo "- Performance Monitor: ${{ needs.monitor-performance.result }}" >> $GITHUB_STEP_SUMMARY\n'})}),"\n",(0,i.jsx)(n.h2,{id:"6-github-api-integration",children:"6. GitHub API Integration"}),"\n",(0,i.jsx)(n.admonition,{title:"API Prerequisites",type:"note",children:(0,i.jsx)(n.p,{children:"GitHub API examples require proper authentication tokens with appropriate scopes. Replace placeholder values (usernames, repository names, tokens) with your actual values. Rate limiting applies to all API calls (5000 requests/hour for authenticated requests)."})}),"\n",(0,i.jsx)(n.p,{children:"GitHub's REST and GraphQL APIs provide programmatic access to all platform features, enabling custom integrations and automation."}),"\n",(0,i.jsx)(n.h3,{id:"61-rest-api-fundamentals",children:"6.1 REST API Fundamentals"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Authentication methods\nexport GITHUB_TOKEN="your_personal_access_token"\n\n# Basic API requests with curl\ncurl -H "Authorization: Bearer $GITHUB_TOKEN" \\\n     -H "Accept: application/vnd.github+json" \\\n     https://api.github.com/user\n\n# Get user information\ncurl -H "Authorization: Bearer $GITHUB_TOKEN" \\\n     https://api.github.com/users/username\n\n# List repositories\ncurl -H "Authorization: Bearer $GITHUB_TOKEN" \\\n     https://api.github.com/user/repos?type=owner&sort=updated&per_page=50\n\n# Get repository information\ncurl -H "Authorization: Bearer $GITHUB_TOKEN" \\\n     https://api.github.com/repos/owner/repository\n\n# List repository issues\ncurl -H "Authorization: Bearer $GITHUB_TOKEN" \\\n     https://api.github.com/repos/owner/repository/issues?state=open&labels=bug\n\n# Create an issue\ncurl -X POST \\\n     -H "Authorization: Bearer $GITHUB_TOKEN" \\\n     -H "Accept: application/vnd.github+json" \\\n     https://api.github.com/repos/owner/repository/issues \\\n     -d \'{\n       "title": "API Integration Bug",\n       "body": "There is an issue with the API integration",\n       "assignees": ["username"],\n       "labels": ["bug", "priority-high"]\n     }\'\n\n# Update an issue\ncurl -X PATCH \\\n     -H "Authorization: Bearer $GITHUB_TOKEN" \\\n     -H "Accept: application/vnd.github+json" \\\n     https://api.github.com/repos/owner/repository/issues/1 \\\n     -d \'{\n       "state": "closed",\n       "state_reason": "completed"\n     }\'\n\n# List pull requests\ncurl -H "Authorization: Bearer $GITHUB_TOKEN" \\\n     https://api.github.com/repos/owner/repository/pulls?state=open\n\n# Create a pull request\ncurl -X POST \\\n     -H "Authorization: Bearer $GITHUB_TOKEN" \\\n     -H "Accept: application/vnd.github+json" \\\n     https://api.github.com/repos/owner/repository/pulls \\\n     -d \'{\n       "title": "Add API integration feature",\n       "body": "This PR adds API integration functionality",\n       "head": "feature/api-integration",\n       "base": "main"\n     }\'\n'})}),"\n",(0,i.jsx)(n.h3,{id:"62-advanced-rest-api-operations",children:"6.2 Advanced REST API Operations"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Repository management\n# Create repository\ncurl -X POST \\\n     -H "Authorization: Bearer $GITHUB_TOKEN" \\\n     -H "Accept: application/vnd.github+json" \\\n     https://api.github.com/user/repos \\\n     -d \'{\n       "name": "new-repository",\n       "description": "A new repository created via API",\n       "private": false,\n       "has_issues": true,\n       "has_projects": true,\n       "has_wiki": false\n     }\'\n\n# Update repository settings\ncurl -X PATCH \\\n     -H "Authorization: Bearer $GITHUB_TOKEN" \\\n     -H "Accept: application/vnd.github+json" \\\n     https://api.github.com/repos/owner/repository \\\n     -d \'{\n       "description": "Updated description",\n       "has_issues": true,\n       "has_projects": false,\n       "default_branch": "main"\n     }\'\n\n# Manage repository collaborators\ncurl -X PUT \\\n     -H "Authorization: Bearer $GITHUB_TOKEN" \\\n     -H "Accept: application/vnd.github+json" \\\n     https://api.github.com/repos/owner/repository/collaborators/username \\\n     -d \'{"permission": "push"}\'\n\n# Branch protection\ncurl -X PUT \\\n     -H "Authorization: Bearer $GITHUB_TOKEN" \\\n     -H "Accept: application/vnd.github+json" \\\n     https://api.github.com/repos/owner/repository/branches/main/protection \\\n     -d \'{\n       "required_status_checks": {\n         "strict": true,\n         "contexts": ["ci/build", "ci/test"]\n       },\n       "enforce_admins": true,\n       "required_pull_request_reviews": {\n         "required_approving_review_count": 2,\n         "dismiss_stale_reviews": true\n       },\n       "restrictions": null\n     }\'\n\n# Webhooks management\ncurl -X POST \\\n     -H "Authorization: Bearer $GITHUB_TOKEN" \\\n     -H "Accept: application/vnd.github+json" \\\n     https://api.github.com/repos/owner/repository/hooks \\\n     -d \'{\n       "name": "web",\n       "active": true,\n       "events": ["push", "pull_request"],\n       "config": {\n         "url": "https://example.com/webhook",\n         "content_type": "json",\n         "insecure_ssl": "0",\n         "secret": "webhook-secret"\n       }\n     }\'\n\n# Release management\ncurl -X POST \\\n     -H "Authorization: Bearer $GITHUB_TOKEN" \\\n     -H "Accept: application/vnd.github+json" \\\n     https://api.github.com/repos/owner/repository/releases \\\n     -d \'{\n       "tag_name": "v1.0.0",\n       "target_commitish": "main",\n       "name": "v1.0.0",\n       "body": "Release notes for version 1.0.0",\n       "draft": false,\n       "prerelease": false\n     }\'\n\n# Upload release asset\ncurl -X POST \\\n     -H "Authorization: Bearer $GITHUB_TOKEN" \\\n     -H "Content-Type: application/zip" \\\n     --data-binary @release.zip \\\n     "https://uploads.github.com/repos/owner/repository/releases/12345/assets?name=release.zip"\n'})}),"\n",(0,i.jsx)(n.h3,{id:"63-graphql-api-operations",children:"6.3 GraphQL API Operations"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Basic GraphQL query\ncurl -X POST \\\n     -H "Authorization: Bearer $GITHUB_TOKEN" \\\n     -H "Content-Type: application/json" \\\n     https://api.github.com/graphql \\\n     -d \'{\n       "query": "query { viewer { login email } }"\n     }\'\n\n# Repository information with GraphQL\ncurl -X POST \\\n     -H "Authorization: Bearer $GITHUB_TOKEN" \\\n     -H "Content-Type: application/json" \\\n     https://api.github.com/graphql \\\n     -d \'{\n       "query": "query($owner: String!, $name: String!) {\n         repository(owner: $owner, name: $name) {\n           name\n           description\n           stargazerCount\n           forkCount\n           issues(states: OPEN) {\n             totalCount\n           }\n           pullRequests(states: OPEN) {\n             totalCount\n           }\n           defaultBranchRef {\n             name\n           }\n         }\n       }",\n       "variables": {\n         "owner": "owner",\n         "name": "repository"\n       }\n     }\'\n\n# Complex query with pagination\ncurl -X POST \\\n     -H "Authorization: Bearer $GITHUB_TOKEN" \\\n     -H "Content-Type: application/json" \\\n     https://api.github.com/graphql \\\n     -d \'{\n       "query": "query($owner: String!, $name: String!, $cursor: String) {\n         repository(owner: $owner, name: $name) {\n           issues(first: 10, after: $cursor, states: OPEN) {\n             pageInfo {\n               hasNextPage\n               endCursor\n             }\n             nodes {\n               number\n               title\n               author {\n                 login\n               }\n               createdAt\n               labels(first: 5) {\n                 nodes {\n                   name\n                 }\n               }\n             }\n           }\n         }\n       }",\n       "variables": {\n         "owner": "owner",\n         "name": "repository",\n         "cursor": null\n       }\n     }\'\n\n# GitHub Projects v2 query\ncurl -X POST \\\n     -H "Authorization: Bearer $GITHUB_TOKEN" \\\n     -H "Content-Type: application/json" \\\n     https://api.github.com/graphql \\\n     -d \'{\n       "query": "query($org: String!, $number: Int!) {\n         organization(login: $org) {\n           projectV2(number: $number) {\n             id\n             title\n             fields(first: 20) {\n               nodes {\n                 ... on ProjectV2Field {\n                   id\n                   name\n                 }\n                 ... on ProjectV2SingleSelectField {\n                   id\n                   name\n                   options {\n                     id\n                     name\n                   }\n                 }\n               }\n             }\n             items(first: 50) {\n               nodes {\n                 id\n                 content {\n                   ... on Issue {\n                     number\n                     title\n                     state\n                   }\n                   ... on PullRequest {\n                     number\n                     title\n                     state\n                   }\n                 }\n               }\n             }\n           }\n         }\n       }",\n       "variables": {\n         "org": "organization",\n         "number": 1\n       }\n     }\'\n\n# Mutation example - Create issue\ncurl -X POST \\\n     -H "Authorization: Bearer $GITHUB_TOKEN" \\\n     -H "Content-Type: application/json" \\\n     https://api.github.com/graphql \\\n     -d \'{\n       "query": "mutation($repositoryId: ID!, $title: String!, $body: String!) {\n         createIssue(input: {\n           repositoryId: $repositoryId,\n           title: $title,\n           body: $body\n         }) {\n           issue {\n             number\n             title\n             url\n           }\n         }\n       }",\n       "variables": {\n         "repositoryId": "MDEwOlJlcG9zaXRvcnk=",\n         "title": "GraphQL API Issue",\n         "body": "This issue was created using GraphQL API"\n       }\n     }\'\n'})}),"\n",(0,i.jsx)(n.h3,{id:"64-python-api-integration-examples",children:"6.4 Python API Integration Examples"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'#!/usr/bin/env python3\n"""\nGitHub API Integration Examples using Python\n"""\nimport requests\nimport json\nimport os\nfrom typing import Dict, List, Optional\n\nclass GitHubAPI:\n    def __init__(self, token: str, base_url: str = "https://api.github.com"):\n        self.token = token\n        self.base_url = base_url\n        self.session = requests.Session()\n        self.session.headers.update({\n            "Authorization": f"Bearer {token}",\n            "Accept": "application/vnd.github+json",\n            "X-GitHub-Api-Version": "2022-11-28"\n        })\n    \n    def get_user(self, username: Optional[str] = None) -> Dict:\n        """Get user information"""\n        endpoint = f"/users/{username}" if username else "/user"\n        response = self.session.get(f"{self.base_url}{endpoint}")\n        response.raise_for_status()\n        return response.json()\n    \n    def list_repositories(self, username: Optional[str] = None, \n                         type: str = "owner", sort: str = "updated") -> List[Dict]:\n        """List repositories for user"""\n        if username:\n            endpoint = f"/users/{username}/repos"\n        else:\n            endpoint = "/user/repos"\n        \n        params = {"type": type, "sort": sort, "per_page": 100}\n        response = self.session.get(f"{self.base_url}{endpoint}", params=params)\n        response.raise_for_status()\n        return response.json()\n    \n    def create_repository(self, name: str, description: str = "", \n                         private: bool = False, **kwargs) -> Dict:\n        """Create a new repository"""\n        data = {\n            "name": name,\n            "description": description,\n            "private": private,\n            **kwargs\n        }\n        response = self.session.post(f"{self.base_url}/user/repos", json=data)\n        response.raise_for_status()\n        return response.json()\n    \n    def list_issues(self, owner: str, repo: str, state: str = "open", \n                   labels: Optional[List[str]] = None) -> List[Dict]:\n        """List repository issues"""\n        endpoint = f"/repos/{owner}/{repo}/issues"\n        params = {"state": state, "per_page": 100}\n        if labels:\n            params["labels"] = ",".join(labels)\n        \n        response = self.session.get(f"{self.base_url}{endpoint}", params=params)\n        response.raise_for_status()\n        return response.json()\n    \n    def create_issue(self, owner: str, repo: str, title: str, body: str = "", \n                    assignees: Optional[List[str]] = None, \n                    labels: Optional[List[str]] = None) -> Dict:\n        """Create a new issue"""\n        data = {\n            "title": title,\n            "body": body\n        }\n        if assignees:\n            data["assignees"] = assignees\n        if labels:\n            data["labels"] = labels\n        \n        endpoint = f"/repos/{owner}/{repo}/issues"\n        response = self.session.post(f"{self.base_url}{endpoint}", json=data)\n        response.raise_for_status()\n        return response.json()\n    \n    def create_pull_request(self, owner: str, repo: str, title: str, head: str, \n                           base: str, body: str = "", draft: bool = False) -> Dict:\n        """Create a pull request"""\n        data = {\n            "title": title,\n            "head": head,\n            "base": base,\n            "body": body,\n            "draft": draft\n        }\n        \n        endpoint = f"/repos/{owner}/{repo}/pulls"\n        response = self.session.post(f"{self.base_url}{endpoint}", json=data)\n        response.raise_for_status()\n        return response.json()\n    \n    def graphql_query(self, query: str, variables: Optional[Dict] = None) -> Dict:\n        """Execute GraphQL query"""\n        data = {"query": query}\n        if variables:\n            data["variables"] = variables\n        \n        response = self.session.post(f"{self.base_url}/graphql", json=data)\n        response.raise_for_status()\n        return response.json()\n\n# Usage examples\ndef main():\n    token = os.getenv("GITHUB_TOKEN")\n    if not token:\n        raise ValueError("GITHUB_TOKEN environment variable required")\n    \n    github = GitHubAPI(token)\n    \n    # Get current user\n    user = github.get_user()\n    print(f"Authenticated as: {user[\'login\']}")\n    \n    # List repositories\n    repos = github.list_repositories()\n    print(f"Found {len(repos)} repositories")\n    \n    # Create issue\n    try:\n        issue = github.create_issue(\n            owner="owner",\n            repo="repository",\n            title="API Integration Test",\n            body="This issue was created via Python API",\n            labels=["api", "test"]\n        )\n        print(f"Created issue #{issue[\'number\']}: {issue[\'title\']}")\n    except requests.HTTPError as e:\n        print(f"Failed to create issue: {e}")\n    \n    # GraphQL query example\n    query = """\n    query($owner: String!, $name: String!) {\n        repository(owner: $owner, name: $name) {\n            stargazerCount\n            forkCount\n            issues(states: OPEN) {\n                totalCount\n            }\n        }\n    }\n    """\n    variables = {"owner": "owner", "name": "repository"}\n    \n    try:\n        result = github.graphql_query(query, variables)\n        repo_data = result["data"]["repository"]\n        print(f"Repository stats: {repo_data}")\n    except requests.HTTPError as e:\n        print(f"GraphQL query failed: {e}")\n\nif __name__ == "__main__":\n    main()\n'})}),"\n",(0,i.jsx)(n.h3,{id:"65-javascriptnodejs-api-integration",children:"6.5 JavaScript/Node.js API Integration"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"#!/usr/bin/env node\n/**\n * GitHub API Integration Examples using Node.js and Octokit\n */\nconst { Octokit } = require(\"@octokit/rest\");\nconst { createAppAuth } = require(\"@octokit/auth-app\");\n\nclass GitHubAPIClient {\n    constructor(token) {\n        this.octokit = new Octokit({\n            auth: token,\n            userAgent: 'github-api-client-v1.0.0',\n        });\n    }\n\n    // Static method for GitHub App authentication\n    static async createAppClient(appId, privateKey, installationId) {\n        const octokit = new Octokit({\n            authStrategy: createAppAuth,\n            auth: {\n                appId,\n                privateKey,\n                installationId,\n            },\n        });\n        return new GitHubAPIClient(null, octokit);\n    }\n\n    constructor(token, octokitInstance = null) {\n        this.octokit = octokitInstance || new Octokit({\n            auth: token,\n            userAgent: 'github-api-client-v1.0.0',\n        });\n    }\n\n    async getCurrentUser() {\n        try {\n            const { data } = await this.octokit.rest.users.getAuthenticated();\n            return data;\n        } catch (error) {\n            console.error('Error getting current user:', error.message);\n            throw error;\n        }\n    }\n\n    async listRepositories(options = {}) {\n        const {\n            type = 'owner',\n            sort = 'updated',\n            direction = 'desc',\n            per_page = 100\n        } = options;\n\n        try {\n            const { data } = await this.octokit.rest.repos.listForAuthenticatedUser({\n                type,\n                sort,\n                direction,\n                per_page\n            });\n            return data;\n        } catch (error) {\n            console.error('Error listing repositories:', error.message);\n            throw error;\n        }\n    }\n\n    async createRepository(repoData) {\n        const {\n            name,\n            description = '',\n            private: isPrivate = false,\n            has_issues = true,\n            has_projects = true,\n            has_wiki = false,\n            auto_init = true,\n            gitignore_template,\n            license_template,\n            allow_squash_merge = true,\n            allow_merge_commit = true,\n            allow_rebase_merge = true,\n            delete_branch_on_merge = true\n        } = repoData;\n\n        try {\n            const { data } = await this.octokit.rest.repos.createForAuthenticatedUser({\n                name,\n                description,\n                private: isPrivate,\n                has_issues,\n                has_projects,\n                has_wiki,\n                auto_init,\n                gitignore_template,\n                license_template,\n                allow_squash_merge,\n                allow_merge_commit,\n                allow_rebase_merge,\n                delete_branch_on_merge\n            });\n            return data;\n        } catch (error) {\n            console.error('Error creating repository:', error.message);\n            throw error;\n        }\n    }\n\n    async createIssue(owner, repo, issueData) {\n        const {\n            title,\n            body = '',\n            assignees = [],\n            labels = [],\n            milestone\n        } = issueData;\n\n        try {\n            const { data } = await this.octokit.rest.issues.create({\n                owner,\n                repo,\n                title,\n                body,\n                assignees,\n                labels,\n                milestone\n            });\n            return data;\n        } catch (error) {\n            console.error('Error creating issue:', error.message);\n            throw error;\n        }\n    }\n\n    async createPullRequest(owner, repo, prData) {\n        const {\n            title,\n            head,\n            base,\n            body = '',\n            draft = false\n        } = prData;\n\n        try {\n            const { data } = await this.octokit.rest.pulls.create({\n                owner,\n                repo,\n                title,\n                head,\n                base,\n                body,\n                draft\n            });\n            return data;\n        } catch (error) {\n            console.error('Error creating pull request:', error.message);\n            throw error;\n        }\n    }\n\n    async setupBranchProtection(owner, repo, branch, protectionRules) {\n        const {\n            required_status_checks = null,\n            enforce_admins = true,\n            required_pull_request_reviews = null,\n            restrictions = null,\n            allow_force_pushes = false,\n            allow_deletions = false\n        } = protectionRules;\n\n        try {\n            const { data } = await this.octokit.rest.repos.updateBranchProtection({\n                owner,\n                repo,\n                branch,\n                required_status_checks,\n                enforce_admins,\n                required_pull_request_reviews,\n                restrictions,\n                allow_force_pushes,\n                allow_deletions\n            });\n            return data;\n        } catch (error) {\n            console.error('Error setting up branch protection:', error.message);\n            throw error;\n        }\n    }\n\n    async createWebhook(owner, repo, webhookConfig) {\n        const {\n            url,\n            events = ['push', 'pull_request'],\n            secret,\n            content_type = 'json',\n            insecure_ssl = false\n        } = webhookConfig;\n\n        try {\n            const { data } = await this.octokit.rest.repos.createWebhook({\n                owner,\n                repo,\n                name: 'web',\n                active: true,\n                events,\n                config: {\n                    url,\n                    content_type,\n                    secret,\n                    insecure_ssl: insecure_ssl ? '1' : '0'\n                }\n            });\n            return data;\n        } catch (error) {\n            console.error('Error creating webhook:', error.message);\n            throw error;\n        }\n    }\n\n    async createRelease(owner, repo, releaseData) {\n        const {\n            tag_name,\n            target_commitish = 'main',\n            name,\n            body = '',\n            draft = false,\n            prerelease = false,\n            generate_release_notes = false\n        } = releaseData;\n\n        try {\n            const { data } = await this.octokit.rest.repos.createRelease({\n                owner,\n                repo,\n                tag_name,\n                target_commitish,\n                name: name || tag_name,\n                body,\n                draft,\n                prerelease,\n                generate_release_notes\n            });\n            return data;\n        } catch (error) {\n            console.error('Error creating release:', error.message);\n            throw error;\n        }\n    }\n\n    async uploadReleaseAsset(owner, repo, releaseId, assetPath, assetName) {\n        const fs = require('fs');\n        const path = require('path');\n\n        try {\n            const data = fs.readFileSync(assetPath);\n            const contentType = this.getContentType(path.extname(assetName));\n\n            const { data: asset } = await this.octokit.rest.repos.uploadReleaseAsset({\n                owner,\n                repo,\n                release_id: releaseId,\n                name: assetName,\n                data,\n                headers: {\n                    'content-type': contentType,\n                    'content-length': data.length\n                }\n            });\n            return asset;\n        } catch (error) {\n            console.error('Error uploading release asset:', error.message);\n            throw error;\n        }\n    }\n\n    getContentType(extension) {\n        const contentTypes = {\n            '.zip': 'application/zip',\n            '.tar.gz': 'application/gzip',\n            '.exe': 'application/octet-stream',\n            '.dmg': 'application/octet-stream',\n            '.deb': 'application/vnd.debian.binary-package',\n            '.rpm': 'application/x-rpm'\n        };\n        return contentTypes[extension] || 'application/octet-stream';\n    }\n\n    async executeGraphQLQuery(query, variables = {}) {\n        try {\n            const response = await this.octokit.graphql(query, variables);\n            return response;\n        } catch (error) {\n            console.error('GraphQL query error:', error.message);\n            throw error;\n        }\n    }\n\n    async getProjectV2Data(org, projectNumber) {\n        const query = `\n            query($org: String!, $number: Int!) {\n                organization(login: $org) {\n                    projectV2(number: $number) {\n                        id\n                        title\n                        fields(first: 20) {\n                            nodes {\n                                ... on ProjectV2Field {\n                                    id\n                                    name\n                                }\n                                ... on ProjectV2SingleSelectField {\n                                    id\n                                    name\n                                    options {\n                                        id\n                                        name\n                                    }\n                                }\n                            }\n                        }\n                        items(first: 50) {\n                            nodes {\n                                id\n                                content {\n                                    ... on Issue {\n                                        number\n                                        title\n                                        state\n                                    }\n                                    ... on PullRequest {\n                                        number\n                                        title\n                                        state\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        `;\n\n        return await this.executeGraphQLQuery(query, { org, number: projectNumber });\n    }\n\n    async bulkOperations(operations) {\n        const results = [];\n        const errors = [];\n\n        for (const operation of operations) {\n            try {\n                const result = await this.executeOperation(operation);\n                results.push({ success: true, operation, result });\n            } catch (error) {\n                errors.push({ success: false, operation, error: error.message });\n            }\n        }\n\n        return { results, errors };\n    }\n\n    async executeOperation(operation) {\n        const { type, params } = operation;\n\n        switch (type) {\n            case 'createIssue':\n                return await this.createIssue(params.owner, params.repo, params);\n            case 'createPR':\n                return await this.createPullRequest(params.owner, params.repo, params);\n            case 'createRepo':\n                return await this.createRepository(params);\n            default:\n                throw new Error(`Unknown operation type: ${type}`);\n        }\n    }\n}\n\n// Usage examples\nasync function main() {\n    const token = process.env.GITHUB_TOKEN;\n    if (!token) {\n        console.error('GITHUB_TOKEN environment variable is required');\n        process.exit(1);\n    }\n\n    const client = new GitHubAPIClient(token);\n\n    try {\n        // Get current user\n        const user = await client.getCurrentUser();\n        console.log(`Authenticated as: ${user.login}`);\n\n        // List repositories\n        const repos = await client.listRepositories({ per_page: 10 });\n        console.log(`Found ${repos.length} repositories`);\n\n        // Create a new repository (uncomment to use)\n        /*\n        const newRepo = await client.createRepository({\n            name: 'api-test-repo',\n            description: 'Test repository created via API',\n            private: false,\n            auto_init: true,\n            gitignore_template: 'Node',\n            license_template: 'mit'\n        });\n        console.log(`Created repository: ${newRepo.html_url}`);\n        */\n\n        // Create an issue (uncomment to use)\n        /*\n        const issue = await client.createIssue('owner', 'repo', {\n            title: 'API Integration Test',\n            body: 'This issue was created using the GitHub API via Node.js',\n            labels: ['api', 'test'],\n            assignees: ['username']\n        });\n        console.log(`Created issue #${issue.number}: ${issue.title}`);\n        */\n\n        // GraphQL query example\n        const projectData = await client.getProjectV2Data('organization', 1);\n        console.log('Project data:', projectData);\n\n        // Bulk operations example\n        const operations = [\n            {\n                type: 'createIssue',\n                params: {\n                    owner: 'owner',\n                    repo: 'repo',\n                    title: 'Bulk Issue 1',\n                    body: 'Created via bulk operation'\n                }\n            },\n            {\n                type: 'createIssue',\n                params: {\n                    owner: 'owner',\n                    repo: 'repo',\n                    title: 'Bulk Issue 2',\n                    body: 'Created via bulk operation'\n                }\n            }\n        ];\n\n        const bulkResults = await client.bulkOperations(operations);\n        console.log('Bulk operation results:', bulkResults);\n\n    } catch (error) {\n        console.error('Main execution error:', error.message);\n        process.exit(1);\n    }\n}\n\n// GitHub App authentication example\nasync function githubAppExample() {\n    const appId = process.env.GITHUB_APP_ID;\n    const privateKey = process.env.GITHUB_APP_PRIVATE_KEY;\n    const installationId = process.env.GITHUB_APP_INSTALLATION_ID;\n\n    if (!appId || !privateKey || !installationId) {\n        console.error('GitHub App credentials required');\n        return;\n    }\n\n    try {\n        const appClient = await GitHubAPIClient.createAppClient(\n            appId,\n            privateKey,\n            installationId\n        );\n\n        const installations = await appClient.octokit.rest.apps.listInstallations();\n        console.log('App installations:', installations.data.length);\n\n    } catch (error) {\n        console.error('GitHub App error:', error.message);\n    }\n}\n\nif (require.main === module) {\n    main().catch(console.error);\n}\n\nmodule.exports = { GitHubAPIClient };\n"})}),"\n",(0,i.jsx)(n.h3,{id:"66-webhook-integration-and-event-processing",children:"6.6 Webhook Integration and Event Processing"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// Express.js webhook server\nconst express = require('express');\nconst crypto = require('crypto');\nconst app = express();\n\n// Middleware for webhook signature verification\nfunction verifyGitHubWebhook(secret) {\n    return (req, res, next) => {\n        const signature = req.get('X-Hub-Signature-256');\n        const payload = JSON.stringify(req.body);\n        \n        if (!signature) {\n            return res.status(401).send('No signature provided');\n        }\n\n        const expectedSignature = 'sha256=' + crypto\n            .createHmac('sha256', secret)\n            .update(payload, 'utf8')\n            .digest('hex');\n\n        if (!crypto.timingSafeEqual(\n            Buffer.from(signature),\n            Buffer.from(expectedSignature)\n        )) {\n            return res.status(401).send('Invalid signature');\n        }\n\n        next();\n    };\n}\n\napp.use(express.json());\napp.use('/webhook', verifyGitHubWebhook(process.env.WEBHOOK_SECRET));\n\n// Webhook event handlers\nconst eventHandlers = {\n    push: (payload) => {\n        console.log(`Push to ${payload.repository.full_name}`);\n        console.log(`Branch: ${payload.ref}`);\n        console.log(`Commits: ${payload.commits.length}`);\n        \n        // Trigger CI/CD pipeline\n        triggerBuild(payload);\n    },\n\n    pull_request: (payload) => {\n        const { action, pull_request, repository } = payload;\n        console.log(`PR ${action}: #${pull_request.number} in ${repository.full_name}`);\n        \n        switch (action) {\n            case 'opened':\n                handlePROpened(payload);\n                break;\n            case 'closed':\n                if (pull_request.merged) {\n                    handlePRMerged(payload);\n                }\n                break;\n            case 'synchronize':\n                handlePRUpdated(payload);\n                break;\n        }\n    },\n\n    issues: (payload) => {\n        const { action, issue, repository } = payload;\n        console.log(`Issue ${action}: #${issue.number} in ${repository.full_name}`);\n        \n        if (action === 'opened') {\n            handleNewIssue(payload);\n        }\n    },\n\n    release: (payload) => {\n        const { action, release, repository } = payload;\n        \n        if (action === 'published') {\n            console.log(`Release published: ${release.tag_name} in ${repository.full_name}`);\n            handleReleasePublished(payload);\n        }\n    }\n};\n\n// Webhook endpoint\napp.post('/webhook', (req, res) => {\n    const event = req.get('X-GitHub-Event');\n    const payload = req.body;\n\n    console.log(`Received ${event} event`);\n\n    if (eventHandlers[event]) {\n        try {\n            eventHandlers[event](payload);\n            res.status(200).send('OK');\n        } catch (error) {\n            console.error(`Error handling ${event} event:`, error);\n            res.status(500).send('Internal Server Error');\n        }\n    } else {\n        console.log(`Unhandled event: ${event}`);\n        res.status(200).send('Event not handled');\n    }\n});\n\n// Event handler implementations\nasync function triggerBuild(payload) {\n    // Example: Trigger Jenkins build\n    const { repository, ref, after: commitSha } = payload;\n    \n    // Only build main branch\n    if (ref !== 'refs/heads/main') return;\n\n    try {\n        const buildParams = {\n            repository: repository.full_name,\n            branch: 'main',\n            commit: commitSha\n        };\n\n        // Trigger build system\n        console.log('Triggering build with params:', buildParams);\n        // await triggerJenkinsBuild(buildParams);\n        \n    } catch (error) {\n        console.error('Failed to trigger build:', error);\n    }\n}\n\nasync function handlePROpened(payload) {\n    const { pull_request, repository } = payload;\n    \n    // Auto-assign reviewers based on files changed\n    const changedFiles = await getChangedFiles(repository.full_name, pull_request.number);\n    const reviewers = determineReviewers(changedFiles);\n    \n    if (reviewers.length > 0) {\n        await assignReviewers(repository.full_name, pull_request.number, reviewers);\n    }\n\n    // Add labels based on PR title or files\n    const labels = determinePRLabels(pull_request, changedFiles);\n    if (labels.length > 0) {\n        await addLabels(repository.full_name, pull_request.number, labels);\n    }\n}\n\nasync function handlePRMerged(payload) {\n    const { pull_request, repository } = payload;\n    \n    // Auto-deploy if merged to main\n    if (pull_request.base.ref === 'main') {\n        console.log('Main branch updated, triggering deployment');\n        // await triggerDeployment(repository.full_name, pull_request.merge_commit_sha);\n    }\n\n    // Close related issues\n    const issueNumbers = extractIssueNumbers(pull_request.body);\n    for (const issueNumber of issueNumbers) {\n        await closeIssue(repository.full_name, issueNumber, pull_request.number);\n    }\n}\n\nasync function handleNewIssue(payload) {\n    const { issue, repository } = payload;\n    \n    // Auto-label based on issue content\n    const labels = determineIssueLabels(issue);\n    if (labels.length > 0) {\n        await addLabels(repository.full_name, issue.number, labels);\n    }\n\n    // Auto-assign to project board\n    await addToProject(repository.full_name, issue.number, 'triage');\n}\n\nfunction determineReviewers(changedFiles) {\n    const reviewers = [];\n    \n    // CODEOWNERS-like logic\n    const rules = [\n        { pattern: /^src\\/api\\//, reviewers: ['backend-team'] },\n        { pattern: /^src\\/components\\//, reviewers: ['frontend-team'] },\n        { pattern: /^docs\\//, reviewers: ['docs-team'] },\n        { pattern: /\\.test\\.js$/, reviewers: ['qa-team'] }\n    ];\n\n    for (const file of changedFiles) {\n        for (const rule of rules) {\n            if (rule.pattern.test(file)) {\n                reviewers.push(...rule.reviewers);\n            }\n        }\n    }\n\n    return [...new Set(reviewers)]; // Remove duplicates\n}\n\nfunction determinePRLabels(pullRequest, changedFiles) {\n    const labels = [];\n    \n    // Label based on title\n    const title = pullRequest.title.toLowerCase();\n    if (title.includes('fix') || title.includes('bug')) {\n        labels.push('bug');\n    }\n    if (title.includes('feat') || title.includes('feature')) {\n        labels.push('enhancement');\n    }\n    if (title.includes('break') || title.includes('breaking')) {\n        labels.push('breaking-change');\n    }\n\n    // Label based on files changed\n    if (changedFiles.some(file => file.includes('test'))) {\n        labels.push('tests');\n    }\n    if (changedFiles.some(file => file.includes('doc'))) {\n        labels.push('documentation');\n    }\n\n    return labels;\n}\n\nfunction extractIssueNumbers(text) {\n    const matches = text.match(/(close|closes|fix|fixes|resolve|resolves)\\s+#(\\d+)/gi);\n    return matches ? matches.map(match => parseInt(match.match(/\\d+/)[0])) : [];\n}\n\n// Start server\nconst PORT = process.env.PORT || 3000;\napp.listen(PORT, () => {\n    console.log(`Webhook server listening on port ${PORT}`);\n});\n"})}),"\n",(0,i.jsx)(n.h3,{id:"67-rate-limiting-and-error-handling",children:"6.7 Rate Limiting and Error Handling"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// Advanced rate limiting and retry logic\nclass GitHubAPIWithRetry extends GitHubAPIClient {\n    constructor(token, options = {}) {\n        super(token);\n        this.maxRetries = options.maxRetries || 3;\n        this.baseDelay = options.baseDelay || 1000;\n        this.maxDelay = options.maxDelay || 30000;\n    }\n\n    async withRetry(operation, ...args) {\n        let attempt = 0;\n        \n        while (attempt <= this.maxRetries) {\n            try {\n                return await operation.apply(this, args);\n            } catch (error) {\n                if (this.shouldRetry(error, attempt)) {\n                    const delay = this.calculateDelay(attempt, error);\n                    console.log(`Attempt ${attempt + 1} failed, retrying in ${delay}ms: ${error.message}`);\n                    await this.sleep(delay);\n                    attempt++;\n                } else {\n                    throw error;\n                }\n            }\n        }\n        \n        throw new Error(`Operation failed after ${this.maxRetries} retries`);\n    }\n\n    shouldRetry(error, attempt) {\n        if (attempt >= this.maxRetries) return false;\n        \n        // Retry on rate limiting\n        if (error.status === 403 && error.message.includes('rate limit')) {\n            return true;\n        }\n        \n        // Retry on server errors\n        if (error.status >= 500) {\n            return true;\n        }\n        \n        // Retry on network errors\n        if (error.code === 'ENOTFOUND' || error.code === 'ECONNRESET') {\n            return true;\n        }\n        \n        return false;\n    }\n\n    calculateDelay(attempt, error) {\n        // Use X-RateLimit-Reset header for rate limiting\n        if (error.status === 403 && error.response?.headers?.['x-ratelimit-reset']) {\n            const resetTime = parseInt(error.response.headers['x-ratelimit-reset']) * 1000;\n            const now = Date.now();\n            const delay = Math.max(resetTime - now, 0);\n            return Math.min(delay, this.maxDelay);\n        }\n        \n        // Exponential backoff with jitter\n        const exponentialDelay = this.baseDelay * Math.pow(2, attempt);\n        const jitter = Math.random() * 0.1 * exponentialDelay;\n        return Math.min(exponentialDelay + jitter, this.maxDelay);\n    }\n\n    sleep(ms) {\n        return new Promise(resolve => setTimeout(resolve, ms));\n    }\n\n    // Override methods to add retry logic\n    async createIssue(owner, repo, issueData) {\n        return this.withRetry(super.createIssue, owner, repo, issueData);\n    }\n\n    async createPullRequest(owner, repo, prData) {\n        return this.withRetry(super.createPullRequest, owner, repo, prData);\n    }\n\n    async listRepositories(options = {}) {\n        return this.withRetry(super.listRepositories, options);\n    }\n\n    // Rate limiting monitoring\n    async checkRateLimit() {\n        try {\n            const { data } = await this.octokit.rest.rateLimit.get();\n            return {\n                core: {\n                    limit: data.rate.limit,\n                    remaining: data.rate.remaining,\n                    reset: new Date(data.rate.reset * 1000),\n                    used: data.rate.used\n                },\n                search: {\n                    limit: data.search.limit,\n                    remaining: data.search.remaining,\n                    reset: new Date(data.search.reset * 1000),\n                    used: data.search.used\n                }\n            };\n        } catch (error) {\n            console.error('Error checking rate limit:', error.message);\n            throw error;\n        }\n    }\n\n    async waitForRateLimit() {\n        const rateLimit = await this.checkRateLimit();\n        \n        if (rateLimit.core.remaining < 100) {\n            const waitTime = rateLimit.core.reset.getTime() - Date.now();\n            if (waitTime > 0) {\n                console.log(`Rate limit low (${rateLimit.core.remaining} remaining), waiting ${waitTime}ms`);\n                await this.sleep(waitTime + 1000); // Add 1 second buffer\n            }\n        }\n    }\n}\n\n// Usage with rate limiting\nasync function batchOperations() {\n    const client = new GitHubAPIWithRetry(process.env.GITHUB_TOKEN);\n    \n    // Check rate limits before starting\n    const rateLimit = await client.checkRateLimit();\n    console.log('Current rate limit:', rateLimit);\n    \n    const operations = [];\n    for (let i = 0; i < 100; i++) {\n        operations.push(async () => {\n            await client.waitForRateLimit();\n            return client.createIssue('owner', 'repo', {\n                title: `Batch Issue ${i}`,\n                body: `Created via batch operation ${i}`\n            });\n        });\n    }\n    \n    // Process in batches to respect rate limits\n    const batchSize = 10;\n    const results = [];\n    \n    for (let i = 0; i < operations.length; i += batchSize) {\n        const batch = operations.slice(i, i + batchSize);\n        const batchResults = await Promise.allSettled(\n            batch.map(op => op())\n        );\n        results.push(...batchResults);\n        \n        // Wait between batches\n        if (i + batchSize < operations.length) {\n            await client.sleep(1000);\n        }\n    }\n    \n    return results;\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"7-collaboration-workflows-and-project-management",children:"7. Collaboration Workflows and Project Management"}),"\n",(0,i.jsx)(n.admonition,{title:"Collaboration Prerequisites",type:"note",children:(0,i.jsx)(n.p,{children:"The following examples assume you have appropriate repository permissions and organization access. Replace placeholder values with your actual organization, repository, and user names. Some features require specific GitHub plan subscriptions (Team, Enterprise)."})}),"\n",(0,i.jsx)(n.p,{children:"GitHub provides comprehensive collaboration tools including pull requests, code review, project management, and team coordination features."}),"\n",(0,i.jsx)(n.h3,{id:"71-advanced-pull-request-workflows",children:"7.1 Advanced Pull Request Workflows"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Feature branch workflow with GitHub CLI\n# Create feature branch\ngit checkout -b feature/user-authentication\ngit push -u origin feature/user-authentication\n\n# Make changes and commit\necho "# User Authentication Module" > auth.js\ngit add auth.js\ngit commit -m "Add authentication module structure"\ngit push\n\n# Create draft pull request\ngh pr create --draft --title "WIP: User Authentication" \\\n  --body "## Overview\nThis PR implements user authentication using JWT tokens.\n\n## Changes\n- [ ] Add authentication middleware\n- [ ] Implement JWT token validation\n- [ ] Add user login/logout endpoints\n- [ ] Add password hashing\n\n## Testing\n- [ ] Unit tests for auth module\n- [ ] Integration tests for login flow\n- [ ] Security testing\n\n## Breaking Changes\nNone\n\n## Dependencies\n- bcrypt for password hashing\n- jsonwebtoken for JWT handling"\n\n# Continue development and push updates\necho "function authenticate() { /* TODO */ }" >> auth.js\ngit add auth.js\ngit commit -m "Add authentication function skeleton"\ngit push\n\n# Mark ready for review\ngh pr ready\n\n# Request specific reviewers\ngh pr edit --add-reviewer alice,bob\ngh pr edit --add-reviewer team:backend-team\n\n# Auto-merge when ready\ngh pr merge --auto --squash\n\n# Advanced PR operations\n# Checkout PR from fork\ngh pr checkout https://github.com/contributor/repo/pull/123\n\n# Compare PR with main\ngit diff main...feature/user-authentication\n\n# Interactive rebase before merge\ngit rebase -i main\ngit push --force-with-lease\n\n# Convert to draft if issues found\ngh pr ready --undo\n'})}),"\n",(0,i.jsx)(n.h3,{id:"72-code-review-best-practices",children:"7.2 Code Review Best Practices"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Reviewing pull requests\n# List PRs needing review\ngh pr list --assignee @me\ngh pr list --review-requested @me\n\n# Review PR with comments\ngh pr review 456 --comment --body "Overall looks good, few suggestions below"\n\n# Request changes\ngh pr review 456 --request-changes --body "Please address the following issues:\n\n1. Add error handling in auth.js line 45\n2. Missing unit tests for the new authentication function\n3. Update documentation for the new API endpoints\n\nPlease re-request review once these are addressed."\n\n# Approve PR\ngh pr review 456 --approve --body "LGTM! Great work on the authentication implementation. \n\n\u2705 Code follows our style guidelines\n\u2705 Tests are comprehensive\n\u2705 Documentation is complete\n\u2705 Security considerations addressed"\n\n# Suggest specific changes (using GitHub CLI with file editing)\n# Create suggestion comment\ncat << \'EOF\' > review-comment.md\n```suggestion\nfunction authenticate(token) {\n  if (!token) {\n    throw new Error(\'Token is required\');\n  }\n  return jwt.verify(token, process.env.JWT_SECRET);\n}```\nEOF\n\n# Bulk review workflow\ngh pr list --json number,title,author | jq -r \'.[] | "\\(.number): \\(.title) by \\(.author.login)"\'\n\n# Review multiple files\ngh pr diff 456\ngh pr view 456 --web  # Open in browser for detailed review\n'})}),"\n",(0,i.jsx)(n.h3,{id:"73-branch-protection-and-security",children:"7.3 Branch Protection and Security"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Set up comprehensive branch protection\ngh api -X PUT "/repos/owner/repo/branches/main/protection" \\\n  --field required_status_checks=\'{"strict":true,"contexts":["ci/build","ci/test","security/scan"]}\' \\\n  --field enforce_admins=true \\\n  --field required_pull_request_reviews=\'{"required_approving_review_count":2,"dismiss_stale_reviews":true,"require_code_owner_reviews":true,"require_last_push_approval":true}\' \\\n  --field restrictions=\'{"users":[],"teams":["admin-team"],"apps":[]}\'\n\n# Create CODEOWNERS file\ncat << \'EOF\' > .github/CODEOWNERS\n# Global owners\n* @admin-team\n\n# Frontend code\n/src/components/ @frontend-team\n/src/styles/ @frontend-team @design-team\n\n# Backend code\n/src/api/ @backend-team\n/src/database/ @backend-team @dba-team\n\n# Infrastructure\n/docker/ @devops-team\n/.github/workflows/ @devops-team\n/k8s/ @devops-team\n\n# Documentation\n/docs/ @docs-team\n*.md @docs-team\n\n# Security sensitive files\n/src/auth/ @security-team @backend-team\n/config/security/ @security-team\nEOF\n\ngit add .github/CODEOWNERS\ngit commit -m "Add CODEOWNERS for automated review assignment"\ngit push\n\n# Create security policy\nmkdir -p .github\ncat << \'EOF\' > .github/SECURITY.md\n# Security Policy\n\n## Supported Versions\n\n| Version | Supported          |\n| ------- | ------------------ |\n| 2.x.x   | :white_check_mark: |\n| 1.x.x   | :x:                |\n\n## Reporting a Vulnerability\n\nPlease report security vulnerabilities to security@company.com.\n\nDo not report security vulnerabilities through public GitHub issues.\nEOF\n\n# Advanced security configurations\n# Enable secret scanning\ngh api -X PATCH "/repos/owner/repo" \\\n  --field security_and_analysis=\'{"secret_scanning":{"status":"enabled"},"secret_scanning_push_protection":{"status":"enabled"}}\'\n\n# Configure dependency security updates\ngh api -X PUT "/repos/owner/repo/vulnerability-alerts"\ngh api -X PUT "/repos/owner/repo/automated-security-fixes"\n'})}),"\n",(0,i.jsx)(n.h3,{id:"74-github-projects-and-issue-management",children:"7.4 GitHub Projects and Issue Management"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Create and manage projects\ngh project create --title "Q1 2024 Roadmap" --body "Planning and tracking for Q1 objectives"\n\n# List projects\ngh project list --owner myorg\n\n# Project item management\ngh project item-create 1 --body "Implement user authentication system"\ngh project item-add 1 https://github.com/owner/repo/issues/123\n\n# Advanced issue management\n# Create issue template\nmkdir -p .github/ISSUE_TEMPLATE\ncat << \'EOF\' > .github/ISSUE_TEMPLATE/bug_report.yml\nname: Bug Report\ndescription: File a bug report to help us improve\ntitle: "[Bug]: "\nlabels: ["bug", "triage"]\nassignees:\n  - maintainer-team\nbody:\n  - type: markdown\n    attributes:\n      value: |\n        Thanks for taking the time to fill out this bug report!\n  \n  - type: input\n    id: contact\n    attributes:\n      label: Contact Details\n      description: How can we get in touch with you if we need more info?\n      placeholder: ex. email@example.com\n    validations:\n      required: false\n  \n  - type: textarea\n    id: what-happened\n    attributes:\n      label: What happened?\n      description: Also tell us, what did you expect to happen?\n      placeholder: Tell us what you see!\n      value: "A bug happened!"\n    validations:\n      required: true\n  \n  - type: dropdown\n    id: version\n    attributes:\n      label: Version\n      description: What version of our software are you running?\n      options:\n        - 1.0.2 (Default)\n        - 1.0.3 (Edge)\n    validations:\n      required: true\n  \n  - type: dropdown\n    id: browsers\n    attributes:\n      label: What browsers are you seeing the problem on?\n      multiple: true\n      options:\n        - Firefox\n        - Chrome\n        - Safari\n        - Microsoft Edge\n  \n  - type: textarea\n    id: logs\n    attributes:\n      label: Relevant log output\n      description: Please copy and paste any relevant log output. This will be automatically formatted into code, so no need for backticks.\n      render: shell\n  \n  - type: checkboxes\n    id: terms\n    attributes:\n      label: Code of Conduct\n      description: By submitting this issue, you agree to follow our [Code of Conduct](https://example.com)\n      options:\n        - label: I agree to follow this project\'s Code of Conduct\n          required: true\nEOF\n\n# Feature request template\ncat << \'EOF\' > .github/ISSUE_TEMPLATE/feature_request.yml\nname: Feature Request\ndescription: Suggest an idea for this project\ntitle: "[Feature]: "\nlabels: ["enhancement", "triage"]\nbody:\n  - type: markdown\n    attributes:\n      value: |\n        We love feature requests! Please help us understand what you\'re looking for.\n\n  - type: textarea\n    id: problem\n    attributes:\n      label: Is your feature request related to a problem?\n      description: A clear and concise description of what the problem is.\n      placeholder: I\'m always frustrated when...\n\n  - type: textarea\n    id: solution\n    attributes:\n      label: Describe the solution you\'d like\n      description: A clear and concise description of what you want to happen.\n\n  - type: textarea\n    id: alternatives\n    attributes:\n      label: Describe alternatives you\'ve considered\n      description: A clear and concise description of any alternative solutions or features you\'ve considered.\n\n  - type: textarea\n    id: context\n    attributes:\n      label: Additional context\n      description: Add any other context or screenshots about the feature request here.\nEOF\n\n# Pull request template\ncat << \'EOF\' > .github/pull_request_template.md\n## Description\nBrief description of the changes in this PR.\n\n## Type of Change\n- [ ] Bug fix (non-breaking change which fixes an issue)\n- [ ] New feature (non-breaking change which adds functionality)\n- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)\n- [ ] Documentation update\n- [ ] Refactoring\n- [ ] Performance improvement\n\n## Testing\n- [ ] Tests pass locally with my changes\n- [ ] I have added tests that prove my fix is effective or that my feature works\n- [ ] New and existing unit tests pass locally with my changes\n- [ ] Any dependent changes have been merged and published in downstream modules\n\n## Checklist\n- [ ] My code follows the style guidelines of this project\n- [ ] I have performed a self-review of my own code\n- [ ] I have commented my code, particularly in hard-to-understand areas\n- [ ] I have made corresponding changes to the documentation\n- [ ] My changes generate no new warnings\n- [ ] I have added tests that prove my fix is effective or that my feature works\n- [ ] New and existing unit tests pass locally with my changes\n- [ ] Any dependent changes have been merged and published in downstream modules\n\n## Screenshots (if applicable)\nAdd screenshots to help explain your changes.\n\n## Related Issues\nCloses #(issue_number)\nEOF\n\n# Advanced issue automation\ngh issue create --title "Weekly Team Sync" \\\n  --body "## Agenda\n- Review completed work\n- Discuss blockers\n- Plan next week\'s priorities\n\n## Attendees\n- [ ] @alice\n- [ ] @bob\n- [ ] @charlie\n\n## Action Items\n- [ ] Item 1\n- [ ] Item 2" \\\n  --assignee @me \\\n  --label meeting,weekly\n\n# Bulk issue operations\n# Close multiple issues\ngh issue list --state open --label "duplicate" --json number --jq \'.[].number\' | \\\n  xargs -I {} gh issue close {} --comment "Closing as duplicate"\n\n# Apply labels to multiple issues\ngh issue list --state open --search "react" --json number --jq \'.[].number\' | \\\n  xargs -I {} gh issue edit {} --add-label "frontend"\n'})}),"\n",(0,i.jsx)(n.h3,{id:"75-team-management-and-organization",children:"7.5 Team Management and Organization"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Organization management\n# Create team\ngh api -X POST "/orgs/myorg/teams" \\\n  --field name="backend-team" \\\n  --field description="Backend development team" \\\n  --field privacy="closed"\n\n# Add members to team\ngh api -X PUT "/orgs/myorg/teams/backend-team/memberships/username" \\\n  --field role="member"\n\n# Add team to repository\ngh api -X PUT "/orgs/myorg/teams/backend-team/repos/myorg/myrepo" \\\n  --field permission="push"\n\n# List team members\ngh api "/orgs/myorg/teams/backend-team/members"\n\n# Organization security settings\n# Enable two-factor authentication requirement\ngh api -X PATCH "/orgs/myorg" \\\n  --field two_factor_requirement_enabled=true\n\n# Configure member privileges\ngh api -X PATCH "/orgs/myorg" \\\n  --field members_can_create_repositories=false \\\n  --field members_can_create_pages=false\n\n# Repository access management\n# Grant specific permissions\ngh api -X PUT "/repos/owner/repo/collaborators/username" \\\n  --field permission="maintain"\n\n# Remove collaborator\ngh api -X DELETE "/repos/owner/repo/collaborators/username"\n\n# Team-based repository access\ngh api -X PUT "/orgs/myorg/teams/backend-team/repos/myorg/backend-api" \\\n  --field permission="admin"\n\n# Outside collaborator management\ngh api -X PUT "/repos/owner/repo/collaborators/contractor" \\\n  --field permission="triage"\n\n# Audit and compliance\n# List organization members\ngh api "/orgs/myorg/members" --jq \'.[].login\'\n\n# Audit repository access\ngh api "/repos/owner/repo/collaborators" --jq \'.[] | {login: .login, permission: .permissions}\'\n\n# Export audit logs (requires admin permissions)\ngh api -X GET "/orgs/myorg/audit-log" \\\n  --field phrase="action:repo.create" \\\n  --field include="git" \\\n  > audit-log.json\n'})}),"\n",(0,i.jsx)(n.h3,{id:"76-advanced-workflow-automation",children:"7.6 Advanced Workflow Automation"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# GitHub Apps for enhanced automation\n# Create GitHub App configuration\ncat << 'EOF' > github-app-config.yml\nname: \"Team Automation Bot\"\ndescription: \"Automates team workflows and notifications\"\nhomepage_url: \"https://company.com/automation\"\nwebhook_url: \"https://bot.company.com/webhook\"\npermissions:\n  issues: write\n  pull_requests: write\n  contents: read\n  metadata: read\n  checks: read\nevents:\n  - issues\n  - pull_request\n  - push\n  - check_run\nEOF\n\n# Automated project management with Actions\ncat << 'EOF' > .github/workflows/project-automation.yml\nname: Project Automation\n\non:\n  issues:\n    types: [opened, labeled]\n  pull_request:\n    types: [opened, ready_for_review, closed]\n\njobs:\n  manage-projects:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Add issue to project\n        if: github.event_name == 'issues' && github.event.action == 'opened'\n        uses: actions/add-to-project@v0.4.0\n        with:\n          project-url: https://github.com/orgs/myorg/projects/1\n          github-token: ${{ secrets.ADD_TO_PROJECT_PAT }}\n\n      - name: Move to \"In Progress\" when PR opened\n        if: github.event_name == 'pull_request' && github.event.action == 'opened'\n        uses: actions/add-to-project@v0.4.0\n        with:\n          project-url: https://github.com/orgs/myorg/projects/1\n          github-token: ${{ secrets.ADD_TO_PROJECT_PAT }}\n          labeled: in-progress\n\n      - name: Move to \"Done\" when PR merged\n        if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged\n        run: |\n          # Extract issue numbers from PR body\n          ISSUE_NUMBERS=$(echo \"${{ github.event.pull_request.body }}\" | grep -oP '(?:close|closes|fix|fixes|resolve|resolves)\\s+#\\K\\d+')\n          \n          for ISSUE_NUM in $ISSUE_NUMBERS; do\n            gh project item-edit --project-id ${{ vars.PROJECT_ID }} \\\n              --field-id ${{ vars.STATUS_FIELD_ID }} \\\n              --single-select-option-id ${{ vars.DONE_OPTION_ID }} \\\n              --id $(gh project item-list ${{ vars.PROJECT_ID }} --format json | jq -r \".[] | select(.content.number == $ISSUE_NUM) | .id\")\n          done\n        env:\n          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n\n  notify-team:\n    runs-on: ubuntu-latest\n    if: github.event_name == 'pull_request' && github.event.action == 'ready_for_review'\n    steps:\n      - name: Notify Slack\n        uses: 8398a7/action-slack@v3\n        with:\n          status: custom\n          channel: '#code-reviews'\n          custom_payload: |\n            {\n              text: \"New PR ready for review!\",\n              attachments: [{\n                color: 'good',\n                fields: [{\n                  title: 'Pull Request',\n                  value: '<${{ github.event.pull_request.html_url }}|${{ github.event.pull_request.title }}>',\n                  short: true\n                }, {\n                  title: 'Author',\n                  value: '${{ github.event.pull_request.user.login }}',\n                  short: true\n                }, {\n                  title: 'Repository',\n                  value: '${{ github.repository }}',\n                  short: true\n                }]\n              }]\n            }\n        env:\n          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}\n\n  auto-assign:\n    runs-on: ubuntu-latest\n    if: github.event_name == 'pull_request' && github.event.action == 'opened'\n    steps:\n      - name: Auto-assign reviewers\n        uses: actions/github-script@v7\n        with:\n          script: |\n            const { data: files } = await github.rest.pulls.listFiles({\n              owner: context.repo.owner,\n              repo: context.repo.repo,\n              pull_number: context.issue.number\n            });\n\n            // Define reviewer assignment rules\n            const rules = [\n              { pattern: /^src\\/api\\//, reviewers: ['backend-team'] },\n              { pattern: /^src\\/components\\//, reviewers: ['frontend-team'] },\n              { pattern: /^docs\\//, reviewers: ['docs-team'] },\n              { pattern: /\\.test\\.[jt]sx?$/, reviewers: ['qa-team'] }\n            ];\n\n            const reviewers = new Set();\n            \n            files.forEach(file => {\n              rules.forEach(rule => {\n                if (rule.pattern.test(file.filename)) {\n                  rule.reviewers.forEach(reviewer => reviewers.add(reviewer));\n                }\n              });\n            });\n\n            if (reviewers.size > 0) {\n              await github.rest.pulls.requestReviewers({\n                owner: context.repo.owner,\n                repo: context.repo.repo,\n                pull_number: context.issue.number,\n                team_reviewers: Array.from(reviewers)\n              });\n            }\nEOF\n\n# Automated release management\ncat << 'EOF' > .github/workflows/release-automation.yml\nname: Release Automation\n\non:\n  push:\n    tags:\n      - 'v*'\n\njobs:\n  create-release:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: write\n      issues: write\n      pull-requests: write\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          fetch-depth: 0\n\n      - name: Generate changelog\n        id: changelog\n        run: |\n          # Get previous tag\n          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo \"\")\n          \n          if [ -z \"$PREVIOUS_TAG\" ]; then\n            CHANGELOG=$(git log --oneline --pretty=format:\"- %s\" ${{ github.ref_name }})\n          else\n            CHANGELOG=$(git log --oneline --pretty=format:\"- %s\" ${PREVIOUS_TAG}..${{ github.ref_name }})\n          fi\n          \n          echo \"changelog<<EOF\" >> $GITHUB_OUTPUT\n          echo \"$CHANGELOG\" >> $GITHUB_OUTPUT\n          echo \"EOF\" >> $GITHUB_OUTPUT\n\n      - name: Create Release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          tag_name: ${{ github.ref_name }}\n          release_name: Release ${{ github.ref_name }}\n          body: |\n            ## Changes in ${{ github.ref_name }}\n            \n            ${{ steps.changelog.outputs.changelog }}\n            \n            **Full Changelog**: https://github.com/${{ github.repository }}/compare/${{ steps.changelog.outputs.previous_tag }}...${{ github.ref_name }}\n          draft: false\n          prerelease: ${{ contains(github.ref_name, '-') }}\n\n      - name: Close milestone\n        run: |\n          # Find milestone matching the tag\n          MILESTONE_NUMBER=$(gh api \"/repos/${{ github.repository }}/milestones\" --jq \".[] | select(.title == \\\"${{ github.ref_name }}\\\") | .number\")\n          \n          if [ -n \"$MILESTONE_NUMBER\" ]; then\n            gh api -X PATCH \"/repos/${{ github.repository }}/milestones/$MILESTONE_NUMBER\" \\\n              --field state=\"closed\"\n            echo \"Closed milestone: ${{ github.ref_name }}\"\n          fi\n        env:\n          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}\nEOF\n"})})]})}function d(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}}}]);