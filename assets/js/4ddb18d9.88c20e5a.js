"use strict";(globalThis.webpackChunkgl_0_bal_01=globalThis.webpackChunkgl_0_bal_01||[]).push([[5083],{16947:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>h});var i=r(53318),s=r(74848),t=r(28453),l=r(89226),o=r(44853);const a={slug:"black-box-architecture-ai-prompts",title:"Stop Your Code from Rotting: AI Prompts for Modular Architecture",authors:"gl0bal01",tags:["ai","coding","productivity"],keywords:["black box architecture","ai prompts","claude code","software architecture","modular design","eskil steenberg","code maintainability","refactoring","ai coding assistants","developer productivity"],description:"Transform codebases into modular, maintainable systems using AI. Specialized prompts teach Claude Code to apply Eskil Steenberg's battle-tested architecture principles for constant developer velocity.",date:new Date("2025-10-26T00:00:00.000Z")},c="Stop Your Code from Rotting: AI Prompts for Modular Architecture",d={authorsImageUrls:[void 0]},h=[{value:"The Problem",id:"the-problem",level:2},{value:"The Solution: Black Box Architecture",id:"the-solution-black-box-architecture",level:2},{value:"Teaching AI to Think Architecturally",id:"teaching-ai-to-think-architecturally",level:2},{value:"Three Specialized Prompts",id:"three-specialized-prompts",level:2},{value:"1. Refactor (<code>/arch</code>)",id:"1-refactor-arch",level:3},{value:"2. Plan (<code>/arch-plan</code>)",id:"2-plan-arch-plan",level:3},{value:"3. Debug (<code>/arch-debug</code>)",id:"3-debug-arch-debug",level:3},{value:"Before &amp; After Example",id:"before--after-example",level:2},{value:"Before (Tightly Coupled)",id:"before-tightly-coupled",level:3},{value:"After (Black Box)",id:"after-black-box",level:3},{value:"The 4-Phase Protocol",id:"the-4-phase-protocol",level:2},{value:"Installation &amp; Usage",id:"installation--usage",level:2},{value:"Language Support",id:"language-support",level:2},{value:"Real-World Impact",id:"real-world-impact",level:2},{value:"Token Efficiency",id:"token-efficiency",level:2},{value:"When to Use",id:"when-to-use",level:2},{value:"Success Metrics",id:"success-metrics",level:2},{value:"Resources",id:"resources",level:2},{value:"The Bottom Line",id:"the-bottom-line",level:2}];function u(e){const n={a:"a",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"Year 1: Ship features in days. Year 3: Same features take weeks. Year 5: You're afraid to touch anything."}),"\n",(0,s.jsxs)(n.p,{children:["Sound familiar? What if your codebase could maintain ",(0,s.jsx)(n.strong,{children:"constant velocity"})," regardless of size? That's the promise of black box architecture\u2014and now you can teach your AI assistant to think this way automatically."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(o.A,{videoId:"sSpULGNHyoI"}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"the-problem",children:"The Problem"}),"\n",(0,s.jsx)(n.p,{children:"Traditional codebases decay predictably. Tight coupling, leaky abstractions, and god objects make every change risky. Change one line, break three files."}),"\n",(0,s.jsx)(n.h2,{id:"the-solution-black-box-architecture",children:"The Solution: Black Box Architecture"}),"\n",(0,s.jsx)(n.p,{children:"Eskil Steenberg\u2014who built 3D engines and networked games entirely in C\u2014discovered something profound:"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:'"It\'s faster to write 5 lines of code today than to write 1 line today and then have to edit it in the future."'})}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["His approach maintains ",(0,s.jsx)(n.strong,{children:"constant developer velocity"})," through five principles:"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Primitive-First Design"})," - Identify core data types"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Black Box Boundaries"})," - Modules communicate through documented interfaces only"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Replaceable Components"})," - Any module can be rewritten using just its interface"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Single Responsibility"})," - One module = one person can own it"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Wrap Dependencies"})," - Never depend directly on external code"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"teaching-ai-to-think-architecturally",children:"Teaching AI to Think Architecturally"}),"\n",(0,s.jsx)(n.p,{children:"AI coding assistants are powerful but often default to quick fixes over architectural thinking. They'll add another parameter to your god object instead of questioning the design."}),"\n",(0,s.jsxs)(l.A,{children:["The solution? ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"https://github.com/gl0bal01/black-box-architecture",children:"black-box-architecture"})}),"\u2014prompts and skills that guide Claude Code to apply these principles automatically."]}),"\n",(0,s.jsx)(n.h2,{id:"three-specialized-prompts",children:"Three Specialized Prompts"}),"\n",(0,s.jsxs)(n.h3,{id:"1-refactor-arch",children:["1. Refactor (",(0,s.jsx)(n.code,{children:"/arch"}),")"]}),"\n",(0,s.jsx)(n.p,{children:"Breaks apart monoliths and creates clean module boundaries."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Task"}),': "Analyze UserService and break it into black box modules"']}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"You get"}),": Current architecture analysis, coupling issues, proposed design, refactoring plan, and risk assessment\u2014all with ",(0,s.jsx)(n.code,{children:"file:line"})," references."]}),"\n",(0,s.jsxs)(n.h3,{id:"2-plan-arch-plan",children:["2. Plan (",(0,s.jsx)(n.code,{children:"/arch-plan"}),")"]}),"\n",(0,s.jsx)(n.p,{children:"Designs new systems from scratch with black box principles."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Task"}),': "Design a real-time chat app architecture"']}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"You get"}),": System primitives, module boundaries, interface specs, phased roadmap, and team organization."]}),"\n",(0,s.jsxs)(n.h3,{id:"3-debug-arch-debug",children:["3. Debug (",(0,s.jsx)(n.code,{children:"/arch-debug"}),")"]}),"\n",(0,s.jsx)(n.p,{children:"Systematic debugging with modular isolation."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Task"}),': "Users report intermittent auth failures"']}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"You get"}),": Module isolation strategy, black box testing approach, interface validation, and fix plan that maintains boundaries."]}),"\n",(0,s.jsx)(n.h2,{id:"before--after-example",children:"Before & After Example"}),"\n",(0,s.jsx)(n.h3,{id:"before-tightly-coupled",children:"Before (Tightly Coupled)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'class UserManager:\n    def __init__(self):\n        self.db = PostgresConnection()  # \u274c Direct dependency\n        self.mailer = SendGrid(api_key="...")  # \u274c Direct dependency\n\n    def register(self, email, password):\n        # \u274c Doing too much: validation, hashing, storage, email\n        if not self._validate_email(email):\n            raise ValueError("Invalid email")\n        hashed = bcrypt.hashpw(password.encode(), bcrypt.gensalt())\n        user_id = self.db.execute("INSERT INTO users ...", email, hashed)\n        self.mailer.send(to=email, subject="Welcome!", body="Thanks!")\n        return user_id\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Problems"}),": Can't test without DB and SendGrid. Can't swap email provider. Too complex for one person."]}),"\n",(0,s.jsx)(n.h3,{id:"after-black-box",children:"After (Black Box)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Define clear interfaces\nclass UserRepository(Protocol):\n    def save(self, user: User) -> UserId: ...\n\nclass EmailService(Protocol):\n    def send_welcome(self, email: str) -> None: ...\n\nclass PasswordHasher(Protocol):\n    def hash(self, password: str) -> str: ...\n\n# Single responsibility service\nclass UserRegistrar:\n    def __init__(self, repository: UserRepository,\n                 email_service: EmailService, hasher: PasswordHasher):\n        self._repo = repository\n        self._email = email_service\n        self._hasher = hasher\n\n    def register(self, email: str, password: str) -> UserId:\n        if not self._is_valid_email(email):\n            raise ValueError("Invalid email")\n\n        user = User(email=email, password_hash=self._hasher.hash(password))\n        user_id = self._repo.save(user)\n        self._email.send_welcome(email)\n        return user_id\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Benefits"}),": Testable in isolation, swap implementations easily, clear purpose, one person can own each module."]}),"\n",(0,s.jsx)(n.h2,{id:"the-4-phase-protocol",children:"The 4-Phase Protocol"}),"\n",(0,s.jsx)(n.p,{children:"Each prompt follows a structured workflow:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Discovery (15-20%)"})," - Map structure, find primitives, ",(0,s.jsx)(n.strong,{children:"STOP and confirm"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Analysis (25-30%)"})," - Identify boundaries, map dependencies, find violations"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Design (30-35%)"})," - Design interfaces, show examples, ",(0,s.jsx)(n.strong,{children:"get approval"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Implementation (30-35%)"})," - Refactor one module at a time, test continuously"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"installation--usage",children:"Installation & Usage"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Install as commands\ngit clone https://github.com/gl0bal01/black-box-architecture\ncp -r commands/ .claude/commands/\n\n# Use in Claude Code\n/arch Refactor PaymentProcessor to use black box design\n/arch-plan Design a multi-tenant SaaS architecture\n/arch-debug Why do tests fail when I mock the database?\n"})}),"\n",(0,s.jsx)(n.h2,{id:"language-support",children:"Language Support"}),"\n",(0,s.jsxs)(n.p,{children:["Examples in ",(0,s.jsx)(n.strong,{children:"6 languages"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Python"})," - Protocols, dependency injection"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"TypeScript"})," - Interfaces, generics"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Go"})," - Interfaces, struct composition"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Rust"})," - Traits, zero-cost abstractions"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"C"})," - Opaque types, function pointers (Eskil's way!)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"PHP"})," - Service containers, Laravel integration"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"real-world-impact",children:"Real-World Impact"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Before"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Feature velocity: Decreasing"}),"\n",(0,s.jsx)(n.li,{children:"Test coverage: Hard (mocking nightmare)"}),"\n",(0,s.jsx)(n.li,{children:"Onboarding: Weeks"}),"\n",(0,s.jsx)(n.li,{children:"Technical debt: Growing"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"After"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Feature velocity: ",(0,s.jsx)(n.strong,{children:"Constant"})," (new modules)"]}),"\n",(0,s.jsxs)(n.li,{children:["Test coverage: ",(0,s.jsx)(n.strong,{children:"High"})," (mock interfaces)"]}),"\n",(0,s.jsxs)(n.li,{children:["Onboarding: ",(0,s.jsx)(n.strong,{children:"Days"})," (own single modules)"]}),"\n",(0,s.jsxs)(n.li,{children:["Technical debt: ",(0,s.jsx)(n.strong,{children:"Decreasing"})," (rewrite when needed)"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"token-efficiency",children:"Token Efficiency"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Compact versions"}),": ~3,300 tokens (all three prompts)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Enhanced versions"}),": ~12,000 tokens (with examples)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"71% smaller"})," while maintaining full workflow"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"when-to-use",children:"When to Use"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsxs)(n.strong,{children:[(0,s.jsx)(n.code,{children:"/arch"})," (refactor)"]}),": Codebase feels tangled, tests complex, changes break things"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"/arch-plan"})}),": Starting new project, designing architecture, evaluating tech choices"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"/arch-debug"})}),": Bug unclear, tests fail intermittently, mocking difficult"]}),"\n",(0,s.jsx)(n.h2,{id:"success-metrics",children:"Success Metrics"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Developer velocity"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Time to add feature: Constant over years"}),"\n",(0,s.jsx)(n.li,{children:"Time to fix bug: Localized to single module"}),"\n",(0,s.jsx)(n.li,{children:"Onboarding: < 1 day"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Code quality"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Lines per module: < 500"}),"\n",(0,s.jsx)(n.li,{children:"Methods per interface: < 10"}),"\n",(0,s.jsx)(n.li,{children:"Dependencies per module: < 5"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"resources",children:"Resources"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Original Philosophy"}),": ",(0,s.jsx)(n.a,{href:"https://www.youtube.com/watch?v=sSpULGNHyoI",children:"Eskil's Lecture"})," (1 hour)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Repository"}),": ",(0,s.jsx)(n.a,{href:"https://github.com/gl0bal01/black-box-architecture",children:"github.com/gl0bal01/black-box-architecture"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Principles Guide"}),": ",(0,s.jsx)(n.a,{href:"https://github.com/gl0bal01/black-box-architecture/blob/main/docs/PRINCIPLES.md",children:"Deep dive"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Examples"}),": ",(0,s.jsx)(n.a,{href:"https://github.com/gl0bal01/black-box-architecture/tree/main/examples",children:"6 languages"})]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"the-bottom-line",children:"The Bottom Line"}),"\n",(0,s.jsxs)(n.p,{children:["Software doesn't have to rot. These AI prompts teach your assistant to ",(0,s.jsx)(n.strong,{children:"design for humans first, machines second"}),". To build systems that are simple, modular, and replaceable."]}),"\n",(0,s.jsx)(n.p,{children:"Try them on your next refactoring task. Your future self will thank you."}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Open source (MIT). Not affiliated with Anthropic or Eskil Steenberg. Just battle-tested principles, packaged for the AI era."})})]})}function p(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>l,x:()=>o});var i=r(96540);const s={},t=i.createContext(s);function l(e){const n=i.useContext(t);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),i.createElement(t.Provider,{value:n},e.children)}},44853:(e,n,r)=>{r.d(n,{A:()=>s});r(96540);var i=r(74848);function s({videoId:e,title:n="YouTube video"}){return(0,i.jsx)("div",{style:{position:"relative",paddingBottom:"56.25%",height:0,overflow:"hidden"},children:(0,i.jsx)("iframe",{style:{position:"absolute",top:0,left:0,width:"100%",height:"100%"},src:`https://www.youtube.com/embed/${e}`,title:n,frameBorder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowFullScreen:!0})})}},53318:e=>{e.exports=JSON.parse('{"permalink":"/blog/black-box-architecture-ai-prompts","editUrl":"https://github.com/gl0bal01/gl0bal01.github.io/tree/main/blog/2025-10-26-black-box-architecture-ai-prompts.md","source":"@site/blog/2025-10-26-black-box-architecture-ai-prompts.md","title":"Stop Your Code from Rotting: AI Prompts for Modular Architecture","description":"Transform codebases into modular, maintainable systems using AI. Specialized prompts teach Claude Code to apply Eskil Steenberg\'s battle-tested architecture principles for constant developer velocity.","date":"2025-10-26T00:00:00.000Z","tags":[{"inline":false,"label":"AI","permalink":"/blog/tags/ai"},{"inline":false,"label":"Coding","permalink":"/blog/tags/coding"},{"inline":false,"label":"Productivity","permalink":"/blog/tags/productivity"}],"readingTime":4.61,"hasTruncateMarker":true,"authors":[{"name":"gl0bal01","title":"Chief of the v0id","url":"https://gl0bal01.com","page":null,"imageURL":"https://github.com/gl0bal01.png","key":"gl0bal01"}],"frontMatter":{"slug":"black-box-architecture-ai-prompts","title":"Stop Your Code from Rotting: AI Prompts for Modular Architecture","authors":"gl0bal01","tags":["ai","coding","productivity"],"keywords":["black box architecture","ai prompts","claude code","software architecture","modular design","eskil steenberg","code maintainability","refactoring","ai coding assistants","developer productivity"],"description":"Transform codebases into modular, maintainable systems using AI. Specialized prompts teach Claude Code to apply Eskil Steenberg\'s battle-tested architecture principles for constant developer velocity.","date":"2025-10-26T00:00:00.000Z"},"unlisted":false,"nextItem":{"title":"Why I Built Intel Codex","permalink":"/blog/why-intel-codex"}}')},89226:(e,n,r)=>{r.d(n,{A:()=>t});r(96540);var i=r(95293),s=r(74848);function t({children:e,color:n="#FFFF33",block:r=!1}){const{colorMode:t}=(0,i.G)();return(0,s.jsxs)("span",{style:{backgroundColor:n,borderRadius:"0.2rem",color:"#000",padding:"0.2rem 0.4rem",display:r?"block":"inline",marginBottom:r?"0.5rem":0},className:"highlight-wrapper",children:[e,(0,s.jsx)("style",{children:"\n        .highlight-wrapper a {\n          color: #000 !important;\n          text-decoration: underline;\n          font-weight: 600;\n        }\n        .highlight-wrapper a:hover {\n          color: #222 !important;\n        }\n      "})]})}}}]);